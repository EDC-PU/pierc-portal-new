
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Mentor Email List (Keep this updated with your actual mentor emails)
    function getMentorEmails() {
      return [
        'prashant.khanna8747@paruluniversity.ac.in',
        'riddhi.bagha29080@paruluniversity.ac.in',
        'nikhil.jumade24167@paruluniversity.ac.in',
        'jay.sudani@paruluniversity.ac.in',
        'hardik.kharva2899@paruluniversity.ac.in',
        'sonal.sudani23321@paruluniversity.ac.in',
        'panchamkumar.baraiya28771@paruluniversity.ac.in',
        'juned.shaikh32161@paruluniversity.ac.in'
      ];
    }

    function isMentorEmail(email) {
      return email in getMentorEmails();
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isUserProfileAdmin() {
      return isSignedIn() && getRole() == 'ADMIN_FACULTY';
    }

    function isUserProfileSuperAdmin() {
      // Super admin must also be an admin faculty.
      return isUserProfileAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    // Helper for validating idea owner fields (used in create and update)
    function isValidIdeaOwnerFields(data) {
      return data.startupTitle is string && data.startupTitle.size() > 0 &&
             data.problemDefinition is string && data.problemDefinition.size() > 0 &&
             data.solutionDescription is string && data.solutionDescription.size() > 0 &&
             data.uniqueness is string && data.uniqueness.size() > 0 &&
             data.applicantCategory is string && data.applicantCategory.size() > 0 &&
             data.currentStage is string && data.currentStage.size() > 0 &&
             (data.teamMembers is string) && // Free text, can be empty
             // Team association fields must be null for idea owners (unless they are also a team member, which is not typical)
             data.associatedIdeaId == null &&
             data.associatedTeamLeaderUid == null;
    }

    // Helper for validating super admin's "Administrative Account" placeholder fields.
    function isSuperAdminPlaceholderFields(data) {
        return data.email == 'pranavrathi07@gmail.com' &&
               data.role == 'ADMIN_FACULTY' &&
               (data.isTeamMemberOnly == false || data.isTeamMemberOnly == null) &&
               data.startupTitle == 'Administrative Account' &&
               data.problemDefinition == 'Handles portal administration.' &&
               data.solutionDescription == 'Provides administrative functions and support.' &&
               data.uniqueness == 'Unique administrative role for system management.' &&
               data.applicantCategory == 'PARUL_STAFF' &&
               data.currentStage == 'STARTUP_STAGE' &&
               data.associatedIdeaId == null &&
               data.associatedTeamLeaderUid == null;
    }

    // Helper for validating mentor's "Faculty/Mentor Account" placeholder fields.
    function isMentorPlaceholderFields(data) {
        return isMentorEmail(data.email) && data.email != 'pranavrathi07@gmail.com' &&
               data.role == 'ADMIN_FACULTY' &&
               (data.isTeamMemberOnly == false || data.isTeamMemberOnly == null) &&
               data.startupTitle == 'Faculty/Mentor Account' &&
               data.problemDefinition == 'Manages portal functions and/or mentorship.' &&
               data.solutionDescription == 'Provides administrative or mentorship support.' &&
               data.uniqueness == 'Unique administrative/mentorship role.' &&
               data.applicantCategory == 'PARUL_STAFF' &&
               data.currentStage == 'STARTUP_STAGE' &&
               data.associatedIdeaId == null &&
               data.associatedTeamLeaderUid == null;
    }


    // Validates UserProfile structure for creation.
    function isCreatingOwnValidProfile(userId, req, res) {
      let commonValidations =
        req.auth.uid == userId &&
        res.data.uid == userId &&
        res.data.email == req.auth.token.email &&
        res.data.fullName is string && res.data.fullName.size() > 0 &&
        res.data.contactNumber is string && res.data.contactNumber.size() > 0 &&
        res.data.createdAt == request.time &&
        res.data.updatedAt == request.time;

      let roleAndSuperAdminValidation;
      if (res.data.email == 'pranavrathi07@gmail.com') {
        roleAndSuperAdminValidation = res.data.role == 'ADMIN_FACULTY' && res.data.isSuperAdmin == true;
      } else if (isMentorEmail(res.data.email)) {
        roleAndSuperAdminValidation = res.data.role == 'ADMIN_FACULTY' && (res.data.isSuperAdmin == false || res.data.isSuperAdmin == null);
      } else {
        roleAndSuperAdminValidation = (res.data.role == 'STUDENT' || res.data.role == 'EXTERNAL_USER') && (res.data.isSuperAdmin == false || res.data.isSuperAdmin == null);
      }

      let teamMemberOnlyValidations =
        res.data.isTeamMemberOnly == true &&
        res.data.associatedIdeaId is string && res.data.associatedIdeaId.size() > 0 &&
        res.data.associatedTeamLeaderUid is string && res.data.associatedTeamLeaderUid.size() > 0 &&
        res.data.startupTitle == null && res.data.problemDefinition == null && res.data.solutionDescription == null &&
        res.data.uniqueness == null && res.data.applicantCategory == null && res.data.currentStage == null && res.data.teamMembers == null;

      let specificRoleBasedValidations;
      if (res.data.isTeamMemberOnly == true) {
        specificRoleBasedValidations = teamMemberOnlyValidations;
      } else if (res.data.email == 'pranavrathi07@gmail.com') {
        // Super admin can create their placeholder OR a regular idea owner profile
        specificRoleBasedValidations = isSuperAdminPlaceholderFields(res.data) || isValidIdeaOwnerFields(res.data);
      } else if (isMentorEmail(res.data.email)) {
        // Mentor can create their placeholder OR a regular idea owner profile
        specificRoleBasedValidations = isMentorPlaceholderFields(res.data) || isValidIdeaOwnerFields(res.data);
      } else {
        // Regular user must be an idea owner
        specificRoleBasedValidations = isValidIdeaOwnerFields(res.data);
      }

      return commonValidations && roleAndSuperAdminValidation && specificRoleBasedValidations;
    }

    // Validates UserProfile structure for updates by the owner.
    function isUpdatingOwnValidProfile(userId, req, res, existingResource) {
      let commonUpdateValidations =
        req.auth.uid == userId &&
        res.data.uid == userId &&
        res.data.email == existingResource.data.email &&
        res.data.role == existingResource.data.role && // User cannot change their own role
        res.data.isSuperAdmin == existingResource.data.isSuperAdmin && // User cannot change their own super admin status
        res.data.createdAt == existingResource.data.createdAt &&
        res.data.updatedAt == request.time &&
        res.data.fullName is string && res.data.fullName.size() > 0 &&
        res.data.contactNumber is string && res.data.contactNumber.size() > 0 &&
        res.data.isTeamMemberOnly == existingResource.data.isTeamMemberOnly &&
        res.data.associatedIdeaId == existingResource.data.associatedIdeaId &&
        res.data.associatedTeamLeaderUid == existingResource.data.associatedTeamLeaderUid;

      let teamMemberOnlyUpdateValidations =
        existingResource.data.isTeamMemberOnly == true &&
        res.data.startupTitle == null && res.data.problemDefinition == null && res.data.solutionDescription == null &&
        res.data.uniqueness == null && res.data.applicantCategory == null && res.data.currentStage == null && res.data.teamMembers == null;

      let specificRoleBasedUpdateValidations;
      if (existingResource.data.isTeamMemberOnly == true) {
        specificRoleBasedUpdateValidations = teamMemberOnlyUpdateValidations;
      } else if (existingResource.data.email == 'pranavrathi07@gmail.com') {
        // Super admin can update their placeholder OR a regular idea owner profile they might have
        specificRoleBasedUpdateValidations = isSuperAdminPlaceholderFields(res.data) || isValidIdeaOwnerFields(res.data);
      } else if (isMentorEmail(existingResource.data.email)) {
        // Mentor can update their placeholder OR a regular idea owner profile they might have
        specificRoleBasedUpdateValidations = isMentorPlaceholderFields(res.data) || isValidIdeaOwnerFields(res.data);
      } else {
        // Regular user must be an idea owner
        specificRoleBasedUpdateValidations = isValidIdeaOwnerFields(res.data);
      }

      return commonUpdateValidations && specificRoleBasedUpdateValidations;
    }

    // Admin can update general profile fields of any user. Role/SuperAdmin changes are through specific functions.
    function isAdminUpdatingValidProfileGeneralFields(req, res, existingResource) {
      let allowedGeneralFieldsByAdmin = [
        'fullName', 'contactNumber', 'enrollmentNumber', 'college', 'instituteName',
        'applicantCategory', 'startupTitle', 'problemDefinition', 'solutionDescription',
        'uniqueness', 'currentStage', 'teamMembers', 'updatedAt'
        // 'role' and 'isSuperAdmin' are NOT in this list for general edits.
      ];
      return res.data.uid == existingResource.data.uid &&
             res.data.email == existingResource.data.email &&
             res.data.createdAt == existingResource.data.createdAt &&
             res.data.role == existingResource.data.role && // Role not changed by this general edit
             res.data.isSuperAdmin == existingResource.data.isSuperAdmin && // SuperAdmin status not changed
             res.data.updatedAt == request.time &&
             request.writeFields.hasOnly(allowedGeneralFieldsByAdmin);
    }

    // SuperAdmin specific role/permission updates
    function isSuperAdminUpdatingRoleOrPermissions(req, res, existingResource) {
        return isUserProfileSuperAdmin() && // Only super admin can do this
               req.auth.uid != res.data.uid && // Super admin cannot change their own role/superAdmin status this way
               res.data.uid == existingResource.data.uid &&
               res.data.email == existingResource.data.email &&
               res.data.createdAt == existingResource.data.createdAt &&
               res.data.updatedAt == request.time &&
               // Allowed fields for this specific operation are only role and/or isSuperAdmin (and updatedAt)
               request.writeFields.hasOnly(['role', 'isSuperAdmin', 'updatedAt'] || ['role', 'updatedAt'] || ['isSuperAdmin', 'updatedAt']) &&
               // The target user cannot be the primary super admin if their role/superAdmin status is being changed.
               res.data.email != 'pranavrathi07@gmail.com';
    }

    match /users/{userId} {
      allow create: if isCreatingOwnValidProfile(userId, request, request.resource);
      allow read: if isSignedIn();
      allow update: if
          // Owner updating their own profile
          (isOwner(userId) && isUpdatingOwnValidProfile(userId, request, request.resource, resource)) ||
          // Admin (could be regular or super) updating general fields of another user's profile
          (isUserProfileAdmin() && isAdminUpdatingValidProfileGeneralFields(request, request.resource, resource)) ||
          // SuperAdmin specifically changing role/permissions of another user
          (isUserProfileSuperAdmin() && isSuperAdminUpdatingRoleOrPermissions(request, request.resource, resource));
      allow delete: if isUserProfileSuperAdmin() && request.auth.uid != userId && resource.data.email != 'pranavrathi07@gmail.com';
    }

    // Idea Submission Rules
    function creatorIsNotUsingAdminPlaceholderForIdea(creatorProfile) {
        return creatorProfile.startupTitle != 'Administrative Account' &&
               creatorProfile.startupTitle != 'Faculty/Mentor Account';
    }

    function isValidIdeaSubmissionOnCreate(req, res) {
      let creatorProfile = get(/databases/$(database)/documents/users/$(req.auth.uid)).data;
      let creatorIsIdeaOwnerType = (creatorProfile.isTeamMemberOnly == false || creatorProfile.isTeamMemberOnly == null);

      return creatorIsIdeaOwnerType &&
             creatorIsNotUsingAdminPlaceholderForIdea(creatorProfile) && // Ensure admin/mentor not creating idea from placeholder
             req.auth.uid == res.data.userId &&
             res.data.title is string && res.data.title.size() > 0 &&
             res.data.category is string && res.data.category.size() > 0 &&
             res.data.problem is string && res.data.problem.size() > 0 &&
             res.data.solution is string && res.data.solution.size() > 0 &&
             res.data.uniqueness is string && res.data.uniqueness.size() > 0 &&
             res.data.developmentStage is string && res.data.developmentStage.size() > 0 &&
             res.data.applicantType is string && res.data.applicantType.size() > 0 &&
             (res.data.teamMembers is string) &&
             (res.data.structuredTeamMembers is list && res.data.structuredTeamMembers.size() == 0) &&
             (res.data.teamMemberEmails is list && res.data.teamMemberEmails.size() == 0) &&
             res.data.status == 'SUBMITTED' &&
             res.data.programPhase == null &&
             (res.data.phase2Marks is map && res.data.phase2Marks.keys().size() == 0) &&
             res.data.submittedAt == request.time &&
             res.data.updatedAt == request.time &&
             res.data.applicantDisplayName == creatorProfile.fullName &&
             res.data.applicantEmail == creatorProfile.email &&
             !('fileURL' in res.data) && !('fileName' in res.data) && !('studioLocation' in res.data) &&
             !('rejectionRemarks' in res.data) && !('rejectedByUid' in res.data) && !('rejectedAt' in res.data) &&
             !('phase2PptUrl' in res.data) && !('phase2PptFileName' in res.data) && !('phase2PptUploadedAt' in res.data) &&
             !('nextPhaseDate' in res.data) && !('nextPhaseStartTime' in res.data) && !('nextPhaseEndTime' in res.data) &&
             !('nextPhaseVenue' in res.data) && !('nextPhaseGuidelines' in res.data) &&
             !('mentor' in res.data) && !('cohortId' in res.data);
    }

    // Helper function for admin archiving idea
    function isAdminArchivingIdea(req, res, existing) {
      let expectedWriteFieldsForArchive = [
        'status', 'programPhase', 'phase2Marks', 'mentor', 'cohortId',
        'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
        'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
        'updatedAt'
      ];
      return isUserProfileAdmin() &&
             res.data.status == 'ARCHIVED_BY_ADMIN' &&
             res.data.updatedAt == req.time &&
             req.writeFields.hasOnly(expectedWriteFieldsForArchive) &&
             // Immutable fields for archive
             res.data.userId == existing.data.userId &&
             res.data.title == existing.data.title && // Title shouldn't change on archive
             res.data.submittedAt == existing.data.submittedAt &&
             // Verifying archived state for fields that are nulled/emptied
             res.data.programPhase == null &&
             (res.data.phase2Marks == null || (res.data.phase2Marks is map && res.data.phase2Marks.keys().size() == 0)) &&
             res.data.nextPhaseDate == null &&
             res.data.nextPhaseStartTime == null &&
             res.data.nextPhaseEndTime == null &&
             res.data.nextPhaseVenue == null &&
             res.data.nextPhaseGuidelines == null;
             // For fields removed by deleteField() (e.g. mentor, cohortId), they won't be in res.data.
             // Their presence in req.writeFields is checked by hasOnly().
    }

    // Helper function for general admin updates to an idea
    function isAdminPerformingGeneralIdeaUpdate(req, res, existing) {
      let generalAdminModifiableFields = [
        'status', 'programPhase', 'phase2Marks', 'mentor', 'cohortId',
        'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
        'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
        'updatedAt', 'updatedByMentorAssignerUid' // For mentor assignment logging
      ];
      return isUserProfileAdmin() &&
             res.data.updatedAt == req.time &&
             // Admin should not change owner or core submission details here.
             res.data.userId == existing.data.userId &&
             res.data.title == existing.data.title &&
             res.data.submittedAt == existing.data.submittedAt &&
             req.writeFields.hasOnly(generalAdminModifiableFields);
    }

    // Helper function for owner updating their idea (PPT, team members)
    function isOwnerUpdatingAllowedIdeaFields(req, res, existing) {
      return isOwner(existing.data.userId) &&
             res.data.updatedAt == req.time &&
             // Core fields must not be changed by owner directly here
             res.data.userId == existing.data.userId &&
             res.data.title == existing.data.title &&
             res.data.status == existing.data.status &&
             res.data.programPhase == existing.data.programPhase &&
             (
               // Uploading Phase 2 PPT
               (
                 req.writeFields.hasAll(['phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', 'updatedAt']) &&
                 res.data.phase2PptUrl is string &&
                 res.data.phase2PptFileName is string &&
                 res.data.phase2PptUploadedAt == req.time
               ) ||
               // Managing structured team members
               (
                 req.writeFields.hasAny(['structuredTeamMembers', 'teamMemberEmails', 'updatedAt']) &&
                 res.data.structuredTeamMembers is list && res.data.structuredTeamMembers.size() <= 4 &&
                 res.data.teamMemberEmails is list && res.data.teamMemberEmails.size() <= 4
               )
             );
    }

    // Helper function for owner resubmitting an archived idea
    function isOwnerResubmittingArchivedIdea(req, res, existing) {
        return isOwner(existing.data.userId) &&
               existing.data.status == 'ARCHIVED_BY_ADMIN' && // Current status is archived
               res.data.status == 'SUBMITTED' &&             // New status is submitted
               res.data.updatedAt == req.time &&
               res.data.userId == existing.data.userId &&     // userId must match
               res.data.submittedAt == existing.data.submittedAt && // submittedAt unchanged
               // All other relevant idea fields can be updated from profile
               request.writeFields.hasAny([
                 'title', 'problem', 'solution', 'uniqueness', 'developmentStage', 'applicantType', 'teamMembers',
                 'applicantDisplayName', 'applicantEmail', // these are updated from profile
                 'status', 'programPhase', 'phase2Marks', 'mentor', 'cohortId',
                 'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                 'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                 'updatedAt',
                 'structuredTeamMembers', 'teamMemberEmails' // Team might also update
               ]);
    }

    // Helper for team member updating their own specific part in structuredTeamMembers
    function isTeamMemberUpdatingSelfInIdea(req, res, existing) {
        return req.auth.token.email in existing.data.teamMemberEmails &&
               req.writeFields.hasAll(['structuredTeamMembers', 'updatedAt']) &&
               res.data.updatedAt == req.time &&
               // Core idea fields unchanged by team member
               res.data.userId == existing.data.userId &&
               res.data.title == existing.data.title &&
               res.data.status == existing.data.status &&
               res.data.programPhase == existing.data.programPhase &&
               res.data.teamMemberEmails.toSet().hasAll(existing.data.teamMemberEmails.toSet()) &&
               res.data.teamMemberEmails.size() == existing.data.teamMemberEmails.size() &&
               res.data.structuredTeamMembers.size() == existing.data.structuredTeamMembers.size();
    }


    match /ideas/{ideaId} {
      allow create: if isSignedIn() && isValidIdeaSubmissionOnCreate(request, request.resource);
      allow read: if isSignedIn();
      allow update:
        if (isAdminArchivingIdea(request, request.resource, resource)) ||
           (isAdminPerformingGeneralIdeaUpdate(request, request.resource, resource)) ||
           (isOwnerUpdatingAllowedIdeaFields(request, request.resource, resource)) ||
           (isOwnerResubmittingArchivedIdea(request, request.resource, resource)) ||
           (isTeamMemberUpdatingSelfInIdea(request, request.resource, resource));
      allow delete: if false; // Changed from `isUserProfileAdmin()` to `false` as archiving is the new flow
    }

    // Announcement Rules
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isUserProfileAdmin() &&
                                     (request.method == 'create' ? (request.resource.data.createdAt == request.time && request.resource.data.updatedAt == request.time) : true) &&
                                     (request.method == 'update' ? request.resource.data.updatedAt == request.time : true) &&
                                     (request.method == 'create' || request.method == 'update' ? request.resource.data.createdByUid == request.auth.uid : true);
    }

    // System Settings Rules
    match /systemSettings/config {
      allow read: if isSignedIn();
      allow create, update: if isUserProfileAdmin() &&
                               request.resource.data.updatedAt == request.time &&
                               request.resource.data.updatedByUid == request.auth.uid;
    }

    // Activity Log Rules
    match /activityLogs/{logId} {
      allow read: if isUserProfileAdmin();
      allow create: if isSignedIn() && request.resource.data.timestamp == request.time && request.resource.data.actorUid == request.auth.uid;
      allow update, delete: if false;
    }

    // Cohort Rules
    match /cohorts/{cohortId} {
      allow read: if isSignedIn();
      // Admin can create/update/delete. Update includes adding/removing ideaIds.
      allow create, update, delete: if isUserProfileAdmin();
    }
  }
}
