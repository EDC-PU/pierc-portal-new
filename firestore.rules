
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isSuperAdmin(userId) {
      let userData = getUserData(userId);
      return userData.isSuperAdmin == true && userData.role == 'ADMIN_FACULTY';
    }

    function isAdmin(userId) {
      let userData = getUserData(userId);
      return userData.role == 'ADMIN_FACULTY';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isIdeaOwner(userId, ideaData) {
      return isSignedIn() && request.auth.uid == userId && ideaData.userId == userId;
    }

    // Activity Logs: Admins can create, no one can update/delete through client.
    match /activityLogs/{logId} {
      allow read: if isSignedIn() && isAdmin(request.auth.uid); // Or broader access if needed
      allow create: if isSignedIn() && isAdmin(request.auth.uid); // Or allow any signed-in user if appropriate
      allow update, delete: if false; // Prevent client-side updates/deletes
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isSignedIn(); 
      allow create: if request.auth.uid == userId && 
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       (!('isSuperAdmin' in request.resource.data) || request.resource.data.isSuperAdmin == (request.auth.token.email == 'pranavrathi07@gmail.com')) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;

      allow update: if (isOwner(userId) && 
                        !('role' in request.resource.data) && 
                        !('isSuperAdmin' in request.resource.data) &&
                        request.resource.data.updatedAt == request.time
                       ) || 
                       (isSignedIn() && isAdmin(request.auth.uid) && request.resource.data.updatedAt == request.time); // Admins can update any profile
      
      allow delete: if false; // Deletion should be handled by a Firebase Function or specific admin action
    }

    // Idea Submissions
    function isCreatingOwnIdea(userId, ideaData) {
      let userProfile = getUserData(userId);
      return isSignedIn()
             && request.auth.uid == userId
             && userProfile.isTeamMemberOnly == false
             && ideaData.userId == userId
             && ideaData.title is string && ideaData.title.size() > 0
             && ideaData.problem is string && ideaData.problem.size() > 0
             && ideaData.solution is string && ideaData.solution.size() > 0
             && ideaData.uniqueness is string && ideaData.uniqueness.size() > 0
             && ideaData.developmentStage is string
             && ideaData.applicantType is string
             && ideaData.status == 'SUBMITTED'
             && ideaData.programPhase == null
             && ideaData.cohortId == null // Ensure cohortId is null on creation
             && ideaData.structuredTeamMembers is list && ideaData.structuredTeamMembers.size() <= 4 // Max 4 members
             && ideaData.teamMemberEmails is list && ideaData.teamMemberEmails.size() <= 4
             && ideaData.phase2Marks is map && ideaData.phase2Marks.size() == 0 // Ensure phase2Marks is empty map
             && ideaData.submittedAt == request.time
             && ideaData.updatedAt == request.time
             && request.resource.data.keys().hasOnly([
                  'userId', 'applicantDisplayName', 'applicantEmail', 'title', 'category', 'problem', 'solution', 'uniqueness',
                  'developmentStage', 'applicantType', 'teamMembers', 'structuredTeamMembers', 'teamMemberEmails',
                  'status', 'programPhase', 'cohortId', 'phase2Marks', 'submittedAt', 'updatedAt',
                  // Optional fields that *might* be explicitly set to null or default by client if allowed by type
                  'fileURL', 'fileName', 'studioLocation', 'mentor', 
                  'rejectionRemarks', 'rejectedByUid', 'rejectedAt', 
                  'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt',
                  'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines'
                ]);
    }

    match /ideas/{ideaId} {
      allow read: if isSignedIn();
      allow create: if isCreatingOwnIdea(request.auth.uid, request.resource.data);
      
      // Owner can update specific fields (like PPT details) if idea is in certain states.
      // Admins can update more fields (status, phase, marks, mentor, cohortId).
      allow update: if (isOwner(request.auth.uid) && 
                        request.resource.data.userId == request.auth.uid && // Re-confirm owner
                        request.resource.data.updatedAt == request.time &&
                        (
                          // Allow updating PPT if in PHASE_2 and not changing other restricted fields
                          (request.resource.data.programPhase == 'PHASE_2' &&
                           !request.resource.data.keys().hasAny(['status', 'programPhase', 'phase2Marks', 'mentor', 'cohortId', 'rejectionRemarks'])) ||
                          // Allow updating team members if status is SUBMITTED or UNDER_REVIEW
                          ((request.resource.data.status == 'SUBMITTED' || request.resource.data.status == 'UNDER_REVIEW') &&
                           !request.resource.data.keys().hasAny(['status', 'programPhase', 'phase2Marks', 'mentor', 'cohortId', 'rejectionRemarks', 'phase2PptUrl', 'phase2PptFileName']))
                        )
                       ) || 
                       (isSignedIn() && isAdmin(request.auth.uid) && request.resource.data.updatedAt == request.time);

      allow delete: if isSignedIn() && isAdmin(request.auth.uid); 
    }

    // Announcements
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSignedIn() && isAdmin(request.auth.uid);
    }
    
    // Cohorts
    match /cohorts/{cohortId} {
      allow read: if isSignedIn(); // All signed-in users can read cohort details (e.g., for display)
      allow create: if isSignedIn() && isAdmin(request.auth.uid) &&
                      request.resource.data.createdByUid == request.auth.uid &&
                      request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                      request.resource.data.startDate is timestamp &&
                      request.resource.data.endDate is timestamp &&
                      request.resource.data.batchSize is number && request.resource.data.batchSize > 0 &&
                      request.resource.data.ideaIds is list && request.resource.data.ideaIds.size() == 0 && // Must be empty on create
                      request.resource.data.schedule is list && request.resource.data.schedule.size() == 0 && // Must be empty on create
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.updatedAt == request.time;
                      
      allow update: if isSignedIn() && isAdmin(request.auth.uid) &&
                      request.resource.data.updatedAt == request.time &&
                      (!('createdByUid' in request.resource.data) || request.resource.data.createdByUid == get(/databases/$(database)/documents/cohorts/$(cohortId)).data.createdByUid) &&
                      (!('createdAt' in request.resource.data) || request.resource.data.createdAt == get(/databases/$(database)/documents/cohorts/$(cohortId)).data.createdAt) &&
                      (request.resource.data.ideaIds is list || !('ideaIds' in request.resource.data)) && // Allow updating ideaIds
                      (request.resource.data.schedule is list || !('schedule' in request.resource.data)); // Allow updating schedule
                      
      allow delete: if isSignedIn() && isSuperAdmin(request.auth.uid); // Only Super Admins can delete cohorts
    }

    // System Settings
    match /systemSettings/{settingsId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && isAdmin(request.auth.uid) &&
                              request.resource.data.updatedAt == request.time &&
                              request.resource.data.updatedByUid == request.auth.uid;
      allow delete: if false; // Prevent client-side deletion
    }
    
    // Firebase Functions Callable (Example)
    // This isn't a Firestore rule but shows how you'd control access to a callable function
    // match /functions/{functionName} {
    //  allow call: if isSignedIn();
    // }
  }
}

    