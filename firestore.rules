
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection
    match /users/{userId} {
      // Any authenticated user can create their own profile once.
      allow create: if request.auth.uid == userId;
      // Users can read their own profile. Admins can read any profile.
      allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
      // Users can update their own profile. Admins can update any profile.
      allow update: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
      // Only admins can delete user profiles (handled via a callable function).
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Ideas collection
    match /ideas/{ideaId} {
      // Any authenticated user can create an idea.
      allow create: if request.auth.uid != null;
      // Admins can read all ideas. Users can read their own idea or ideas they are a team member of.
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY' 
                  || resource.data.userId == request.auth.uid
                  || request.auth.token.email in resource.data.teamMemberEmails;
      // Idea owner can update their own idea. Admins can update any idea.
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY'
                    || resource.data.userId == request.auth.uid;
      // Admins can delete ideas.
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Cohorts, Announcements, SystemSettings - Admin write access, public read
    match /cohorts/{cohortId} {
      allow read: if request.auth.uid != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }
    match /announcements/{announcementId} {
       allow read: if request.auth.uid != null;
       allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }
     match /systemSettings/{settingsId} {
      allow read: if request.auth.uid != null;
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Events - Publicly readable, but only admins can create/delete. Any user can RSVP.
    match /events/{eventId} {
       allow read: if true;
       // Allow authenticated user to update only the rsvps array
       allow update: if request.auth.uid != null 
                     && request.resource.data.keys().hasAll(['rsvps', 'rsvpCount', 'updatedAt'])
                     && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps', 'rsvpCount', 'updatedAt']);
       allow create, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
       // This rule allows an admin to update all fields (overrides the specific RSVP rule for them)
       allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }
    
    // Activity Logs - Only readable by admin. Written by backend which uses admin credentials.
    match /activityLogs/{logId} {
      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
      allow write: if false; 
    }

    // Notifications - A user can read their own. An admin can create them. A user can mark their own as read.
    match /notifications/{notificationId} {
      allow read: if request.auth.uid == resource.data.userId;
      // Admins can create notifications for any user.
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
      // Users can mark their own notification as read.
      allow update: if request.auth.uid == resource.data.userId
                    && request.resource.data.isRead == true
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      allow delete: if false;
    }
  }
}
