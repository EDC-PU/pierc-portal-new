rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isRequestingUserAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    function isSuperAdminUser() {
      return isRequestingUserAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isTeamMember(ideaId) {
      let idea = get(/databases/$(database)/documents/ideas/$(ideaId)).data;
      // Check if the teamMemberUids list exists and if the user's UID is in it.
      return isAuth() && (idea.teamMemberUids != null && request.auth.uid in idea.teamMemberUids);
    }

    // --- Collection Rules ---

    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isOwner(userId);
      allow update: if isSuperAdminUser() ||
                      (isOwner(userId) && isOwnProfileUpdateAllowed(request.resource.data, resource.data)) ||
                      (isRequestingUserAdmin() && isAdminUpdatingAllowedFields(request.resource.data, resource.data));
      allow delete: if isSuperAdminUser() || isRequestingUserAdmin();
    }

    match /ideas/{ideaId} {
      // Owner, team members, and admins can read.
      allow read: if isOwner(resource.data.userId) || isTeamMember(ideaId) || isRequestingUserAdmin();

      // Only the owner can create an idea submission.
      allow create: if isOwner(request.resource.data.userId);

      // Granular update rules for different roles.
      allow update: if (isSuperAdminUser() || isRequestingUserAdmin()) || // Admins have broad update power
                      (isOwner(resource.data.userId) && isOwnerMakingAllowedChanges(request, resource)) ||
                      (isTeamMember(ideaId) && isTeamMemberMakingAllowedChanges(request, resource)) ||
                      // Any auth user (owner, member, admin) can update comments.
                      (isAuth() && (isOwner(resource.data.userId) || isTeamMember(ideaId)) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments', 'updatedAt']));

      // Only a super admin can delete an entire idea record.
      allow delete: if isSuperAdminUser();
    }

    match /activityLogs/{logId} {
      allow create: if isAuth() && request.resource.data.actorUid == request.auth.uid;
      allow read, delete: if isRequestingUserAdmin();
      allow update: if false; // Logs should be immutable.
    }

    match /notifications/{notificationId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if isRequestingUserAdmin();
      // Users can only mark their own notifications as read.
      allow update: if isOwner(resource.data.userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'updatedAt']);
    }

    match /events/{eventId} {
      allow read: if true;
      allow create, delete: if isRequestingUserAdmin();
      // Admins can update event details, users can update their RSVP.
      allow update: if (isRequestingUserAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['title', 'description', 'startDateTime', 'endDateTime', 'location', 'category', 'targetAudience', 'cohortId', 'flyerUrl', 'flyerFileName', 'updatedAt'])) ||
                      (isAuth() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps', 'rsvpCount', 'updatedAt']));
    }

    match /announcements/{announcementId} {
      allow read: if true;
      allow create, update, delete: if isRequestingUserAdmin();
    }

    match /cohorts/{cohortId} {
      allow read: if true;
      allow create, update, delete: if isRequestingUserAdmin();
    }

    match /systemSettings/{docId} {
      allow read: if true;
      allow write: if isRequestingUserAdmin();
    }


    // --- Validation Functions ---

    // USER-related validation
    function isOwnProfileUpdateAllowed(newData, oldData) {
      let immutableFields = ['uid', 'email', 'role', 'isSuperAdmin', 'createdAt', 'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid'];
      let allowedPersonalFields = ['fullName', 'contactNumber', 'displayName', 'photoURL', 'enrollmentNumber', 'college', 'instituteName', 'updatedAt'];
      let allowedIdeaFields = ['startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness', 'applicantCategory', 'currentStage'];
      
      let coreFieldsUnchanged = !newData.diff(oldData).affectedKeys().hasAny(immutableFields);

      return oldData.isTeamMemberOnly == true
        ? coreFieldsUnchanged && newData.diff(oldData).affectedKeys().hasOnly(allowedPersonalFields)
        : coreFieldsUnchanged && newData.diff(oldData).affectedKeys().hasOnly(allowedPersonalFields + allowedIdeaFields);
    }

    function isAdminUpdatingAllowedFields(newData, oldData) {
      let allowedFields = ['fullName', 'contactNumber', 'enrollmentNumber', 'college', 'instituteName', 'applicantCategory', 'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness', 'currentStage', 'updatedAt'];
      return newData.diff(oldData).affectedKeys().hasOnly(allowedFields);
    }

    // IDEA-related validation
    function isOwnerMakingAllowedChanges(request, resource) {
      let ownerUpdatableFields = [
        'structuredTeamMembers', 'teamMemberEmails', 'teamMemberUids', // Team management
        'beneficiaryName', 'beneficiaryAccountNo', 'beneficiaryBankName', 'beneficiaryIfscCode', 'beneficiaryAccountType', 'beneficiaryCity', 'beneficiaryBranchName', // Financials
        'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', // Phase 2 PPT
        'sanction1Expenses', 'sanction2Expenses', 'sanction1AppliedForNext', // Expenses
        'incubationDocuments', // General documents
        'yuktiId', 'yuktiPassword', 'yuktiScreenshotUrl', 'yuktiScreenshotFileName', // Yukti portal
        'updatedAt'
      ];
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(ownerUpdatableFields);
    }

    function isTeamMemberMakingAllowedChanges(request, resource) {
      let teamMemberUpdatableFields = [
        'incubationDocuments',
        'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt',
        'sanction1Expenses', 'sanction2Expenses',
        'sanction1AppliedForNext',
        'yuktiId', 'yuktiPassword', 'yuktiScreenshotUrl', 'yuktiScreenshotFileName',
        'updatedAt'
      ];
      // A team member CANNOT change core idea details or the team structure itself.
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(teamMemberUpdatableFields);
    }
  }
}
