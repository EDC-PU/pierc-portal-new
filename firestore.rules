
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }
    
    function isSuperAdmin() {
      return isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    // Validates profile data for creation based on isTeamMemberOnly flag.
    function isCreatingOwnValidProfile() {
      let data = request.resource.data;
      let isTeamMember = data.isTeamMemberOnly == true;

      // --- Common validations for all profile creations ---
      let commonValidations = 
        data.uid == request.auth.uid &&
        data.email == request.auth.token.email &&
        (data.fullName is string && data.fullName.size() > 0) &&
        (data.contactNumber is string && data.contactNumber.size() > 0) &&
        // Role and SuperAdmin self-assignment restrictions
        (data.role != 'ADMIN_FACULTY' || data.email == "pranavrathi07@gmail.com") &&
        (data.isSuperAdmin == false || data.email == "pranavrathi07@gmail.com") &&
        // Ensure core timestamps are server-generated or not client-writable on create
        (data.createdAt == request.time) && 
        (data.updatedAt == request.time);

      if (!commonValidations) {
        return false;
      }

      // --- Role-specific validations ---
      if (isTeamMember) {
        // Team Member: must have association fields, must NOT have idea owner fields (or they must be null)
        return (data.associatedIdeaId is string && data.associatedIdeaId.size() > 0) &&
               (data.associatedTeamLeaderUid is string && data.associatedTeamLeaderUid.size() > 0) &&
               // Idea owner fields must be null
               data.startupTitle == null &&
               data.problemDefinition == null &&
               data.solutionDescription == null &&
               data.uniqueness == null &&
               data.applicantCategory == null &&
               data.currentStage == null &&
               data.teamMembers == null; // free-text team members field
      } else {
        // Idea Owner: must have idea fields, must NOT have team association fields (or they must be null)
        return (data.startupTitle is string && data.startupTitle.size() > 0) &&
               (data.problemDefinition is string && data.problemDefinition.size() > 0) &&
               (data.solutionDescription is string && data.solutionDescription.size() > 0) &&
               (data.uniqueness is string && data.uniqueness.size() > 0) &&
               (data.applicantCategory is string) && // Enums are strings
               (data.currentStage is string) &&
               // teamMembers (free text) is string, can be empty for idea owner
               (data.teamMembers is string) && 
               // Team member association fields must be null
               data.associatedIdeaId == null &&
               data.associatedTeamLeaderUid == null;
      }
    }
    
    // User Profiles
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin();
      
      // To create a profile, user must be themselves and the profile data must be valid.
      allow create: if isUser(userId) && isCreatingOwnValidProfile();

      allow update: if 
        // Case 1: User is updating their own profile
        (isUser(userId) && 
          // User cannot change their own core/restricted fields directly
          // These fields are either immutable or managed by specific backend/admin processes.
          !( 'uid' in request.resource.data && request.resource.data.uid != resource.data.uid ) &&
          !( 'email' in request.resource.data && request.resource.data.email != resource.data.email ) &&
          !( 'role' in request.resource.data && request.resource.data.role != resource.data.role ) &&
          !( 'isSuperAdmin' in request.resource.data && request.resource.data.isSuperAdmin != resource.data.isSuperAdmin ) &&
          !( 'createdAt' in request.resource.data && request.resource.data.createdAt != resource.data.createdAt) &&
          !( 'isTeamMemberOnly' in request.resource.data && request.resource.data.isTeamMemberOnly != resource.data.isTeamMemberOnly ) &&
          !( 'associatedIdeaId' in request.resource.data && request.resource.data.associatedIdeaId != resource.data.associatedIdeaId ) &&
          !( 'associatedTeamLeaderUid' in request.resource.data && request.resource.data.associatedTeamLeaderUid != resource.data.associatedTeamLeaderUid ) &&
          request.resource.data.updatedAt == request.time // Ensure updatedAt is server time
        ) || 
        // Case 2: Admin is updating a profile
        (isAdmin() && 
          // Admins cannot change the primary super admin's role/superAdmin status away from the defaults.
          (resource.data.email != "pranavrathi07@gmail.com" ||
            (request.resource.data.role == 'ADMIN_FACULTY' && request.resource.data.isSuperAdmin == true)
          ) &&
          request.resource.data.updatedAt == request.time // Ensure updatedAt is server time
        );
        
      allow delete: if 
        // User can delete their own profile (unless they are the primary super admin)
        (isUser(userId) && resource.data.email != "pranavrathi07@gmail.com") || 
        // Admin can delete other users' profiles (unless it's the primary super admin)
        (isAdmin() && resource.data.email != "pranavrathi07@gmail.com");
    }

    // Idea Submissions
    match /ideas/{ideaId} {
      allow read: if isAuthenticated() && 
                     (isUser(resource.data.userId) || // Owner
                      (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails) || // Team Member
                      isAdmin() // Admin
                     );

      allow create: if isAuthenticated() && 
                     isUser(request.resource.data.userId) && // Creator must be the authenticated user
                     request.resource.data.status == 'SUBMITTED' && // Initial status
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.submittedAt == request.time &&
                     request.resource.data.updatedAt == request.time &&
                     // Idea owner fields must be present for a new idea
                     (request.resource.data.title is string && request.resource.data.title.size() > 0) &&
                     (request.resource.data.problem is string && request.resource.data.problem.size() > 0) &&
                     (request.resource.data.solution is string && request.resource.data.solution.size() > 0) &&
                     (request.resource.data.uniqueness is string && request.resource.data.uniqueness.size() > 0) &&
                     (request.resource.data.developmentStage is string) &&
                     (request.resource.data.applicantType is string) &&
                     (request.resource.data.teamMembers is string) && // free text field
                     (request.resource.data.structuredTeamMembers is list && request.resource.data.structuredTeamMembers.size() == 0) && // Must be empty list on create
                     (request.resource.data.teamMemberEmails is list && request.resource.data.teamMemberEmails.size() == 0); // Must be empty list on create


      allow update: if isAuthenticated() &&
        (
          // Admin can update (consider making this more granular for specific admin actions)
          isAdmin() && request.resource.data.updatedAt == request.time
          ||
          // Idea Owner can update certain fields
          (isUser(resource.data.userId) &&
            request.resource.data.updatedAt == request.time &&
            // Owner cannot change these core fields through general update
            request.resource.data.userId == resource.data.userId &&
            request.resource.data.status == resource.data.status && // Status changed by admin
            request.resource.data.programPhase == resource.data.programPhase && // Phase changed by admin
            request.resource.data.mentor == resource.data.mentor && // Mentor assigned by admin
            request.resource.data.phase2Marks == resource.data.phase2Marks && // Marks by admin
            // Owner cannot modify teamMemberEmails list directly, it's derived from structuredTeamMembers
            request.resource.data.teamMemberEmails.size() == resource.data.teamMemberEmails.size() && 
            ( !( 'teamMemberEmails' in request.resource.data.diff(resource.data).affectedKeys() ) || 
               (request.resource.data.teamMemberEmails.size() == resource.data.teamMemberEmails.size()) // defensive check if affectedKeys is tricky
            ) &&
            // Rejection details are admin-only
            request.resource.data.rejectionRemarks == resource.data.rejectionRemarks &&
            request.resource.data.rejectedByUid == resource.data.rejectedByUid &&
            request.resource.data.rejectedAt == resource.data.rejectedAt &&
            // Next phase details are admin-only
            request.resource.data.nextPhaseDate == resource.data.nextPhaseDate &&
            request.resource.data.nextPhaseStartTime == resource.data.nextPhaseStartTime &&
            request.resource.data.nextPhaseEndTime == resource.data.nextPhaseEndTime &&
            request.resource.data.nextPhaseVenue == resource.data.nextPhaseVenue &&
            request.resource.data.nextPhaseGuidelines == resource.data.nextPhaseGuidelines
            // Allowed fields for owner to update: title, category, problem, solution, uniqueness,
            // developmentStage, applicantType, teamMembers (free text), structuredTeamMembers,
            // fileURL, fileName, studioLocation, phase2PptUrl, phase2PptFileName, phase2PptUploadedAt.
            // The absence of a field in the disallow list implies it can be changed by owner if other conditions pass.
          )
          ||
          // Team member can update their details within structuredTeamMembers array
          ( (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails) &&
            request.writeFields.hasOnly(['structuredTeamMembers', 'updatedAt']) && // CRITICAL: only these top-level fields
            request.resource.data.userId == resource.data.userId && // Cannot change idea owner
            request.resource.data.status == resource.data.status && // Cannot change status
            request.resource.data.programPhase == resource.data.programPhase && // Cannot change phase
            // Team members cannot change the list of team member emails directly
            request.resource.data.teamMemberEmails.size() == resource.data.teamMemberEmails.size() &&
            ( !( 'teamMemberEmails' in request.resource.data.diff(resource.data).affectedKeys() ) || 
               (request.resource.data.teamMemberEmails.size() == resource.data.teamMemberEmails.size())
            ) &&
            // Team members cannot change the number of members in structuredTeamMembers
            request.resource.data.structuredTeamMembers.size() == resource.data.structuredTeamMembers.size() &&
            request.resource.data.updatedAt == request.time
            // Further validation of *which* item in structuredTeamMembers changed (e.g. only their own, and id is now their uid)
            // is very complex for rules. We rely on client-side logic in updateTeamMemberDetailsInIdeaAfterProfileSetup.
          )
        );
      
      allow delete: if isAuthenticated() && (isUser(resource.data.userId) || isAdmin());
    }

    // Announcements
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // System Settings
    match /systemSettings/config {
      allow read: if isAuthenticated(); 
      allow write: if isAdmin(); 
    }
    
    // Activity Logs
    match /activityLogs/{logId} {
      // Users can create their own activity log entries.
      allow create: if isAuthenticated() && request.resource.data.actorUid == request.auth.uid;
      // Admins can read activity logs.
      allow read: if isAdmin();
      // No updates or deletes to logs through client SDK.
      allow update, delete: if false;
    }
  }
}

    