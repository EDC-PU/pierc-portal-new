
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      // Ensure the user document exists and has the role field before checking it.
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    function isSuperAdmin() {
      return isAdmin() && // User must first be an admin
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    function isPrimarySuperAdminEmail(email) {
      return email == 'pranavrathi07@gmail.com';
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isAuthenticated();

      allow create: if isUser(userId) &&
                      request.resource.data.uid == userId &&
                      // Email in the new document must match the authenticated user's token email
                      request.resource.data.email == request.auth.token.email &&
                      // Users cannot grant themselves ADMIN_FACULTY role unless they are the primary super admin (identified by email in token)
                      (request.resource.data.role != 'ADMIN_FACULTY' || request.auth.token.email == "pranavrathi07@gmail.com") &&
                      // Users cannot grant themselves isSuperAdmin unless they are the primary super admin
                      (request.resource.data.isSuperAdmin == false || request.auth.token.email == "pranavrathi07@gmail.com") &&
                      // Ensure required fields for a new profile are present
                      request.resource.data.fullName != null &&
                      request.resource.data.contactNumber != null &&
                      // If not a team member only, idea owner fields must be present
                      (request.resource.data.isTeamMemberOnly == true || (
                        request.resource.data.applicantCategory != null &&
                        request.resource.data.currentStage != null &&
                        request.resource.data.startupTitle != null &&
                        request.resource.data.problemDefinition != null &&
                        request.resource.data.solutionDescription != null &&
                        request.resource.data.uniqueness != null
                      )) &&
                      // If team member only, association fields must be present
                      (request.resource.data.isTeamMemberOnly == false || (
                        request.resource.data.associatedIdeaId != null &&
                        request.resource.data.associatedTeamLeaderUid != null
                      ));


      allow update: if
                      // Admins can update user profiles
                      (isAdmin() &&
                        // Prevent admin from demoting the primary super admin or changing their role from ADMIN_FACULTY
                        (resource.data.email != "pranavrathi07@gmail.com" ||
                          (request.resource.data.role == 'ADMIN_FACULTY' && request.resource.data.isSuperAdmin == true)
                        ) &&
                        // Admins cannot change uid, email, or createdAt
                        request.resource.data.uid == resource.data.uid &&
                        request.resource.data.email == resource.data.email &&
                        request.resource.data.createdAt.toMillis() == resource.data.createdAt.toMillis()
                      )
                      ||
                      // Users can update their own profile, but not critical/role fields
                      (isUser(userId) &&
                        request.resource.data.uid == resource.data.uid &&
                        request.resource.data.email == resource.data.email &&
                        request.resource.data.role == resource.data.role &&
                        request.resource.data.isSuperAdmin == resource.data.isSuperAdmin &&
                        request.resource.data.createdAt.toMillis() == resource.data.createdAt.toMillis() &&
                        request.resource.data.isTeamMemberOnly == resource.data.isTeamMemberOnly &&
                        request.resource.data.associatedIdeaId == resource.data.associatedIdeaId &&
                        request.resource.data.associatedTeamLeaderUid == resource.data.associatedTeamLeaderUid
                      );

      allow delete: if isAdmin() && resource.data.email != "pranavrathi07@gmail.com";
    }

    // Ideas Collection
    match /ideas/{ideaId} {
      allow read: if isAuthenticated() &&
                     (isUser(resource.data.userId) || // Owner
                      (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails) || // Team Member
                      isAdmin() // Admin
                     );

      allow create: if isAuthenticated() &&
                      isUser(request.resource.data.userId) && // Creator must be the authenticated user
                      request.resource.data.title != null && request.resource.data.title.size() > 0 &&
                      request.resource.data.problem != null && request.resource.data.problem.size() > 0 &&
                      request.resource.data.solution != null && request.resource.data.solution.size() > 0 &&
                      request.resource.data.uniqueness != null && request.resource.data.uniqueness.size() > 0 &&
                      request.resource.data.developmentStage != null &&
                      request.resource.data.applicantType != null &&
                      request.resource.data.status == 'SUBMITTED' && // Initial status must be SUBMITTED
                      request.resource.data.programPhase == null;  // Initial programPhase must be null

      allow update: if isAuthenticated() && (
                      // Admins can update ideas
                      isAdmin()
                      ||
                      // Idea owners can update certain fields
                      (isUser(resource.data.userId) &&
                        // Owner cannot change these admin-controlled or critical fields
                        request.resource.data.userId == resource.data.userId && // Cannot change owner
                        request.resource.data.status == resource.data.status &&
                        request.resource.data.programPhase == resource.data.programPhase &&
                        request.resource.data.phase2Marks == resource.data.phase2Marks &&
                        request.resource.data.mentor == resource.data.mentor &&
                        request.resource.data.rejectionRemarks == resource.data.rejectionRemarks &&
                        request.resource.data.rejectedByUid == resource.data.rejectedByUid &&
                        request.resource.data.rejectedAt == resource.data.rejectedAt &&
                        request.resource.data.nextPhaseDate == resource.data.nextPhaseDate &&
                        request.resource.data.nextPhaseStartTime == resource.data.nextPhaseStartTime &&
                        request.resource.data.nextPhaseEndTime == resource.data.nextPhaseEndTime &&
                        request.resource.data.nextPhaseVenue == resource.data.nextPhaseVenue &&
                        request.resource.data.nextPhaseGuidelines == resource.data.nextPhaseGuidelines &&
                        request.resource.data.submittedAt.toMillis() == resource.data.submittedAt.toMillis() // Cannot change submission time
                      )
                      ||
                      // Team members can update their own details within structuredTeamMembers array
                      (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails &&
                        // Only 'structuredTeamMembers' and 'updatedAt' can be modified at the top level by a team member.
                        request.writeFields.hasAll(['structuredTeamMembers', 'updatedAt']) && request.writeFields.size() == 2 &&
                        // Critical idea fields must not be changed by the team member
                        request.resource.data.userId == resource.data.userId &&
                        request.resource.data.status == resource.data.status &&
                        request.resource.data.programPhase == resource.data.programPhase &&
                        request.resource.data.title == resource.data.title && // Idea title cannot be changed by member
                        // teamMemberEmails list cannot be changed by a team member
                        request.resource.data.teamMemberEmails.toSet().equals(resource.data.teamMemberEmails.toSet()) &&
                        // Size of structuredTeamMembers array cannot be changed by a team member
                        request.resource.data.structuredTeamMembers.size() == resource.data.structuredTeamMembers.size() &&
                        // This rule relies on client-side logic to correctly update only the user's own entry within structuredTeamMembers.
                        // Specifically, it expects the client to set the 'id' of the team member's entry to their request.auth.uid.
                        // A full deep check of array modifications is overly complex for security rules.
                        // The main security is preventing escalation and changes to other critical fields.
                        true // This 'true' assumes client constructs the structuredTeamMembers array update correctly.
                      )
                    );

      allow delete: if isAuthenticated() && (isUser(resource.data.userId) || isAdmin());
    }

    // Announcements Collection
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated(); // Allow listing for feeds
      allow create, update, delete: if isAdmin();
    }

    // System Settings Document (single document 'config')
    match /systemSettings/config {
      allow read: if isAuthenticated();
      allow write: if isAdmin(); // Only admins can change settings
    }

    // Cohorts Collection (Placeholder for Future Use)
    match /cohorts/{cohortId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Activity Logs Collection
    match /activityLogs/{logId} {
      allow read: if isAdmin(); // Only admins can read all activity logs
      // Users can create their own activity log entries.
      // The `actorUid` in the log entry must match the authenticated user's UID.
      allow create: if isAuthenticated() && request.resource.data.actorUid == request.auth.uid;
      allow update, delete: if false; // Logs should be immutable
    }
  }
}

    