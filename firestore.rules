rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    function isSuperAdmin() {
      return isAdmin() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    function isSuperAdminEmail(email) {
      return email == 'pranavrathi07@gmail.com';
    }

    function isMentorEmail(email) {
      let mentorEmails = [
        'prashant.khanna8747@paruluniversity.ac.in',
        'riddhi.bagha29080@paruluniversity.ac.in',
        'nikhil.jumade24167@paruluniversity.ac.in',
        'jay.sudani@paruluniversity.ac.in',
        'hardik.kharva2899@paruluniversity.ac.in',
        'sonal.sudani23321@paruluniversity.ac.in',
        'panchamkumar.baraiya28771@paruluniversity.ac.in',
        'juned.shaikh32161@paruluniversity.ac.in'
      ];
      return email != null && email in mentorEmails;
    }

    // User Profile Rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       // Basic required fields
                       request.resource.data.fullName is string &&
                       request.resource.data.contactNumber is string &&
                       request.resource.data.isSuperAdmin is bool &&
                       request.resource.data.isTeamMemberOnly is bool;
      
      allow update: if isAuthenticated() && 
                       (isOwner(userId) || isAdmin()) &&
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       request.resource.data.updatedAt == request.time &&
                       // Prevent non-admins from changing admin status
                       (isAdmin() || request.resource.data.role == resource.data.role) &&
                       (isSuperAdmin() || request.resource.data.isSuperAdmin == resource.data.isSuperAdmin);
      
      allow delete: if isAdmin() && 
                       resource.data.email != 'pranavrathi07@gmail.com';
    }

    // Idea Submission Rules
    match /ideas/{ideaId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.submittedAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       // Required fields validation
                       request.resource.data.title is string &&
                       request.resource.data.title.size() > 0 &&
                       request.resource.data.title.size() <= 200 &&
                       request.resource.data.problem is string &&
                       request.resource.data.problem.size() > 0 &&
                       request.resource.data.solution is string &&
                       request.resource.data.solution.size() > 0 &&
                       request.resource.data.uniqueness is string &&
                       request.resource.data.uniqueness.size() > 0 &&
                       // Status must be SUBMITTED for new ideas
                       request.resource.data.status == 'SUBMITTED' &&
                       // Development stage validation
                       request.resource.data.developmentStage in ['IDEA', 'PROTOTYPE_STAGE', 'STARTUP_STAGE'] &&
                       // Applicant type validation
                       request.resource.data.applicantType in ['PARUL_STUDENT', 'PARUL_STAFF', 'PARUL_ALUMNI', 'OTHERS'] &&
                       // Team members can be empty string initially
                       request.resource.data.teamMembers is string &&
                       // Initialize arrays and objects
                       request.resource.data.structuredTeamMembers is list &&
                       request.resource.data.teamMemberEmails is list &&
                       request.resource.data.phase2Marks is map &&
                       request.resource.data.sanction1Expenses is list &&
                       request.resource.data.sanction2Expenses is list;
      
      allow update: if isAuthenticated() && (
                       // Owner can update their own idea
                       (request.resource.data.userId == request.auth.uid && 
                        request.resource.data.userId == resource.data.userId &&
                        request.resource.data.submittedAt == resource.data.submittedAt &&
                        request.resource.data.updatedAt == request.time) ||
                       // Admin can update any idea
                       isAdmin()
                     ) &&
                     // Basic field validation
                     request.resource.data.title is string &&
                     request.resource.data.title.size() > 0 &&
                     request.resource.data.title.size() <= 200 &&
                     request.resource.data.problem is string &&
                     request.resource.data.problem.size() > 0 &&
                     request.resource.data.solution is string &&
                     request.resource.data.solution.size() > 0 &&
                     request.resource.data.uniqueness is string &&
                     request.resource.data.uniqueness.size() > 0;
      
      allow delete: if isAdmin();
    }

    // Cohort Rules
    match /cohorts/{cohortId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() &&
                       request.resource.data.createdByUid == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.name is string &&
                       request.resource.data.name.size() > 0;
      allow update: if isAdmin() &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       request.resource.data.updatedAt == request.time;
      allow delete: if isSuperAdmin();
    }

    // Announcement Rules
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() &&
                       request.resource.data.createdByUid == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.title is string &&
                       request.resource.data.title.size() > 0 &&
                       request.resource.data.content is string &&
                       request.resource.data.content.size() > 0;
      allow update: if isAdmin() &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       request.resource.data.updatedAt == request.time;
      allow delete: if isAdmin();
    }

    // System Settings Rules
    match /systemSettings/config {
      allow read: if isAuthenticated();
      allow write: if isSuperAdmin() &&
                      request.resource.data.updatedAt == request.time &&
                      request.resource.data.updatedByUid == request.auth.uid;
    }

    // Activity Logs Rules
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only server-side writes
    }
  }
}
