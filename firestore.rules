
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for User Profiles
    match /users/{userId} {
      allow read: if request.auth != null &&
                    (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY');
      
      allow create: if request.auth != null && request.auth.uid == userId; // For profile setup

      allow update: if request.auth != null &&
                      (
                        // Allow user to update their own profile (e.g., general profile fields)
                        (request.auth.uid == userId) || 
                        // Allow a super admin to update specific fields (role, isSuperAdmin) of another user
                        (
                          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true &&
                          // Prevent modification of the primary super admin by another super admin
                          (resource.data.email != "pranavrathi07@gmail.com" || request.auth.uid == userId) && // allow primary admin to update their own non-sensitive fields if needed via normal path
                          // Check that the write operation is only affecting allowed fields
                          (request.writeFields.hasOnly(['role', 'updatedAt']) || request.writeFields.hasOnly(['role', 'isSuperAdmin', 'updatedAt']))
                        )
                      );
      
      allow delete: if request.auth != null &&
                      // Requester must be an ADMIN_FACULTY
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY' &&
                      // Prevent deleting the primary super admin's profile
                      get(/databases/$(database)/documents/users/$(userId)).data.email != "pranavrathi07@gmail.com";
    }

    // Allow ADMIN_FACULTY to list users (for total user count on dashboard and manage users page).
    match /users {
      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Rules for Announcements
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Rules for System Settings
    match /systemSettings/config {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Rules for Idea Submissions
    match /ideas/{ideaId} {
      // User can read their own idea, ADMIN_FACULTY can read any.
      allow read: if request.auth != null &&
                    (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY');
      // User can create an idea if the userId in the document matches their auth uid.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // User can update their own idea, ADMIN_FACULTY can update any.
      allow update: if request.auth != null &&
                      (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY');
      // Only ADMIN_FACULTY can delete ideas.
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Allow ADMIN_FACULTY to list ideas (for idea counts on dashboard and view applications page).
    match /ideas {
      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }
  }
}
