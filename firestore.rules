
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    function isSuperAdmin() {
      // Super Admin must also be an Admin
      return isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    function isPrimarySuperAdminEmail(email) {
      return email == 'pranavrathi07@gmail.com';
    }

    // Validates data for user profile creation
    function isCreatingOwnValidProfile(data) {
      let commonFieldsPresent = data.fullName != null && data.contactNumber != null;
      let isAttemptingPrivilegeEscalation = data.isSuperAdmin == true || data.role == 'ADMIN_FACULTY';
      let isAllowedRoleAssignment = !isAttemptingPrivilegeEscalation || (isAttemptingPrivilegeEscalation && isPrimarySuperAdminEmail(request.auth.token.email));

      if (data.isTeamMemberOnly == true) {
        // Team member specific checks
        return commonFieldsPresent &&
               isAllowedRoleAssignment &&
               data.associatedIdeaId != null &&
               data.associatedTeamLeaderUid != null &&
               // Ensure idea-owner fields are null or effectively absent
               (data.startupTitle == null) &&
               (data.problemDefinition == null) &&
               (data.solutionDescription == null) &&
               (data.uniqueness == null) &&
               (data.applicantCategory == null) &&
               (data.currentStage == null) &&
               (data.teamMembers == null);
      } else {
        // Idea owner (or admin setting up their own non-team-member profile) specific checks
        return commonFieldsPresent &&
               isAllowedRoleAssignment &&
               data.startupTitle != null && data.startupTitle.size() > 0 &&
               data.problemDefinition != null && data.problemDefinition.size() > 0 &&
               data.solutionDescription != null && data.solutionDescription.size() > 0 &&
               data.uniqueness != null && data.uniqueness.size() > 0 &&
               data.applicantCategory != null &&
               data.currentStage != null &&
               // teamMembers (free text) can be empty string for solo founders
               data.teamMembers != null &&
               // Ensure team association fields are null or absent
               (data.associatedIdeaId == null) &&
               (data.associatedTeamLeaderUid == null);
      }
    }

    // User is updating their own profile, not changing critical fields
    function isUpdatingOwnValidProfile(newData, oldData) {
      return newData.uid == oldData.uid && // Cannot change UID
             newData.email == oldData.email && // Cannot change email
             newData.role == oldData.role && // Role changes are admin-only for existing users via dedicated function
             newData.isSuperAdmin == oldData.isSuperAdmin && // Super admin status is admin-only via dedicated function
             newData.isTeamMemberOnly == oldData.isTeamMemberOnly && // This state is set at creation
             newData.associatedIdeaId == oldData.associatedIdeaId && // This is set at creation if team member
             newData.associatedTeamLeaderUid == oldData.associatedTeamLeaderUid && // This is set at creation if team member
             newData.createdAt.toMillis() == oldData.createdAt.toMillis(); // Cannot change creation timestamp
    }

    // Validates data for an idea submission created by its owner
    function isValidIdeaSubmission(data) {
      return data.userId == request.auth.uid &&
             data.title != null && data.title.size() > 0 &&
             data.problem != null && data.problem.size() > 0 &&
             data.solution != null && data.solution.size() > 0 &&
             data.uniqueness != null && data.uniqueness.size() > 0 &&
             data.developmentStage != null &&
             data.applicantType != null && // This is applicantCategory in UserProfile
             data.status == 'SUBMITTED' && // Initial status
             data.programPhase == null && // Initial phase
             (data.teamMemberEmails == null || data.teamMemberEmails.size() >= 0) && // Can be null or empty array
             (data.structuredTeamMembers == null || data.structuredTeamMembers.size() >= 0); // Can be null or empty array
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated();

      allow create: if isUser(userId) &&
                      request.resource.data.uid == userId &&
                      request.resource.data.email == request.auth.token.email &&
                      isCreatingOwnValidProfile(request.resource.data);

      allow update: if (isAdmin() &&
                        // Admin cannot change primary super admin's role or superAdmin status (unless it's the primary super admin themselves)
                        (resource.data.email != "pranavrathi07@gmail.com" ||
                         (request.resource.data.role == 'ADMIN_FACULTY' && request.resource.data.isSuperAdmin == true && isUser(userId))
                        ) &&
                        // Admin cannot change critical fields like uid, email, createdAt
                         request.resource.data.uid == resource.data.uid &&
                         request.resource.data.email == resource.data.email &&
                         request.resource.data.createdAt.toMillis() == resource.data.createdAt.toMillis()
                       ) ||
                     (isUser(userId) && isUpdatingOwnValidProfile(request.resource.data, resource.data));

      allow delete: if (isUser(userId) && resource.data.email != "pranavrathi07@gmail.com") || // User can delete own profile (except primary super admin)
                     (isAdmin() && resource.data.email != "pranavrathi07@gmail.com"); // Admin can delete others (except primary super admin)
    }

    // Ideas Collection
    match /ideas/{ideaId} {
      allow read: if isAuthenticated() &&
                    (isUser(resource.data.userId) || // Owner
                     (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails) || // Team Member
                     isAdmin() // Admin
                    );

      allow create: if isAuthenticated() &&
                     isUser(request.resource.data.userId) &&
                     isValidIdeaSubmission(request.resource.data);

      allow update: if isAuthenticated() &&
                     (
                       // Admin can update any field
                       isAdmin() ||
                       // Idea Owner can update specific fields
                       (isUser(resource.data.userId) &&
                        !(request.resource.data.diff(resource.data).affectedKeys().hasAny([
                            'status', 'programPhase', 'phase2Marks', 'mentor',
                            'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                            'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                            'userId', 'submittedAt' // Owner cannot change the userId (owner) or submission time
                          ]))
                       ) ||
                       // Team member (who is authenticated and listed in teamMemberEmails) can update their own details in structuredTeamMembers
                       ( (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails) &&
                         request.writeFields.hasOnly(['structuredTeamMembers', 'updatedAt']) && // Only these top-level fields
                         request.resource.data.userId == resource.data.userId && // Cannot change idea owner
                         request.resource.data.status == resource.data.status && // Cannot change status
                         request.resource.data.programPhase == resource.data.programPhase && // Cannot change phase
                         request.resource.data.teamMemberEmails.toSet().equals(resource.data.teamMemberEmails.toSet()) && // Cannot change the flat email list
                         request.resource.data.structuredTeamMembers.size() == resource.data.structuredTeamMembers.size() // Cannot change array size
                         // Further validation that only self-entry in structuredTeamMembers is modified would typically be handled by client logic
                         // or a Cloud Function due to rule complexity for deep array inspection.
                         // The client ensures it sends the full array with only the self-modification.
                       )
                     );

      allow delete: if isAuthenticated() && (isUser(resource.data.userId) || isAdmin());
    }

    // Announcements Collection
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated(); // Added for querying collections
      allow create, update, delete: if isAdmin();
    }

    // Cohorts Collection (Future Use)
    match /cohorts/{cohortId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // System Settings Document
    match /systemSettings/config {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Activity Logs Collection
    match /activityLogs/{logId} {
      allow read: if isAdmin(); // Only admins can read activity logs
      allow create: if isAuthenticated() && request.resource.data.actorUid == request.auth.uid; // Users can create logs for their own actions
      allow update, delete: if false; // Logs are immutable
    }
  }
}
