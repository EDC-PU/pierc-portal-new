
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin(userId) {
      // Check if the user's profile document indicates they are an admin
      // This requires a read to the user's own profile, which should be allowed.
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'ADMIN_FACULTY';
    }
    
    function isSuperAdmin(userId) {
        return isAdmin(userId) && get(/databases/$(database)/documents/users/$(userId)).data.isSuperAdmin == true;
    }

    function isString(value) {
      return value is string;
    }

    function isBoolean(value) {
      return value is bool;
    }

    function isTimestamp(value) {
      return value is timestamp;
    }

    function isNumber(value) {
      return value is int || value is float;
    }
    
    function isNullOrString(value) {
        return value == null || (value is string);
    }
    
    function isNullOrBoolean(value) {
        return value == null || (value is bool);
    }

    function isCreatingOwnValidProfile(userId, request, resource) {
      let commonValidations = request.auth.uid == userId &&
                              resource.data.uid == userId &&
                              resource.data.email == request.auth.token.email &&
                              isString(resource.data.fullName) && resource.data.fullName.size() > 0 &&
                              isString(resource.data.contactNumber) && resource.data.contactNumber.size() >= 10 &&
                              // Role assignment logic
                              ( (resource.data.role == 'STUDENT' && request.auth.token.email.matches(".*@paruluniversity.ac.in$") && (resource.data.isSuperAdmin == false || resource.data.isSuperAdmin == null)) ||
                                (resource.data.role == 'EXTERNAL_USER' && !request.auth.token.email.matches(".*@paruluniversity.ac.in$") && (resource.data.isSuperAdmin == false || resource.data.isSuperAdmin == null)) ||
                                (resource.data.role == 'ADMIN_FACULTY' && request.auth.token.email == "pranavrathi07@gmail.com" && resource.data.isSuperAdmin == true) ||
                                (resource.data.role == 'ADMIN_FACULTY' && isAdmin(request.auth.uid) && (resource.data.isSuperAdmin == false || resource.data.isSuperAdmin == null) && resource.data.email != "pranavrathi07@gmail.com" )
                              ) &&
                              resource.data.createdAt == request.time &&
                              resource.data.updatedAt == request.time;

      let teamMemberValidations = resource.data.isTeamMemberOnly == true &&
                                  isString(resource.data.associatedIdeaId) && resource.data.associatedIdeaId.size() > 0 &&
                                  isString(resource.data.associatedTeamLeaderUid) && resource.data.associatedTeamLeaderUid.size() > 0 &&
                                  resource.data.startupTitle == null &&
                                  resource.data.problemDefinition == null &&
                                  resource.data.solutionDescription == null &&
                                  resource.data.uniqueness == null &&
                                  resource.data.applicantCategory == null &&
                                  resource.data.currentStage == null &&
                                  resource.data.teamMembers == null &&
                                  (isNullOrString(resource.data.enrollmentNumber)) &&
                                  (isNullOrString(resource.data.college)) &&
                                  (isNullOrString(resource.data.instituteName));
                                  // photoURL can be null or string

      let ideaOwnerValidations = (resource.data.isTeamMemberOnly == false || resource.data.isTeamMemberOnly == null) &&
                                 isString(resource.data.startupTitle) && resource.data.startupTitle.size() > 0 &&
                                 isString(resource.data.problemDefinition) && resource.data.problemDefinition.size() > 0 &&
                                 isString(resource.data.solutionDescription) && resource.data.solutionDescription.size() > 0 &&
                                 isString(resource.data.uniqueness) && resource.data.uniqueness.size() > 0 &&
                                 isString(resource.data.applicantCategory) && resource.data.applicantCategory.size() > 0 &&
                                 isString(resource.data.currentStage) && resource.data.currentStage.size() > 0 &&
                                 isString(resource.data.teamMembers) && // Can be empty string
                                 resource.data.associatedIdeaId == null &&
                                 resource.data.associatedTeamLeaderUid == null &&
                                 (isNullOrString(resource.data.enrollmentNumber)) &&
                                 (isNullOrString(resource.data.college)) &&
                                 (isNullOrString(resource.data.instituteName));
                                 // photoURL can be null or string

      let restrictedFields = !('uid' in request.resource.data) || !('email' in request.resource.data) ||
                             !('role' in request.resource.data) || !('isSuperAdmin' in request.resource.data) ||
                             !('createdAt' in request.resource.data) || !('updatedAt' in request.resource.data);
      
      // Ensure no unexpected top-level fields are present during creation
      let allowedFieldsCount = 8; // Base: fullName, contactNumber, role, isSuperAdmin, createdAt, updatedAt, email, uid
      if (resource.data.isTeamMemberOnly == true) {
        allowedFieldsCount += 5; // isTeamMemberOnly, associatedIdeaId, associatedTeamLeaderUid, + up to 2 of (enrollment, college, institute)
      } else {
        allowedFieldsCount += 9; // isTeamMemberOnly, startupTitle, problemDef, solutionDesc, uniqueness, appCat, currentStage, teamMembers, + up to 2 of (enrollment, college, institute)
      }
      // photoURL is also optional. enrollmentNumber, college, instituteName are optional.
      // This size check is approximate and might need adjustment if photoURL is always present or optional fields become many.
      // It aims to prevent arbitrary fields from being added. Max possible is around 15-17.
      let validSize = resource.data.keys().hasOnly([
          'uid', 'email', 'displayName', 'photoURL', 'role', 'isSuperAdmin', 'fullName', 'contactNumber',
          'enrollmentNumber', 'college', 'instituteName',
          'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid',
          'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness',
          'applicantCategory', 'currentStage', 'teamMembers',
          'createdAt', 'updatedAt'
      ]);


      return commonValidations && validSize && (teamMemberValidations || ideaOwnerValidations);
    }

    function isUpdatingOwnValidProfile(userId, request, resource) {
      let isOwner = request.auth.uid == userId;
      let newResource = request.resource.data;
      let oldResource = resource.data;

      // Fields that should not be changed by the user themselves after creation
      let coreFieldsUnchanged = newResource.uid == oldResource.uid &&
                                newResource.email == oldResource.email &&
                                newResource.role == oldResource.role &&
                                newResource.isSuperAdmin == oldResource.isSuperAdmin &&
                                newResource.createdAt == oldResource.createdAt;

      let validUpdateTime = newResource.updatedAt == request.time;
      
      let allowedFieldsToUpdate = newResource.keys().hasOnly([
          'uid', 'email', 'displayName', 'photoURL', 'role', 'isSuperAdmin', 'fullName', 'contactNumber',
          'enrollmentNumber', 'college', 'instituteName',
          'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid',
          'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness',
          'applicantCategory', 'currentStage', 'teamMembers',
          'createdAt', 'updatedAt'
      ]);
      
      // If isTeamMemberOnly, ensure they cannot change idea-specific fields or team association.
      let teamMemberConstraints = oldResource.isTeamMemberOnly == true &&
                                  newResource.isTeamMemberOnly == true &&
                                  newResource.associatedIdeaId == oldResource.associatedIdeaId &&
                                  newResource.associatedTeamLeaderUid == oldResource.associatedTeamLeaderUid &&
                                  newResource.startupTitle == oldResource.startupTitle && // Should remain null
                                  newResource.applicantCategory == oldResource.applicantCategory; // Should remain null
                                  // other idea fields also remain null

      // If idea owner, ensure they cannot change to become a team member only through self-update, or change their idea association fields.
      let ideaOwnerConstraints = (oldResource.isTeamMemberOnly == false || oldResource.isTeamMemberOnly == null) &&
                                 (newResource.isTeamMemberOnly == false || newResource.isTeamMemberOnly == null) &&
                                 newResource.associatedIdeaId == oldResource.associatedIdeaId && // Should remain null
                                 newResource.associatedTeamLeaderUid == oldResource.associatedTeamLeaderUid; // Should remain null
                                 // Idea fields can be updated by owner.

      return isOwner && coreFieldsUnchanged && validUpdateTime && allowedFieldsToUpdate && (teamMemberConstraints || ideaOwnerConstraints);
    }

    function canAdminUpdateUserProfile(request, resource) {
        let isAdminUpdating = isAdmin(request.auth.uid);
        let newResource = request.resource.data;
        let oldResource = resource.data;

        // Admin cannot change these core fields for any user
        let coreFieldsUnchanged = newResource.uid == oldResource.uid &&
                                  newResource.email == oldResource.email &&
                                  newResource.createdAt == oldResource.createdAt;
        
        // Admin can change role and isSuperAdmin status, but not for the primary super admin via this rule.
        let superAdminIntegrity = oldResource.email == "pranavrathi07@gmail.com" ? 
                                    (newResource.role == 'ADMIN_FACULTY' && newResource.isSuperAdmin == true) : true;

        let validUpdateTime = newResource.updatedAt == request.time;
        let allowedFieldsToUpdate = newResource.keys().hasOnly([
            'uid', 'email', 'displayName', 'photoURL', 'role', 'isSuperAdmin', 'fullName', 'contactNumber',
            'enrollmentNumber', 'college', 'instituteName',
            'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid',
            'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness',
            'applicantCategory', 'currentStage', 'teamMembers',
            'createdAt', 'updatedAt'
        ]);

        return isAdminUpdating && coreFieldsUnchanged && superAdminIntegrity && validUpdateTime && allowedFieldsToUpdate;
    }


    // Path rules
    match /users/{userId} {
      allow create: if isCreatingOwnValidProfile(userId, request, request.resource);
      allow read: if isUser(userId) || isAdmin(request.auth.uid);
      allow update: if isUpdatingOwnValidProfile(userId, request, resource) || canAdminUpdateUserProfile(request, resource);
      allow delete: if (isUser(userId) || isAdmin(request.auth.uid)) && resource.data.email != "pranavrathi07@gmail.com";
    }

    match /ideas/{ideaId} {
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       // User creating this idea must NOT be 'isTeamMemberOnly' in their own profile
                       (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isTeamMemberOnly == false ||
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isTeamMemberOnly == null) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.startupTitle != 'Administrative Account' // Prevent idea for admin setup
                       ) &&
                       isString(request.resource.data.title) && request.resource.data.title.size() > 0 &&
                       isString(request.resource.data.problem) && request.resource.data.problem.size() > 0 &&
                       isString(request.resource.data.solution) && request.resource.data.solution.size() > 0 &&
                       isString(request.resource.data.uniqueness) && request.resource.data.uniqueness.size() > 0 &&
                       isString(request.resource.data.developmentStage) && request.resource.data.developmentStage.size() > 0 &&
                       isString(request.resource.data.applicantType) && request.resource.data.applicantType.size() > 0 &&
                       isString(request.resource.data.teamMembers) && 
                       (request.resource.data.structuredTeamMembers == null || request.resource.data.structuredTeamMembers.size() == 0) &&
                       (request.resource.data.teamMemberEmails == null || request.resource.data.teamMemberEmails.size() == 0) &&
                       request.resource.data.status == 'SUBMITTED' &&
                       request.resource.data.programPhase == null &&
                       request.resource.data.mentor == null &&
                       request.resource.data.submittedAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.keys().hasOnly([
                         'userId', 'title', 'category', 'problem', 'solution', 'uniqueness', 'developmentStage', 'applicantType',
                         'teamMembers', 'structuredTeamMembers', 'teamMemberEmails', 'status', 'programPhase', 'mentor',
                         'submittedAt', 'updatedAt', 'fileURL', 'fileName', 'studioLocation', 'cohortId', 'phase2Marks', // phase2Marks initialized as {} or null
                         'rejectionRemarks', 'rejectedByUid', 'rejectedAt', 'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt',
                         'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines'
                       ]);

      allow read: if isAuthenticated(); // All authenticated users can read idea details for now (e.g. team members)

      allow update: if isAuthenticated() &&
                       // Case 1: Idea owner updating their own idea (cannot change owner, or core status/phase directly if not admin)
                       ( resource.data.userId == request.auth.uid &&
                         request.resource.data.userId == resource.data.userId && // Cannot change owner
                         request.resource.data.status == resource.data.status && // Owner cannot change status directly
                         request.resource.data.programPhase == resource.data.programPhase && // Owner cannot change phase directly
                         request.resource.data.mentor == resource.data.mentor && // Owner cannot change mentor
                         request.resource.data.updatedAt == request.time &&
                         // Owner can update: title, problem, solution, uniqueness, devStage, appType, teamMembers (text), structuredTeamMembers (add/edit/remove own),
                         // fileURL, fileName, studioLocation, phase2PptUrl, phase2PptFileName
                         request.writeFields.hasAny([
                            'title', 'problem', 'solution', 'uniqueness', 'developmentStage', 'applicantType', 'teamMembers', 
                            'structuredTeamMembers', 'teamMemberEmails', // When managing team
                            'fileURL', 'fileName', 'studioLocation', 
                            'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt',
                            'updatedAt'
                         ]) &&
                         // Ensure teamMemberEmails array corresponds to structuredTeamMembers if updated
                         ( (!request.writeFields.hasAny(['structuredTeamMembers', 'teamMemberEmails'])) ||
                           (request.resource.data.teamMemberEmails.toSet().hasAll(request.resource.data.structuredTeamMembers.map(member => member.email.toLowerCase()).toSet()) &&
                            request.resource.data.structuredTeamMembers.map(member => member.email.toLowerCase()).toSet().hasAll(request.resource.data.teamMemberEmails.toSet())
                           )
                         ) &&
                         request.resource.data.structuredTeamMembers.size() <= 4
                       ) ||
                       // Case 2: Team member updating their details within structuredTeamMembers after profile setup
                       ( resource.data.teamMemberEmails.hasAny([request.auth.token.email.toLowerCase()]) &&
                         request.writeFields.hasOnly(['structuredTeamMembers', 'updatedAt']) &&
                         request.resource.data.userId == resource.data.userId && // Cannot change owner
                         request.resource.data.status == resource.data.status && // Cannot change status
                         request.resource.data.programPhase == resource.data.programPhase && // Cannot change phase
                         request.resource.data.mentor == resource.data.mentor && // Cannot change mentor
                         request.resource.data.teamMemberEmails.toSet().hasAll(resource.data.teamMemberEmails.toSet()) && // teamMemberEmails list itself must not change
                         request.resource.data.structuredTeamMembers.size() == resource.data.structuredTeamMembers.size() && // Size of array must not change
                         request.resource.data.updatedAt == request.time
                         // Further validation of *which* item in structuredTeamMembers is hard in rules. Client logic is key.
                       ) ||
                       // Case 3: Admin updating status, phase, marks, mentor, or next phase details
                       ( isAdmin(request.auth.uid) &&
                         request.resource.data.userId == resource.data.userId && // Admin cannot change owner
                         request.resource.data.updatedAt == request.time &&
                         request.writeFields.hasAny([
                           'status', 'programPhase', 'phase2Marks', 'mentor', 'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                           'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                           'updatedAt'
                         ])
                       );

      allow delete: if isAdmin(request.auth.uid); // Only admins can delete ideas
    }

    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin(request.auth.uid) &&
                                     (request.method == 'create' ? 
                                       (request.resource.data.createdByUid == request.auth.uid &&
                                        isString(request.resource.data.title) && request.resource.data.title.size() > 0 &&
                                        isString(request.resource.data.content) && request.resource.data.content.size() > 0 &&
                                        isBoolean(request.resource.data.isUrgent) &&
                                        isString(request.resource.data.targetAudience) &&
                                        (request.resource.data.targetAudience == 'ALL' || request.resource.data.targetAudience == 'SPECIFIC_COHORT') &&
                                        (request.resource.data.targetAudience == 'ALL' ? !('cohortId' in request.resource.data) || request.resource.data.cohortId == null : isString(request.resource.data.cohortId)) &&
                                        request.resource.data.createdAt == request.time &&
                                        request.resource.data.updatedAt == request.time 
                                       ) : true 
                                     ) &&
                                     (request.method == 'update' ? 
                                       (request.resource.data.createdByUid == resource.data.createdByUid && // Cannot change creator
                                        request.resource.data.createdAt == resource.data.createdAt && // Cannot change creation time
                                        request.resource.data.updatedAt == request.time 
                                       ) : true
                                     );
    }
    
    match /systemSettings/config {
        allow read: if isAuthenticated(); // All authenticated users can read settings
        allow write: if isAdmin(request.auth.uid) && 
                       request.resource.data.updatedByUid == request.auth.uid &&
                       request.resource.data.updatedAt == request.time &&
                       isString(request.resource.data.portalName) && request.resource.data.portalName.size() > 0 &&
                       isBoolean(request.resource.data.maintenanceMode) &&
                       isBoolean(request.resource.data.allowNewRegistrations) &&
                       isNumber(request.resource.data.defaultCohortSize) && request.resource.data.defaultCohortSize > 0;
    }

    match /activityLogs/{logId} {
      allow read: if isAdmin(request.auth.uid);
      allow create: if isAuthenticated() && request.resource.data.actorUid == request.auth.uid &&
                       request.resource.data.timestamp == request.time;
      allow update, delete: if false; // Logs are immutable
    }

    // Placeholder for Cohorts if needed
    // match /cohorts/{cohortId} {
    //   allow read: if isAuthenticated();
    //   allow create, update, delete: if isAdmin();
    // }
  }
}
