rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function getRequestingUserRole() {
      return getUserData(request.auth.uid).role;
    }

    function isRequestingUserSuperAdmin() {
      return getUserData(request.auth.uid).isSuperAdmin == true;
    }

    function isRequestingUserAdmin() {
      return isSignedIn() && getRequestingUserRole() == 'ADMIN_FACULTY';
    }

    function getMentorEmails() {
      return [
        'prashant.khanna8747@paruluniversity.ac.in',
        'riddhi.bagha29080@paruluniversity.ac.in',
        'nikhil.jumade24167@paruluniversity.ac.in',
        'jay.sudani@paruluniversity.ac.in',
        'hardik.kharva2899@paruluniversity.ac.in',
        'sonal.sudani23321@paruluniversity.ac.in',
        'panchamkumar.baraiya28771@paruluniversity.ac.in',
        'juned.shaikh32161@paruluniversity.ac.in'
      ];
    }

    function isMentorEmail(email) {
      return email in getMentorEmails();
    }

    function commonProfileBaseValidations(data, existingData, isCreate) {
      let common =
        data.uid == request.auth.uid &&
        data.email == request.auth.token.email &&
        data.fullName is string && data.fullName.size() >= 3 &&
        data.contactNumber is string && data.contactNumber.size() >= 10;

      return isCreate
        ? common &&
          data.createdAt == request.time &&
          data.updatedAt == request.time
        : common &&
          data.email == existingData.email &&
          data.createdAt == existingData.createdAt &&
          data.updatedAt == request.time;
    }

    function isValidIdeaOwnerFields(data) {
      return (data.isTeamMemberOnly == false || data.isTeamMemberOnly == null) &&
             data.startupTitle is string && data.startupTitle.size() >= 5 &&
             data.problemDefinition is string && data.problemDefinition.size() >= 10 &&
             data.solutionDescription is string && data.solutionDescription.size() >= 10 &&
             data.uniqueness is string && data.uniqueness.size() >= 10 &&
             data.applicantCategory is string && data.applicantCategory.size() > 0 &&
             data.currentStage is string && data.currentStage.size() > 0 &&
             (data.teamMembers is string) &&
             data.associatedIdeaId == null &&
             data.associatedTeamLeaderUid == null;
    }

    function isValidTeamMemberFields(data) {
      return data.isTeamMemberOnly == true &&
             data.associatedIdeaId is string && data.associatedIdeaId.size() > 0 &&
             data.associatedTeamLeaderUid is string && data.associatedTeamLeaderUid.size() > 0 &&
             data.startupTitle == null &&
             data.problemDefinition == null &&
             data.solutionDescription == null &&
             data.uniqueness == null &&
             data.applicantCategory == null &&
             data.currentStage == null &&
             data.teamMembers == null;
    }

    function isSuperAdminPlaceholderFields(data) {
      return data.email == 'pranavrathi07@gmail.com' &&
             data.role == 'ADMIN_FACULTY' &&
             data.isSuperAdmin == true &&
             (data.isTeamMemberOnly == false || data.isTeamMemberOnly == null) &&
             data.startupTitle == 'Administrative Account' &&
             data.problemDefinition == 'Handles portal administration and/or mentorship.' &&
             data.solutionDescription == 'Provides administrative/mentorship functions and support.' &&
             data.uniqueness == 'Unique administrative/mentorship role for system management.' &&
             data.applicantCategory == 'PARUL_STAFF' &&
             data.currentStage == 'STARTUP_STAGE' &&
             data.associatedIdeaId == null &&
             data.associatedTeamLeaderUid == null;
    }

    function isMentorPlaceholderFields(data) {
      return isMentorEmail(data.email) && data.email != 'pranavrathi07@gmail.com' &&
             data.role == 'ADMIN_FACULTY' &&
             data.isSuperAdmin == false &&
             (data.isTeamMemberOnly == false || data.isTeamMemberOnly == null) &&
             data.startupTitle == 'Faculty/Mentor Account' &&
             data.problemDefinition == 'Handles portal administration and/or mentorship.' &&
             data.solutionDescription == 'Provides administrative/mentorship functions and support.' &&
             data.uniqueness == 'Unique administrative/mentorship role for system management.' &&
             data.applicantCategory == 'PARUL_STAFF' &&
             data.currentStage == 'STARTUP_STAGE' &&
             data.associatedIdeaId == null &&
             data.associatedTeamLeaderUid == null;
    }

    function creatorIsNotUsingAdminPlaceholderForIdea(creatorProfileData) {
      return !(creatorProfileData.role == 'ADMIN_FACULTY' &&
              (creatorProfileData.startupTitle == 'Administrative Account' ||
               creatorProfileData.startupTitle == 'Faculty/Mentor Account'));
    }

    function isValidIdeaSubmissionOnCreate(req, res) {
      let creatorProfile = getUserData(req.auth.uid);
      let creatorIsIdeaOwnerType = creatorProfile.isTeamMemberOnly == false || creatorProfile.isTeamMemberOnly == null;

      return creatorIsIdeaOwnerType &&
             creatorIsNotUsingAdminPlaceholderForIdea(creatorProfile) &&
             req.auth.uid == res.data.userId &&
             res.data.title is string && res.data.title.size() >= 5 &&
             res.data.problem is string && res.data.problem.size() >= 10 &&
             res.data.solution is string && res.data.solution.size() >= 10 &&
             res.data.uniqueness is string && res.data.uniqueness.size() >= 10 &&
             res.data.developmentStage is string && res.data.developmentStage.size() > 0 &&
             res.data.applicantType is string && res.data.applicantType.size() > 0 &&
             (res.data.teamMembers is string) &&
             (res.data.structuredTeamMembers is list && res.data.structuredTeamMembers.size() == 0) &&
             (res.data.teamMemberEmails is list && res.data.teamMemberEmails.size() == 0) &&
             res.data.status == 'SUBMITTED' &&
             res.data.programPhase == null &&
             (res.data.phase2Marks is map && res.data.phase2Marks.keys().size() == 0) &&
             res.data.submittedAt == request.time &&
             res.data.updatedAt == request.time &&
             res.data.applicantDisplayName == creatorProfile.fullName &&
             res.data.applicantEmail == creatorProfile.email &&
             (!('category' in res.data) || res.data.category == null) &&
             (!('fileURL' in res.data) || res.data.fileURL == null) &&
             (!('fileName' in res.data) || res.data.fileName == null) &&
             (!('studioLocation' in res.data) || res.data.studioLocation == null) &&
             (!('rejectionRemarks' in res.data) || res.data.rejectionRemarks == null) &&
             (!('rejectedByUid' in res.data) || res.data.rejectedByUid == null) &&
             (!('rejectedAt' in res.data) || res.data.rejectedAt == null) &&
             (!('phase2PptUrl' in res.data) || res.data.phase2PptUrl == null) &&
             (!('phase2PptFileName' in res.data) || res.data.phase2PptFileName == null) &&
             (!('phase2PptUploadedAt' in res.data) || res.data.phase2PptUploadedAt == null) &&
             (!('nextPhaseDate' in res.data) || res.data.nextPhaseDate == null) &&
             (!('nextPhaseStartTime' in res.data) || res.data.nextPhaseStartTime == null) &&
             (!('nextPhaseEndTime' in res.data) || res.data.nextPhaseEndTime == null) &&
             (!('nextPhaseVenue' in res.data) || res.data.nextPhaseVenue == null) &&
             (!('nextPhaseGuidelines' in res.data) || res.data.nextPhaseGuidelines == null) &&
             (!('mentor' in res.data) || res.data.mentor == null) &&
             (!('cohortId' in res.data) || res.data.cohortId == null);
    }

    match /users/{userId} {
      allow create: if isOwner(userId) && commonProfileBaseValidations(request.resource.data, null, true) && (
        ((request.resource.data.role == 'STUDENT' || request.resource.data.role == 'EXTERNAL_USER') && request.resource.data.isSuperAdmin == false && isValidIdeaOwnerFields(request.resource.data)) ||
        ((request.resource.data.role == 'STUDENT' || request.resource.data.role == 'EXTERNAL_USER') && request.resource.data.isSuperAdmin == false && isValidTeamMemberFields(request.resource.data)) ||
        (request.resource.data.email == 'pranavrathi07@gmail.com' && request.resource.data.role == 'ADMIN_FACULTY' && request.resource.data.isSuperAdmin == true && (isSuperAdminPlaceholderFields(request.resource.data) || isValidIdeaOwnerFields(request.resource.data))) ||
        (isMentorEmail(request.resource.data.email) && request.resource.data.email != 'pranavrathi07@gmail.com' && request.resource.data.role == 'ADMIN_FACULTY' && request.resource.data.isSuperAdmin == false && (isMentorPlaceholderFields(request.resource.data) || isValidIdeaOwnerFields(request.resource.data)))
      );

      allow read: if isSignedIn();

      allow update: if (
        isOwner(userId) &&
        commonProfileBaseValidations(request.resource.data, resource.data, false) &&
        request.resource.data.role == resource.data.role &&
        request.resource.data.isSuperAdmin == resource.data.isSuperAdmin &&
        request.resource.data.isTeamMemberOnly == resource.data.isTeamMemberOnly &&
        request.resource.data.associatedIdeaId == resource.data.associatedIdeaId &&
        request.resource.data.associatedTeamLeaderUid == resource.data.associatedTeamLeaderUid &&
        (
          ((resource.data.isTeamMemberOnly == false || resource.data.isTeamMemberOnly == null) && isValidIdeaOwnerFields(request.resource.data)) ||
          (resource.data.isTeamMemberOnly == true && isValidTeamMemberFields(request.resource.data)) ||
          (resource.data.email == 'pranavrathi07@gmail.com' && isSuperAdminPlaceholderFields(request.resource.data)) ||
          (isMentorEmail(resource.data.email) && resource.data.email != 'pranavrathi07@gmail.com' && isMentorPlaceholderFields(request.resource.data))
        )
      ) || (
        isRequestingUserAdmin() && request.auth.uid != userId &&
        commonProfileBaseValidations(request.resource.data, resource.data, false) &&
        request.resource.data.role == resource.data.role &&
        request.resource.data.isSuperAdmin == resource.data.isSuperAdmin &&
        request.resource.data.isTeamMemberOnly == resource.data.isTeamMemberOnly &&
        request.resource.data.associatedIdeaId == resource.data.associatedIdeaId &&
        request.resource.data.associatedTeamLeaderUid == resource.data.associatedTeamLeaderUid &&
        (
          (resource.data.isTeamMemberOnly == true && isValidTeamMemberFields(request.resource.data)) ||
          ((resource.data.isTeamMemberOnly == false || resource.data.isTeamMemberOnly == null) && isValidIdeaOwnerFields(request.resource.data)) ||
          (resource.data.email == 'pranavrathi07@gmail.com' && isSuperAdminPlaceholderFields(request.resource.data)) ||
          (isMentorEmail(resource.data.email) && resource.data.email != 'pranavrathi07@gmail.com' && isMentorPlaceholderFields(request.resource.data))
        ) &&
        request.writeFields.hasOnly(['fullName', 'contactNumber', 'enrollmentNumber', 'college', 'instituteName', 'applicantCategory', 'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness', 'currentStage', 'teamMembers', 'updatedAt'])
      ) || (
        isRequestingUserSuperAdmin() && request.auth.uid != userId && resource.data.email != 'pranavrathi07@gmail.com' &&
        request.resource.data.uid == resource.data.uid &&
        request.resource.data.email == resource.data.email &&
        request.resource.data.createdAt == resource.data.createdAt &&
        request.resource.data.updatedAt == request.time &&
        request.writeFields.hasAny(['role', 'isSuperAdmin', 'fullName', 'contactNumber', 'enrollmentNumber', 'college', 'instituteName', 'applicantCategory', 'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness', 'currentStage', 'teamMembers', 'updatedAt'])
      );

      allow delete: if (isRequestingUserSuperAdmin() && request.auth.uid != userId && resource.data.email != 'pranavrathi07@gmail.com') ||
        (request.auth.token.admin == true && request.auth.uid == userId);
    }

    match /ideas/{ideaId} {
      allow create, read, update, delete: if true; // Replace with your refined logic
    }

    match /announcements/{announcementId} {
      allow create, read, update, delete: if true; // Replace with your refined logic
    }

    match /systemSettings/config {
      allow create, read, update, delete: if true; // Replace with your refined logic
    }

    match /activityLogs/{logId} {
      allow create, read, update, delete: if true; // Replace with your refined logic
    }

    match /cohorts/{cohortId} {
      allow create, read, update, delete: if true; // Replace with your refined logic
    }
  }
}
