rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the currently authenticated user is the owner of the resource
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if the user has an 'ADMIN_FACULTY' role
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Helper function to check if the user is a Super Admin
    function isSuperAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isAuthenticated();

      allow create: if isUser(userId) &&
                      request.resource.data.uid == userId &&
                      (request.resource.data.email == request.auth.token.email || request.resource.data.email == "pranavrathi07@gmail.com") &&
                      (request.resource.data.role != 'ADMIN_FACULTY' || request.resource.data.email == "pranavrathi07@gmail.com") &&
                      (request.resource.data.isSuperAdmin == false || request.resource.data.email == "pranavrathi07@gmail.com");

      allow update: if (isAdmin() &&
                        (resource.data.email != "pranavrathi07@gmail.com" ||
                         (request.resource.data.role == 'ADMIN_FACULTY' && request.resource.data.isSuperAdmin == true)
                        )
                       ) ||
                     (isUser(userId) &&
                       !(request.resource.data.diff(resource.data).affectedKeys().hasAny([
                           'uid', 'email', 'role', 'isSuperAdmin', 'createdAt',
                           'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid'
                         ]))
                     );

      allow delete: if isAdmin() && resource.data.email != "pranavrathi07@gmail.com";
    }

    // Ideas Collection
    match /ideas/{ideaId} {
      allow read: if isAuthenticated() &&
                     (isUser(resource.data.userId) ||
                      (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails) ||
                      isAdmin()
                     );

      allow create: if isAuthenticated() && isUser(request.resource.data.userId) &&
                      request.resource.data.title != null && request.resource.data.title.size() > 0 &&
                      request.resource.data.problem != null && request.resource.data.problem.size() > 0 &&
                      request.resource.data.solution != null && request.resource.data.solution.size() > 0 &&
                      request.resource.data.uniqueness != null && request.resource.data.uniqueness.size() > 0 &&
                      request.resource.data.developmentStage != null &&
                      request.resource.data.status == 'SUBMITTED' &&
                      request.resource.data.programPhase == null &&
                      (request.resource.data.teamMemberEmails == null || request.resource.data.teamMemberEmails.size() >= 0) &&
                      (request.resource.data.structuredTeamMembers == null || request.resource.data.structuredTeamMembers.size() >= 0)
                      ;


      allow update: if isAuthenticated() &&
                     (
                       isAdmin() || // Admins can update
                       ( // Idea Owner can update their own idea (with restrictions)
                         isUser(resource.data.userId) &&
                         !(request.resource.data.diff(resource.data).affectedKeys().hasAny([
                            'status', 'programPhase', 'phase2Marks', 'mentor',
                            'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                            'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                            'userId', 'submittedAt' // Critical admin-controlled or immutable fields
                          ])) &&
                          // Ensure owner cannot change team member UIDs or emails directly if they exist, only other attributes or add/remove
                          (
                            !request.writeFields.hasAny(['structuredTeamMembers']) || // if not touching structuredTeamMembers, it's fine
                            (
                              let newMembers = request.resource.data.structuredTeamMembers;
                              let oldMembers = resource.data.structuredTeamMembers;
                              // Owner can add/remove or change non-auth fields of members.
                              // This simplified check assumes client sends valid member data for existing members if updated.
                              // A more granular check would iterate and compare specific fields if needed.
                              newMembers.size() >= 0 // Basic sanity check
                            )
                          )
                       ) ||
                       ( // Team member updating their own details in structuredTeamMembers
                         (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails) &&
                         request.writeFields.hasOnly(['structuredTeamMembers', 'updatedAt']) && // Only these top-level fields are allowed to be changed by a team member
                         // Ensure critical idea fields are not being changed at the top level by team member
                         request.resource.data.userId == resource.data.userId &&
                         request.resource.data.status == resource.data.status &&
                         request.resource.data.programPhase == resource.data.programPhase &&
                         // Validate changes within structuredTeamMembers:
                         (
                           let newMembers = request.resource.data.structuredTeamMembers;
                           let oldMembers = resource.data.structuredTeamMembers;
                           newMembers.size() == oldMembers.size() && // Team member cannot add/remove members
                           // Check each member:
                           // 1. If it's the current user's email, their ID must now be their UID. Their email must not change.
                           // 2. Other members' entries must remain identical.
                           newMembers.map(nm => {
                             let omList = oldMembers.filter(old_m => old_m.email == nm.email); // find old member by email
                             return (
                               (omList.size() == 1) && // Corresponding old member must exist and be unique by email
                               (
                                 let om = omList[0];
                                 (nm.email == request.auth.token.email && // This is the authenticated user's entry
                                  nm.id == request.auth.uid &&            // Their ID is now their UID (or was already their UID)
                                  nm.email == om.email                   // Their email must not change
                                  // Other fields (name, phone, etc.) are updated from their profile form.
                                  // We trust the client to send the correct updated details for their own entry.
                                 ) ||
                                 (nm.email != request.auth.token.email && nm == om) // Other members must be identical
                               )
                             );
                           }).hasOnly([true]) // All checks must pass for every member in the array
                         )
                       )
                     );

      allow delete: if isAuthenticated() && (isUser(resource.data.userId) || isAdmin());
    }

    // Announcements Collection
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated(); // Explicitly allow list for onSnapshot queries
      allow create, update, delete: if isAdmin();
    }

    // System Settings Document
    match /systemSettings/config {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Activity Logs Collection
    match /activityLogs/{logId} {
      allow read: if isAdmin(); // Only admins can read activity logs
      // Users can create their own activity log entries.
      // The 'actorUid' in the log entry must match the authenticated user's UID.
      allow create: if isAuthenticated() && request.resource.data.actorUid == request.auth.uid;
      allow update, delete: if false; // Logs are immutable
    }
  }
}
