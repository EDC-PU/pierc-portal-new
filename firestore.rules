rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    function isSuperAdmin() {
      return isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    function isIdeaOwner(ideaUserId) {
      return isUser(ideaUserId);
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isProfileOwner(userId) {
      return request.auth.uid == userId;
    }

    // Predefined Mentor Emails
    function MENTOR_EMAILS() {
      return [
        'prashant.khanna8747@paruluniversity.ac.in',
        'riddhi.bagha29080@paruluniversity.ac.in',
        'nikhil.jumade24167@paruluniversity.ac.in',
        'jay.sudani@paruluniversity.ac.in',
        'hardik.kharva2899@paruluniversity.ac.in',
        'sonal.sudani23321@paruluniversity.ac.in',
        'panchamkumar.baraiya28771@paruluniversity.ac.in',
        'juned.shaikh32161@paruluniversity.ac.in'
      ];
    }

    // --- User Profile Rules ---
    function isValidUserProfileOnCreate(data, request) {
      return data.uid == request.auth.uid
          && data.email == request.auth.token.email
          && (data.photoURL == request.auth.token.picture || data.photoURL == null)
          && (data.role == null || (data.role == 'ADMIN_FACULTY' && (data.email == 'pranavrathi07@gmail.com' || MENTOR_EMAILS().hasAny([data.email]))))
          && data.fullName == ''
          && data.contactNumber == ''
          && data.applicantCategory == null
          && data.currentStage == null
          && data.startupTitle == null
          && data.problemDefinition == null
          && data.solutionDescription == null
          && data.uniqueness == null
          && data.teamMembers == ''
          && data.enrollmentNumber == null
          && data.college == null
          && data.instituteName == null
          && data.createdAt == request.time
          && data.updatedAt == request.time
          && ((data.email == 'pranavrathi07@gmail.com' && data.isSuperAdmin == true) || data.isSuperAdmin == false)
          && data.isTeamMemberOnly == false
          && data.associatedIdeaId == null
          && data.associatedTeamLeaderUid == null;
    }

    function isValidUserProfileUpdate(newData, oldData, request) {
      return newData.uid == oldData.uid
          && newData.email == oldData.email
          && newData.createdAt.toMillis() == oldData.createdAt.toMillis()
          && newData.updatedAt == request.time
          && (newData.fullName is string && newData.fullName.size() > 0)
          && (newData.contactNumber is string && newData.contactNumber.size() > 0)
          && (newData.startupTitle is string || newData.startupTitle == null)
          && (newData.problemDefinition is string || newData.problemDefinition == null)
          && (newData.solutionDescription is string || newData.solutionDescription == null)
          && (newData.uniqueness is string || newData.uniqueness == null)
          && (newData.teamMembers is string || newData.teamMembers == null)
          && (newData.applicantCategory is string || newData.applicantCategory == null)
          && (newData.currentStage is string || newData.currentStage == null)
          && (newData.enrollmentNumber is string || newData.enrollmentNumber == null)
          && (newData.college is string || newData.college == null)
          && (newData.instituteName is string || newData.instituteName == null)
          && ((newData.role == oldData.role) || (isAdmin() && newData.role in ['STUDENT', 'EXTERNAL_USER', 'ADMIN_FACULTY']))
          && ((newData.isSuperAdmin == oldData.isSuperAdmin) || (isSuperAdmin() && newData.email != 'pranavrathi07@gmail.com'))
          && (newData.isTeamMemberOnly == oldData.isTeamMemberOnly)
          && (newData.associatedIdeaId == oldData.associatedIdeaId)
          && (newData.associatedTeamLeaderUid == oldData.associatedTeamLeaderUid);
    }

    function hasOnlyUserProfileFields() {
      return request.resource.data.keys().hasOnly([
        'uid', 'email', 'displayName', 'photoURL', 'role', 'fullName', 'contactNumber',
        'applicantCategory', 'currentStage', 'startupTitle', 'problemDefinition',
        'solutionDescription', 'uniqueness', 'teamMembers',
        'enrollmentNumber', 'college', 'instituteName',
        'createdAt', 'updatedAt', 'isSuperAdmin',
        'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid'
      ]);
    }

    // --- Idea Submission Rules ---
    function isValidInitialTimestamps(data, request) {
      return data.submittedAt == request.time && data.updatedAt == request.time;
    }

    function isValidResubmitTimestamps(newData, oldData, request) {
      return newData.submittedAt == oldData.submittedAt && newData.updatedAt == request.time;
    }

    function isValidInitialOrResubmittedIdeaState(data, request, oldData) {
      return data.status == 'SUBMITTED'
          && data.programPhase == null
          && data.cohortId == null
          && data.phase2Marks.size() == 0
          && data.mentor == null
          && data.isOutlineAIGenerated == false
          && data.rejectionRemarks == null
          && data.rejectedByUid == null
          && data.rejectedAt == null
          && data.phase2PptUrl == null
          && data.phase2PptFileName == null
          && data.phase2PptUploadedAt == null
          && data.nextPhaseDate == null
          && data.nextPhaseStartTime == null
          && data.nextPhaseEndTime == null
          && data.nextPhaseVenue == null
          && data.nextPhaseGuidelines == null
          && data.structuredTeamMembers.size() == 0
          && data.teamMemberEmails.size() == 0
          && data.totalFundingAllocated == null
          && data.sanction1Amount == null
          && data.sanction2Amount == null
          && data.sanction1DisbursedAt == null
          && data.sanction2DisbursedAt == null
          && data.sanction1Expenses.size() == 0
          && data.sanction2Expenses.size() == 0
          && data.beneficiaryName == null
          && data.beneficiaryAccountNo == null
          && data.beneficiaryBankName == null
          && data.beneficiaryIfscCode == null
          && data.sanction1AppliedForNext == false
          && data.sanction1UtilizationStatus == 'NOT_APPLICABLE'
          && data.sanction1UtilizationRemarks == null
          && data.sanction1UtilizationReviewedBy == null
          && data.sanction1UtilizationReviewedAt == null
          && data.sanction2UtilizationStatus == 'NOT_APPLICABLE'
          && data.sanction2UtilizationRemarks == null
          && data.sanction2UtilizationReviewedBy == null
          && data.sanction2UtilizationReviewedAt == null
          && ((oldData == null && isValidInitialTimestamps(data, request)) || (oldData != null && isValidResubmitTimestamps(data, oldData, request)));
    }

    function isValidIdeaSubmissionOnCreateOrResubmit(data, request) {
      return data.userId == request.auth.uid
          && data.title is string && data.title.size() > 0
          && data.problem is string && data.problem.size() > 0
          && data.solution is string && data.solution.size() > 0
          && data.uniqueness is string && data.uniqueness.size() > 0
          && data.developmentStage is string
          && data.applicantType is string
          && (data.teamMembers is string || data.teamMembers == null)
          && (data.fileURL is string || data.fileURL == null)
          && (data.fileName is string || data.fileName == null)
          && (data.studioLocation is string || data.studioLocation == null);
    }

    function isIdeaUpdateSafe(newData, oldData, request) {
      return newData.userId == oldData.userId
          && newData.applicantDisplayName == oldData.applicantDisplayName
          && newData.applicantEmail == oldData.applicantEmail
          && (newData.title == oldData.title || (newData.title is string && newData.title.size() > 0))
          && (newData.problem == oldData.problem || (newData.problem is string && newData.problem.size() > 0))
          && (newData.solution == oldData.solution || (newData.solution is string && newData.solution.size() > 0))
          && (newData.uniqueness == oldData.uniqueness || (newData.uniqueness is string && newData.uniqueness.size() > 0))
          && (newData.developmentStage == oldData.developmentStage || newData.developmentStage is string)
          && (newData.applicantType == oldData.applicantType || newData.applicantType is string)
          && (newData.teamMembers == oldData.teamMembers || newData.teamMembers is string || newData.teamMembers == null)
          && newData.submittedAt.toMillis() == oldData.submittedAt.toMillis()
          && newData.updatedAt == request.time
          && ((newData.status == oldData.status) || (isAdmin() && newData.status in ['SUBMITTED', 'UNDER_REVIEW', 'IN_EVALUATION', 'SELECTED', 'NOT_SELECTED', 'ARCHIVED_BY_ADMIN']) || (newData.status == 'SUBMITTED' && oldData.status == 'ARCHIVED_BY_ADMIN' && isValidInitialOrResubmittedIdeaState(newData, request, oldData) && isValidIdeaSubmissionOnCreateOrResubmit(newData, request)))
          && ((newData.programPhase == oldData.programPhase) || isAdmin())
          && (!(newData.status == 'ARCHIVED_BY_ADMIN' && oldData.status != 'ARCHIVED_BY_ADMIN') || (newData.programPhase == null && newData.phase2Marks.size() == 0 && newData.mentor == null && newData.cohortId == null && newData.isOutlineAIGenerated == false && newData.rejectionRemarks == null && newData.rejectedByUid == null && newData.rejectedAt == null && newData.nextPhaseDate == null && newData.nextPhaseStartTime == null && newData.nextPhaseEndTime == null && newData.nextPhaseVenue == null && newData.nextPhaseGuidelines == null && newData.totalFundingAllocated == null && newData.sanction1Amount == null && newData.sanction2Amount == null && newData.sanction1DisbursedAt == null && newData.sanction2DisbursedAt == null && newData.sanction1Expenses.size() == 0 && newData.sanction2Expenses.size() == 0 && newData.beneficiaryName == null && newData.beneficiaryAccountNo == null && newData.beneficiaryBankName == null && newData.beneficiaryIfscCode == null && newData.sanction1AppliedForNext == false && newData.sanction1UtilizationStatus == 'NOT_APPLICABLE' && newData.sanction2UtilizationStatus == 'NOT_APPLICABLE'));
    }

    function hasOnlyIdeaFields() {
      return request.resource.data.keys().hasOnly([
        'userId', 'title', 'problem', 'solution', 'uniqueness', 'developmentStage', 'applicantType',
        'teamMembers', 'structuredTeamMembers', 'teamMemberEmails', 'fileURL', 'fileName', 'studioLocation', 'status',
        'programPhase', 'phase2Marks', 'mentor', 'cohortId', 'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
        'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', 'isOutlineAIGenerated',
        'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
        'submittedAt', 'updatedAt', 'applicantDisplayName', 'applicantEmail',
        'updatedByMentorAssignerUid',
        'totalFundingAllocated', 'sanction1Amount', 'sanction2Amount',
        'sanction1DisbursedAt', 'sanction2DisbursedAt',
        'sanction1Expenses', 'sanction2Expenses',
        'beneficiaryName', 'beneficiaryAccountNo', 'beneficiaryBankName', 'beneficiaryIfscCode',
        'sanction1AppliedForNext',
        'sanction1UtilizationStatus', 'sanction1UtilizationRemarks', 'sanction1UtilizationReviewedBy', 'sanction1UtilizationReviewedAt',
        'sanction2UtilizationStatus', 'sanction2UtilizationRemarks', 'sanction2UtilizationReviewedBy', 'sanction2UtilizationReviewedAt'
      ]);
    }

    // --- Cohort Rules ---
    function isValidCohortData(data, request) {
      return data.name is string && data.name.size() > 0
          && data.startDate is timestamp
          && data.endDate is timestamp && data.endDate > data.startDate
          && data.batchSize is number && data.batchSize > 0
          && data.createdByUid == request.auth.uid
          && data.creatorDisplayName is string
          && (data.ideaIds is list || data.ideaIds == null)
          && (data.schedule is list || data.schedule == null);
    }

    function hasOnlyCohortFields() {
      return request.resource.data.keys().hasOnly([
        'name', 'startDate', 'endDate', 'batchSize', 'ideaIds', 'schedule',
        'createdAt', 'createdByUid', 'creatorDisplayName', 'updatedAt'
      ]);
    }

    // --- Announcement Rules ---
    function isValidAnnouncementData(data) {
      return data.title is string && data.title.size() > 0
          && data.content is string && data.content.size() > 0
          && data.isUrgent is bool
          && data.targetAudience is string && (data.targetAudience == 'ALL' || data.targetAudience == 'SPECIFIC_COHORT')
          && data.createdByUid == request.auth.uid
          && data.creatorDisplayName is string
          && (!(data.targetAudience == 'SPECIFIC_COHORT') || (data.cohortId is string && data.cohortId.size() > 0));
    }

    function hasOnlyAnnouncementFields() {
      return request.resource.data.keys().hasOnly([
        'title', 'content', 'isUrgent', 'targetAudience', 'cohortId',
        'attachmentURL', 'attachmentName',
        'createdByUid', 'creatorDisplayName', 'createdAt', 'updatedAt'
      ]);
    }

    // --- System Settings Rules ---
    function isValidSystemSettingsData(data) {
      return data.portalName is string && data.portalName.size() > 0
          && data.maintenanceMode is bool
          && data.allowNewRegistrations is bool
          && data.defaultCohortSize is number && data.defaultCohortSize > 0
          && data.updatedByUid == request.auth.uid;
    }

    function hasOnlySystemSettingsFields() {
      return request.resource.data.keys().hasOnly([
        'portalName', 'maintenanceMode', 'allowNewRegistrations', 'defaultCohortSize',
        'updatedAt', 'updatedByUid'
      ]);
    }

    // --- Activity Log Rules ---
    function isValidActivityLogData(data, request) {
      return data.timestamp == request.time
          && data.actorUid is string
          && data.actorDisplayName is string
          && data.action is string
          && (data.target == null || (
              data.target is map &&
              data.target.type is string && data.target.type.size() > 0 &&
              data.target.id is string && data.target.id.size() > 0 &&
              (data.target.displayName == null || data.target.displayName is string)
            ))
          && (data.details == null || data.details is map);
    }

    function hasOnlyActivityLogFields() {
      return request.resource.data.keys().hasOnly(['timestamp', 'actorUid', 'actorDisplayName', 'action', 'target', 'details']);
    }

    // --- Path Definitions & Permissions ---

    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId
                    && isValidUserProfileOnCreate(request.resource.data, request)
                    && hasOnlyUserProfileFields();
      allow update: if isSignedIn() &&
                      (
                        (isProfileOwner(userId) && isValidUserProfileUpdate(request.resource.data, resource.data, request)) ||
                        (isSuperAdmin() && request.auth.uid != userId)
                      ) && hasOnlyUserProfileFields();
      allow delete: if isSuperAdmin() && request.auth.uid != userId;
    }

    match /ideas/{ideaId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && isIdeaOwner(request.resource.data.userId)
                    && isValidIdeaSubmissionOnCreateOrResubmit(request.resource.data, request)
                    && isValidInitialOrResubmittedIdeaState(request.resource.data, request, null)
                    && hasOnlyIdeaFields();
      allow update: if isSignedIn() &&
                      (
                        (isIdeaOwner(resource.data.userId)) ||
                        isAdmin()
                      )
                      && isIdeaUpdateSafe(request.resource.data, resource.data, request)
                      && hasOnlyIdeaFields();
      allow delete: if false;
    }

    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create: if isAdmin()
                    && isValidAnnouncementData(request.resource.data)
                    && hasOnlyAnnouncementFields()
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.updatedAt == request.time;
      allow update: if isAdmin()
                    && isValidAnnouncementData(request.resource.data)
                    && hasOnlyAnnouncementFields()
                    && request.resource.data.createdAt.toMillis() == resource.data.createdAt.toMillis()
                    && request.resource.data.updatedAt == request.time;
      allow delete: if isAdmin();
    }

    match /cohorts/{cohortId} {
      allow read: if isSignedIn();
      allow create: if isSuperAdmin()
                    && isValidCohortData(request.resource.data, request)
                    && hasOnlyCohortFields()
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.updatedAt == request.time;
      allow update: if isSuperAdmin()
                    && isValidCohortData(request.resource.data, request)
                    && hasOnlyCohortFields()
                    && request.resource.data.createdAt.toMillis() == resource.data.createdAt.toMillis()
                    && request.resource.data.updatedAt == request.time;
      allow delete: if isSuperAdmin() && resource.data.ideaIds.size() == 0;
    }

    match /systemSettings/config {
      allow read: if isSignedIn();
      allow create, update: if isSuperAdmin()
                            && isValidSystemSettingsData(request.resource.data)
                            && hasOnlySystemSettingsFields()
                            && request.resource.data.updatedAt == request.time;
      allow delete: if false;
    }

    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isSignedIn()
                      && isValidActivityLogData(request.resource.data, request)
                      && hasOnlyActivityLogFields();
      allow update, delete: if false;
    }
  }
}
