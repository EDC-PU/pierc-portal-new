
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }
    
    function isSuperAdmin() {
      return isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    function isValidRole(role) {
      return role == 'STUDENT' || role == 'EXTERNAL_USER' || role == 'ADMIN_FACULTY';
    }

    function isValidApplicantCategory(category) {
      return category == 'PARUL_STUDENT' || category == 'PARUL_STAFF' || category == 'PARUL_ALUMNI' || category == 'OTHERS';
    }

    function isValidCurrentStage(stage) {
      return stage == 'IDEA' || stage == 'PROTOTYPE_STAGE' || stage == 'STARTUP_STAGE';
    }
    
    function isValidIdeaStatus(status) {
      return status == 'SUBMITTED' || status == 'UNDER_REVIEW' || status == 'IN_EVALUATION' || status == 'SELECTED' || status == 'NOT_SELECTED' || status == 'ARCHIVED_BY_ADMIN';
    }

    function isValidProgramPhase(phase) {
      return phase == 'PHASE_1' || phase == 'PHASE_2' || phase == 'COHORT';
    }
    
    function isValidTeamMember(member) {
      return member.keys().hasAll(['id', 'name', 'email', 'phone', 'institute', 'department'])
             && member.id is string && member.id.size() > 0
             && member.name is string && member.name.size() > 0
             && member.email is string && member.email.matches('.+@.+\\..+')
             && member.phone is string && member.phone.size() >= 10 && member.phone.size() <= 15
             && member.institute is string && member.institute.size() > 0
             && member.department is string && member.department.size() > 0
             && (member.keys().hasOnly(['id', 'name', 'email', 'phone', 'institute', 'department', 'enrollmentNumber']))
             && (member.enrollmentNumber == null || (member.enrollmentNumber is string && member.enrollmentNumber.size() <= 50));
    }

    function isValidUserProfileOnCreate(userId, data) {
      return data.uid == userId
             && data.email is string && (data.email == request.auth.token.email || data.email == null) // Allow null if not provided by auth
             && (data.displayName == null || data.displayName is string)
             && (data.photoURL == null || data.photoURL is string)
             && isValidRole(data.role)
             && data.isSuperAdmin == (request.auth.token.email == 'pranavrathi07@gmail.com') // Only this email can be super admin on create
             && data.fullName is string && data.fullName.size() > 0
             && data.contactNumber is string && data.contactNumber.size() >= 10 && data.contactNumber.size() <= 15
             && data.isTeamMemberOnly is bool
             && data.createdAt == request.time && data.updatedAt == request.time
             // Conditional idea fields
             && (
                  (data.isTeamMemberOnly == true && 
                   data.startupTitle == null && data.problemDefinition == null && data.solutionDescription == null && data.uniqueness == null &&
                   data.applicantCategory == null && data.currentStage == null && data.teamMembers == null &&
                   (data.associatedIdeaId is string || data.associatedIdeaId == null) && (data.associatedTeamLeaderUid is string || data.associatedTeamLeaderUid == null)
                  ) ||
                  (data.isTeamMemberOnly == false && data.role != 'ADMIN_FACULTY' &&
                   isValidApplicantCategory(data.applicantCategory) &&
                   isValidCurrentStage(data.currentStage) &&
                   data.startupTitle is string && data.startupTitle.size() >= 5 && data.startupTitle.size() <= 200 &&
                   data.problemDefinition is string && data.problemDefinition.size() >= 10 && data.problemDefinition.size() <= 2000 &&
                   data.solutionDescription is string && data.solutionDescription.size() >= 10 && data.solutionDescription.size() <= 2000 &&
                   data.uniqueness is string && data.uniqueness.size() >= 10 && data.uniqueness.size() <= 2000 &&
                   (data.teamMembers is string && data.teamMembers.size() <= 500) && // Can be empty string
                   data.associatedIdeaId == null && data.associatedTeamLeaderUid == null
                  ) ||
                  (data.isTeamMemberOnly == false && data.role == 'ADMIN_FACULTY' && // Admin/Mentor account placeholders
                   data.startupTitle is string && data.startupTitle.size() > 0 &&
                   data.problemDefinition is string && data.problemDefinition.size() > 0 &&
                   data.solutionDescription is string && data.solutionDescription.size() > 0 &&
                   data.uniqueness is string && data.uniqueness.size() > 0 &&
                   isValidApplicantCategory(data.applicantCategory) &&
                   isValidCurrentStage(data.currentStage) &&
                   data.associatedIdeaId == null && data.associatedTeamLeaderUid == null
                  )
                )
             // Conditional academic fields
             && (data.enrollmentNumber == null || (data.enrollmentNumber is string && data.enrollmentNumber.size() <= 50))
             && (data.college == null || (data.college is string && data.college.size() <= 100))
             && (data.instituteName == null || (data.instituteName is string && data.instituteName.size() <= 100));
    }

    function isValidUserProfileOnUpdate(userId, data, existingData) {
      return data.uid == userId // UID cannot change
             && data.email == existingData.email // Email cannot change
             && (data.displayName == null || data.displayName is string)
             && (data.photoURL == null || data.photoURL is string)
             && data.role == existingData.role // Role changes are handled by admin-specific function
             && data.isSuperAdmin == existingData.isSuperAdmin // Super admin status change by admin-specific function
             && data.fullName is string && data.fullName.size() > 0
             && data.contactNumber is string && data.contactNumber.size() >= 10 && data.contactNumber.size() <= 15
             && data.isTeamMemberOnly == existingData.isTeamMemberOnly // Cannot change this flag after creation
             && data.createdAt == existingData.createdAt // Cannot change createdAt
             && data.updatedAt == request.time
             // Conditional idea fields for non-team members
             && (
                  (data.isTeamMemberOnly == true && 
                   data.startupTitle == null && data.problemDefinition == null && data.solutionDescription == null && data.uniqueness == null &&
                   data.applicantCategory == null && data.currentStage == null && data.teamMembers == null &&
                   data.associatedIdeaId == existingData.associatedIdeaId && data.associatedTeamLeaderUid == existingData.associatedTeamLeaderUid
                  ) ||
                  (data.isTeamMemberOnly == false && data.role != 'ADMIN_FACULTY' &&
                   isValidApplicantCategory(data.applicantCategory) &&
                   isValidCurrentStage(data.currentStage) &&
                   data.startupTitle is string && data.startupTitle.size() >= 5 && data.startupTitle.size() <= 200 &&
                   data.problemDefinition is string && data.problemDefinition.size() >= 10 && data.problemDefinition.size() <= 2000 &&
                   data.solutionDescription is string && data.solutionDescription.size() >= 10 && data.solutionDescription.size() <= 2000 &&
                   data.uniqueness is string && data.uniqueness.size() >= 10 && data.uniqueness.size() <= 2000 &&
                   (data.teamMembers is string && data.teamMembers.size() <= 500) &&
                   data.associatedIdeaId == null && data.associatedTeamLeaderUid == null
                  ) ||
                  (data.isTeamMemberOnly == false && data.role == 'ADMIN_FACULTY' &&
                   data.startupTitle is string && data.startupTitle.size() > 0 &&
                   data.problemDefinition is string && data.problemDefinition.size() > 0 &&
                   data.solutionDescription is string && data.solutionDescription.size() > 0 &&
                   data.uniqueness is string && data.uniqueness.size() > 0 &&
                   isValidApplicantCategory(data.applicantCategory) &&
                   isValidCurrentStage(data.currentStage) &&
                   data.associatedIdeaId == null && data.associatedTeamLeaderUid == null
                  )
                )
             // Conditional academic fields
             && (data.enrollmentNumber == null || (data.enrollmentNumber is string && data.enrollmentNumber.size() <= 50))
             && (data.college == null || (data.college is string && data.college.size() <= 100))
             && (data.instituteName == null || (data.instituteName is string && data.instituteName.size() <= 100));
    }
    
    function isValidIdeaSubmissionOnCreateOrResubmit(data, userProfile) {
        return data.userId == userProfile.uid
            && data.applicantDisplayName == (userProfile.displayName == null ? userProfile.fullName : userProfile.displayName)
            && data.applicantEmail == userProfile.email
            && data.title is string && data.title.size() >= 5 && data.title.size() <= 200
            && data.category is string && isValidApplicantCategory(data.category) // Ensure 'category' is same as 'applicantType' from profile
            && data.problem is string && data.problem.size() >= 10 && data.problem.size() <= 2000
            && data.solution is string && data.solution.size() >= 10 && data.solution.size() <= 2000
            && data.uniqueness is string && data.uniqueness.size() >= 10 && data.uniqueness.size() <= 2000
            && data.developmentStage is string && isValidCurrentStage(data.developmentStage)
            && data.applicantType is string && isValidApplicantCategory(data.applicantType)
            && (data.teamMembers is string && data.teamMembers.size() <= 500) // teamMembers from profile (text)
            && (data.structuredTeamMembers is list && data.structuredTeamMembers.size() <= 4 && data.structuredTeamMembers.all(member, isValidTeamMember(member)))
            && (data.teamMemberEmails is list && data.teamMemberEmails.size() <= 4 && data.teamMemberEmails.all(email, email is string && email.matches('.+@.+\\..+')))
            && (data.fileURL == null || (data.fileURL is string && data.fileURL.matches('https?://.+')))
            && (data.fileName == null || (data.fileName is string && data.fileName.size() > 0))
            && (data.studioLocation == null || (data.studioLocation is string && (data.studioLocation == 'SURAT' || data.studioLocation == 'RAJKOT' || data.studioLocation == 'BARODA' || data.studioLocation == 'AHMEDABAD')))
            && data.status == 'SUBMITTED' // On create or resubmit, status must be SUBMITTED
            && data.programPhase == null // On create or resubmit, programPhase is null
            && data.phase2Marks.keys().size() == 0 // On create or resubmit, marks are empty
            && data.mentor == null
            && data.cohortId == null
            && data.rejectionRemarks == null
            && data.rejectedByUid == null
            && data.rejectedAt == null
            && data.phase2PptUrl == null
            && data.phase2PptFileName == null
            && data.phase2PptUploadedAt == null
            && data.nextPhaseDate == null
            && data.nextPhaseStartTime == null
            && data.nextPhaseEndTime == null
            && data.nextPhaseVenue == null
            && data.nextPhaseGuidelines == null
            && data.submittedAt == request.time && data.updatedAt == request.time;
    }


    // Rules for User Profiles
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) // userId here is from the path
                      && isValidUserProfileOnCreate(userId, request.resource.data) // Pass request.auth.uid for consistency if preferred
                      && request.resource.data.keys().hasOnly([
                           'uid', 'email', 'displayName', 'photoURL', 'role', 'isSuperAdmin', 'fullName', 'contactNumber',
                           'applicantCategory', 'currentStage', 'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness',
                           'teamMembers', 'enrollmentNumber', 'college', 'instituteName',
                           'createdAt', 'updatedAt', 'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid'
                         ]);
      allow update: if isOwner(userId)
                      && isValidUserProfileOnUpdate(userId, request.resource.data, resource.data)
                      && request.resource.data.keys().hasOnly([ // Ensure no extra fields in update
                           'uid', 'email', 'displayName', 'photoURL', 'role', 'isSuperAdmin', 'fullName', 'contactNumber',
                           'applicantCategory', 'currentStage', 'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness',
                           'teamMembers', 'enrollmentNumber', 'college', 'instituteName',
                           'createdAt', 'updatedAt', 'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid'
                         ]);
      allow update (updateRoleAndPermissions): if isAdmin() // Admin specific update for role/superadmin
                                             && request.resource.data.keys().hasOnly(['role', 'isSuperAdmin', 'updatedAt'])
                                             && isValidRole(request.resource.data.role)
                                             && request.resource.data.isSuperAdmin is bool
                                             && request.resource.data.updatedAt == request.time
                                             && (request.auth.uid != userId || request.resource.data.email != 'pranavrathi07@gmail.com' || (request.resource.data.isSuperAdmin == true && request.resource.data.role == 'ADMIN_FACULTY' ) ) // Super admin can't demote primary
                                             && (isSuperAdmin() || (!request.resource.data.isSuperAdmin && !resource.data.isSuperAdmin)); // Only SuperAdmin can change super admin status
      allow delete: if isOwner(userId) && request.auth.token.email != 'pranavrathi07@gmail.com'; // User can delete own, except primary SA
      allow delete (adminDelete): if isAdmin() && resource.data.email != 'pranavrathi07@gmail.com'; // Admin can delete others, except primary SA
    }

    // Rules for Idea Submissions
    match /ideas/{ideaId} {
      allow read: if isSignedIn(); // Or more specific: isOwner(resource.data.userId) || isAdmin() || isTeamMember(resource.data.teamMemberEmails)

      allow create: if isSignedIn()
                      && request.resource.data.userId == request.auth.uid
                      && isValidIdeaSubmissionOnCreateOrResubmit(request.resource.data, get(/databases/$(database)/documents/users/$(request.auth.uid)).data)
                      && request.resource.data.keys().hasOnly([
                            'userId', 'applicantDisplayName', 'applicantEmail', 'title', 'category', 'problem', 'solution', 'uniqueness',
                            'developmentStage', 'applicantType', 'teamMembers', 'structuredTeamMembers', 'teamMemberEmails',
                            'fileURL', 'fileName', 'studioLocation', // These are optional on create from profile, but user can add them if they call createIdeaSubmission directly
                            'status', 'programPhase', 'phase2Marks', 'mentor', 'cohortId',
                            'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                            'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt',
                            'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                            'submittedAt', 'updatedAt'
                         ]);
                         
      // User updates their own idea submission (e.g., if it was archived and they are resubmitting via profile save)
      allow update (userOwnIdeaUpdate): if isSignedIn()
                        && request.auth.uid == resource.data.userId // User is the owner
                        && request.resource.data.userId == resource.data.userId // Cannot change owner
                        && request.resource.data.applicantDisplayName == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.displayName
                        && request.resource.data.applicantEmail == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email
                        && request.resource.data.title is string && request.resource.data.title.size() >= 5 && request.resource.data.title.size() <= 200
                        && request.resource.data.category is string && isValidApplicantCategory(request.resource.data.category)
                        && request.resource.data.problem is string && request.resource.data.problem.size() >= 10 && request.resource.data.problem.size() <= 2000
                        && request.resource.data.solution is string && request.resource.data.solution.size() >= 10 && request.resource.data.solution.size() <= 2000
                        && request.resource.data.uniqueness is string && request.resource.data.uniqueness.size() >= 10 && request.resource.data.uniqueness.size() <= 2000
                        && request.resource.data.developmentStage is string && isValidCurrentStage(request.resource.data.developmentStage)
                        && request.resource.data.applicantType is string && isValidApplicantCategory(request.resource.data.applicantType)
                        && (request.resource.data.teamMembers is string && request.resource.data.teamMembers.size() <= 500)
                        // For resubmission of an archived idea
                        && (resource.data.status == 'ARCHIVED_BY_ADMIN' &&
                            request.resource.data.status == 'SUBMITTED' &&
                            request.resource.data.programPhase == null &&
                            request.resource.data.phase2Marks.keys().size() == 0 &&
                            request.resource.data.mentor == null &&
                            request.resource.data.cohortId == null &&
                            request.resource.data.rejectionRemarks == null && request.resource.data.rejectedByUid == null && request.resource.data.rejectedAt == null &&
                            request.resource.data.phase2PptUrl == null && request.resource.data.phase2PptFileName == null && request.resource.data.phase2PptUploadedAt == null &&
                            request.resource.data.nextPhaseDate == null && request.resource.data.nextPhaseStartTime == null && request.resource.data.nextPhaseEndTime == null && request.resource.data.nextPhaseVenue == null && request.resource.data.nextPhaseGuidelines == null &&
                            (request.resource.data.structuredTeamMembers is list && request.resource.data.structuredTeamMembers.size() <= 4 && request.resource.data.structuredTeamMembers.all(member, isValidTeamMember(member))) &&
                            (request.resource.data.teamMemberEmails is list && request.resource.data.teamMemberEmails.size() <= 4 && request.resource.data.teamMemberEmails.all(email, email is string && email.matches('.+@.+\\..+')))
                           )
                        && request.resource.data.updatedAt == request.time
                        && request.resource.data.submittedAt == resource.data.submittedAt // Original submission date unchanged
                        && request.resource.data.keys().hasOnly([ // Allowed fields for user update (primarily resubmission)
                            'userId', 'applicantDisplayName', 'applicantEmail', 'title', 'category', 'problem', 'solution', 'uniqueness',
                            'developmentStage', 'applicantType', 'teamMembers', 'structuredTeamMembers', 'teamMemberEmails',
                            'status', 'programPhase', 'phase2Marks', 'mentor', 'cohortId',
                            'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                            'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt',
                            'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                            'submittedAt', 'updatedAt'
                            // User cannot directly update fileURL, fileName, studioLocation from profile update
                        ]);

      // User uploads Phase 2 PPT
      allow update (userPhase2PptUpload): if isSignedIn()
                        && request.auth.uid == resource.data.userId
                        && request.resource.data.phase2PptUrl is string && request.resource.data.phase2PptUrl.matches('https?://.+')
                        && request.resource.data.phase2PptFileName is string && request.resource.data.phase2PptFileName.size() > 0
                        && request.resource.data.phase2PptUploadedAt == request.time
                        && request.resource.data.updatedAt == request.time
                        && request.writeFields.hasAll(['phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', 'updatedAt'])
                        && request.writeFields.size() == 4; // Only these fields can be updated
                        
      // User managing their team members (add, update, remove)
      allow update (userTeamManagement): if isSignedIn()
                        && request.auth.uid == resource.data.userId // Owner of the idea
                        && (request.resource.data.structuredTeamMembers is list && request.resource.data.structuredTeamMembers.size() <= 4 && request.resource.data.structuredTeamMembers.all(member, isValidTeamMember(member)))
                        && (request.resource.data.teamMemberEmails is list && request.resource.data.teamMemberEmails.size() <= 4 && request.resource.data.teamMemberEmails.all(email, email is string && email.matches('.+@.+\\..+')))
                        && request.resource.data.updatedAt == request.time
                        && request.writeFields.hasAny(['structuredTeamMembers', 'teamMemberEmails']) // Must be updating one of these
                        && request.writeFields.hasOnly(['structuredTeamMembers', 'teamMemberEmails', 'updatedAt']);


      // Admin updates idea (status, phase, marks, mentor, cohort, remarks, next phase details)
      allow update (adminIdeaManagement): if isAdmin()
                        && request.resource.data.userId == resource.data.userId // Cannot change owner
                        && request.resource.data.updatedAt == request.time
                        && isValidIdeaStatus(request.resource.data.status)
                        && (request.resource.data.programPhase == null || isValidProgramPhase(request.resource.data.programPhase))
                        && (request.resource.data.cohortId == null || request.resource.data.cohortId is string)
                        && (request.resource.data.rejectionRemarks == null || (request.resource.data.rejectionRemarks is string && request.resource.data.rejectionRemarks.size() <= 2000))
                        && (request.resource.data.rejectedByUid == null || request.resource.data.rejectedByUid is string)
                        && (request.resource.data.rejectedAt == null || request.resource.data.rejectedAt is timestamp)
                        && (request.resource.data.nextPhaseDate == null || request.resource.data.nextPhaseDate is timestamp)
                        && (request.resource.data.nextPhaseStartTime == null || request.resource.data.nextPhaseStartTime is string)
                        && (request.resource.data.nextPhaseEndTime == null || request.resource.data.nextPhaseEndTime is string)
                        && (request.resource.data.nextPhaseVenue == null || request.resource.data.nextPhaseVenue is string)
                        && (request.resource.data.nextPhaseGuidelines == null || request.resource.data.nextPhaseGuidelines is string)
                        && (request.resource.data.mentor == null || request.resource.data.mentor is string) // Add mentor check
                        && (request.resource.data.phase2Marks is map && request.resource.data.phase2Marks.keys().size() <= 10) // Example: Limit number of admins marking
                        && request.writeFields.hasOnly([ // What admin can change
                            'status', 'programPhase', 'phase2Marks', 'mentor', 'cohortId',
                            'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                            'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                            'updatedAt', 'updatedByMentorAssignerUid' // updatedByMentorAssignerUid for mentor assignment log
                           ]);
      
      // No direct delete for ideas from client, only status change to ARCHIVED_BY_ADMIN
      allow delete: if false;
    }

    // Rules for Announcements
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create: if isAdmin()
                      && request.resource.data.title is string && request.resource.data.title.size() >= 5 && request.resource.data.title.size() <= 100
                      && request.resource.data.content is string && request.resource.data.content.size() >= 10 && request.resource.data.content.size() <= 5000
                      && request.resource.data.isUrgent is bool
                      && request.resource.data.targetAudience is string && (request.resource.data.targetAudience == 'ALL' || request.resource.data.targetAudience == 'SPECIFIC_COHORT')
                      && (request.resource.data.targetAudience == 'ALL' || (request.resource.data.cohortId is string && request.resource.data.cohortId.size() > 0))
                      && (request.resource.data.targetAudience == 'SPECIFIC_COHORT' || request.resource.data.cohortId == null)
                      && request.resource.data.createdByUid == request.auth.uid
                      && request.resource.data.creatorDisplayName is string
                      && request.resource.data.createdAt == request.time && request.resource.data.updatedAt == request.time
                      && request.resource.data.keys().hasOnly(['title', 'content', 'isUrgent', 'targetAudience', 'cohortId', 'attachmentURL', 'attachmentName', 'createdByUid', 'creatorDisplayName', 'createdAt', 'updatedAt']);
      allow update: if isAdmin()
                      && request.resource.data.title is string && request.resource.data.title.size() >= 5 && request.resource.data.title.size() <= 100
                      && request.resource.data.content is string && request.resource.data.content.size() >= 10 && request.resource.data.content.size() <= 5000
                      && request.resource.data.isUrgent is bool
                      && request.resource.data.targetAudience is string && (request.resource.data.targetAudience == 'ALL' || request.resource.data.targetAudience == 'SPECIFIC_COHORT')
                      && (request.resource.data.targetAudience == 'ALL' || (request.resource.data.cohortId is string && request.resource.data.cohortId.size() > 0))
                      && (request.resource.data.targetAudience == 'SPECIFIC_COHORT' || request.resource.data.cohortId == null)
                      && request.resource.data.createdByUid == resource.data.createdByUid // Cannot change creator
                      && request.resource.data.updatedAt == request.time
                      && request.resource.data.keys().hasOnly(['title', 'content', 'isUrgent', 'targetAudience', 'cohortId', 'attachmentURL', 'attachmentName', 'createdByUid', 'creatorDisplayName', 'createdAt', 'updatedAt']); // creatorDisplayName is also set on create, can be updated
      allow delete: if isAdmin();
    }
    
    // Rules for Cohorts
    function isValidCohortScheduleEntry(entry) {
        return entry.keys().hasAll(['id', 'date', 'day', 'time', 'category', 'topicActivity'])
            && entry.id is string && entry.id.size() > 0
            && entry.date is string // Date as YYYY-MM-DD string
            && entry.day is string && entry.day.size() > 0
            && entry.time is string && entry.time.size() > 0
            && entry.category is string && entry.category.size() > 0
            && entry.topicActivity is string && entry.topicActivity.size() > 0
            && (entry.content == null || (entry.content is string && entry.content.size() <= 2000))
            && (entry.speakerVenue == null || (entry.speakerVenue is string && entry.speakerVenue.size() <= 200))
            && entry.keys().hasOnly(['id', 'date', 'day', 'time', 'category', 'topicActivity', 'content', 'speakerVenue']);
    }

    match /cohorts/{cohortId} {
      allow read: if isSignedIn(); // Allow all signed-in users to read cohort details
      allow create: if isAdmin()
                      && request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 100
                      && request.resource.data.startDate is timestamp && request.resource.data.endDate is timestamp && request.resource.data.endDate > request.resource.data.startDate
                      && request.resource.data.batchSize is number && request.resource.data.batchSize >= 1 && request.resource.data.batchSize <= 200
                      && request.resource.data.ideaIds is list && request.resource.data.ideaIds.size() == 0 // Must be empty on create
                      && request.resource.data.schedule is list && request.resource.data.schedule.size() == 0 // Must be empty on create
                      && request.resource.data.createdByUid == request.auth.uid
                      && request.resource.data.creatorDisplayName is string
                      && request.resource.data.createdAt == request.time && request.resource.data.updatedAt == request.time
                      && request.resource.data.keys().hasOnly(['name', 'startDate', 'endDate', 'batchSize', 'ideaIds', 'schedule', 'createdByUid', 'creatorDisplayName', 'createdAt', 'updatedAt']);
      allow update: if isAdmin()
                      && request.resource.data.updatedAt == request.time
                      && request.resource.data.createdByUid == resource.data.createdByUid // Cannot change creator
                      // On update, name, dates, batchSize can change
                      && (request.writeFields.hasAny(['name', 'startDate', 'endDate', 'batchSize'])
                            && request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 100
                            && request.resource.data.startDate is timestamp && request.resource.data.endDate is timestamp && request.resource.data.endDate > request.resource.data.startDate
                            && request.resource.data.batchSize is number && request.resource.data.batchSize >= 1 && request.resource.data.batchSize <= 200
                            && request.resource.data.ideaIds == resource.data.ideaIds // These are not changed by this specific form, but by assignIdeaToCohort
                            && request.resource.data.schedule == resource.data.schedule // Schedule is updated by its own function
                            && request.writeFields.hasOnly(['name', 'startDate', 'endDate', 'batchSize', 'updatedAt'])
                         )
                      // Admin updating cohort schedule
                      || (request.writeFields.has('schedule')
                            && request.resource.data.schedule is list && request.resource.data.schedule.size() <= 100 // Example limit on schedule entries
                            && request.resource.data.schedule.all(entry, isValidCohortScheduleEntry(entry))
                            && request.writeFields.hasOnly(['schedule', 'updatedAt'])
                         )
                      // Admin assigning/unassigning idea to cohort (this also updates the idea document)
                      || (request.writeFields.has('ideaIds')
                           && request.resource.data.ideaIds is list && request.resource.data.ideaIds.size() <= request.resource.data.batchSize
                           && request.resource.data.ideaIds.all(id, id is string)
                           && request.writeFields.hasOnly(['ideaIds', 'updatedAt'])
                         );
      allow delete: if isAdmin() && resource.data.ideaIds.size() == 0; // Only if no ideas are assigned
    }
    
    // Rules for System Settings
    match /systemSettings/config {
      allow read: if true; // Everyone can read system settings
      allow write: if isAdmin() // Only admins can update system settings
                    && request.resource.data.portalName is string && request.resource.data.portalName.size() >= 3 && request.resource.data.portalName.size() <= 50
                    && request.resource.data.maintenanceMode is bool
                    && request.resource.data.allowNewRegistrations is bool
                    && request.resource.data.defaultCohortSize is number && request.resource.data.defaultCohortSize >= 1 && request.resource.data.defaultCohortSize <= 100
                    && request.resource.data.updatedAt == request.time
                    && request.resource.data.updatedByUid == request.auth.uid
                    && request.resource.data.keys().hasOnly(['portalName', 'maintenanceMode', 'allowNewRegistrations', 'defaultCohortSize', 'updatedAt', 'updatedByUid']);
    }

    // Rules for Activity Logs
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isSignedIn() && // Typically created by backend/trusted environment or specific user actions allowed by other rules
                       request.resource.data.actorUid == request.auth.uid &&
                       request.resource.data.timestamp == request.time &&
                       request.resource.data.action is string &&
                       (request.resource.data.actorDisplayName == null || request.resource.data.actorDisplayName is string) &&
                       (request.resource.data.target == null || (
                           request.resource.data.target.type is string && request.resource.data.target.id is string &&
                           (request.resource.data.target.displayName == null || request.resource.data.target.displayName is string) &&
                           request.resource.data.target.keys().hasOnly(['type', 'id', 'displayName'])
                       )) &&
                       (request.resource.data.details == null || request.resource.data.details is map) &&
                       request.resource.data.keys().hasOnly(['timestamp', 'actorUid', 'actorDisplayName', 'action', 'target', 'details']);

      allow update, delete: if false; // Logs are append-only
    }
  }
}


    