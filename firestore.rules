
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the currently authenticated user is the owner of the resource
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if the user has an 'ADMIN_FACULTY' role
    function isAdmin() {
      // Check if auth is not null before trying to access request.auth.uid
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Helper function to check if the user is a Super Admin
    function isSuperAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin();

      allow create: if isUser(userId) &&
                      request.resource.data.uid == userId &&
                      (request.resource.data.email == request.auth.token.email || request.resource.data.email == "pranavrathi07@gmail.com") &&
                      (request.resource.data.role != 'ADMIN_FACULTY' || request.resource.data.email == "pranavrathi07@gmail.com") &&
                      (request.resource.data.isSuperAdmin == false || request.resource.data.email == "pranavrathi07@gmail.com");

      allow update: if (isAdmin() &&
                        // Admin cannot change primary super admin's role away from ADMIN_FACULTY or isSuperAdmin from true.
                        (resource.data.email != "pranavrathi07@gmail.com" ||
                         (request.resource.data.role == 'ADMIN_FACULTY' && request.resource.data.isSuperAdmin == true)
                        )
                       ) ||
                     (isUser(userId) &&
                       // User cannot change their own uid, email, role, isSuperAdmin status, creation timestamp, or team association fields.
                       !(request.resource.data.diff(resource.data).affectedKeys().hasAny([
                           'uid', 'email', 'role', 'isSuperAdmin', 'createdAt',
                           'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid'
                         ]))
                     );

      // Admins can delete user profiles (Firestore data only).
      // Users can delete their own profile.
      // Primary super admin profile cannot be deleted.
      allow delete: if (resource.data.email != "pranavrathi07@gmail.com") &&
                       (isAdmin() || isUser(userId));
    }

    // Idea Submissions
    match /ideas/{ideaId} {
      allow read: if isAuthenticated() &&
                     (isUser(resource.data.userId) || // Owner
                      (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails) || // Team Member
                      isAdmin() // Admin
                     );

      allow create: if isAuthenticated() && isUser(request.resource.data.userId);

      allow update: if isAuthenticated() && (
        // Admin can update
        isAdmin() ||
        // Idea owner can update specific fields
        (isUser(resource.data.userId) &&
          !(request.resource.data.diff(resource.data).affectedKeys().hasAny([
              'status', 'programPhase', 'phase2Marks', 'mentor',
              'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
              'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
              'userId' // Owner cannot change the userId (owner) of the idea
            ]))
        ) ||
        // Team member can update their specific details in structuredTeamMembers
        (
          resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails &&
          // Ensure only 'structuredTeamMembers' and 'updatedAt' are being changed at the top level
          request.writeFields.hasOnly(['structuredTeamMembers', 'updatedAt']) &&
          // Ensure critical idea fields are not changed by the team member
          request.resource.data.userId == resource.data.userId &&
          request.resource.data.status == resource.data.status &&
          request.resource.data.programPhase == resource.data.programPhase &&
          // Ensure teamMemberEmails array is not changed by this specific operation
          // (managed by idea owner or admin)
          request.resource.data.teamMemberEmails.toSet().equals(resource.data.teamMemberEmails.toSet()) &&
          // Ensure the size of the structuredTeamMembers array does not change
          request.resource.data.structuredTeamMembers.size() == resource.data.structuredTeamMembers.size()
          // Further validation of individual member updates within structuredTeamMembers should be handled by client logic,
          // as complex array item validation is difficult and limited in rules.
          // Client ensures only the member's own entry is changed, and ID is set to their UID.
        )
      );

      allow delete: if isAuthenticated() && (isUser(resource.data.userId) || isAdmin());
    }

    // Announcements
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // System Settings (single document 'config')
    match /systemSettings/config {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Activity Logs
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated() && request.resource.data.actorUid == request.auth.uid;
    }
  }
}
