
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to check user roles and ownership.
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }
    
    function isIdeaOwner(ideaId) {
      return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/ideas/$(ideaId)).data.userId;
    }

    function isTeamMember(ideaId) {
        let idea = get(/databases/$(database)/documents/ideas/$(ideaId)).data;
        // Check if the user's UID is in the teamMemberUids array
        return isSignedIn() && request.auth.uid in idea.teamMemberUids;
    }
    
    function isOwnerOrTeamMember(ideaId) {
      return isIdeaOwner(ideaId) || isTeamMember(ideaId);
    }

    // User Profiles: Users can manage their own profile. Admins can manage any profile.
    match /users/{userId} {
      allow read, write: if isSignedIn() && (request.auth.uid == userId || isAdmin());
    }
    
    // Idea Submissions:
    match /ideas/{ideaId} {
      // Any authenticated user can create an idea for themselves.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      
      // Admins, the idea owner, and team members can read their idea.
      allow read: if isAdmin() || isOwnerOrTeamMember(ideaId);
      
      // Update rules:
      // Admins can update any field.
      // Owners/Team Members can only update a specific list of non-sensitive fields.
      allow update: if isAdmin() || (
                      isOwnerOrTeamMember(ideaId) &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                          'updatedAt',
                          'incubationDocuments',
                          'phase2PptUrl',
                          'phase2PptFileName',
                          'phase2PptUploadedAt',
                          'yuktiId',
                          'yuktiPassword',
                          'yuktiScreenshotUrl',
                          'yuktiScreenshotFileName',
                          'isOutlineAIGenerated',
                          'beneficiaryName',
                          'beneficiaryAccountNo',
                          'beneficiaryBankName',
                          'beneficiaryIfscCode',
                          'beneficiaryAccountType',
                          'beneficiaryCity',
                          'beneficiaryBranchName',
                          'sanction1Expenses',
                          'sanction2Expenses',
                          'sanction1AppliedForNext',
                          'structuredTeamMembers',
                          'teamMemberEmails',
                          'teamMemberUids',
                          'comments'
                      ])
                    );

      // Only Admins can delete ideas.
      allow delete: if isAdmin();
    }
    
    // Announcements: All authenticated users can read. Only admins can write.
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Events: All authenticated users can read. Only admins can create/delete.
    // Users can update the RSVP list for themselves.
    match /events/{eventId} {
      allow read: if isSignedIn();
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || 
                      (isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps', 'rsvpCount']));
    }

    // Notifications: Users can only access their own.
    match /notifications/{notificationId} {
        allow read, write: if isSignedIn() && request.auth.uid == resource.data.userId;
        allow create: if isSignedIn();
    }
    
    // Activity Logs: Write-only for server actions (via any auth'd user), read-only for admins.
    match /activityLogs/{logId} {
        allow read: if isAdmin();
        allow create: if isSignedIn();
        allow update, delete: if false;
    }
    
    // Cohorts: Read for authenticated, write for admins.
    match /cohorts/{cohortId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    // System Settings: Read for authenticated, write for admins.
    match /systemSettings/{settingsId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
  }
}
