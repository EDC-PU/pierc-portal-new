
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isRequestingUserAuthenticated() {
      return isAuth() && request.auth.uid != null;
    }

    function isRequestingUserAdmin() {
      // Check if the requesting user's profile has the ADMIN_FACULTY role
      return isRequestingUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    function isSuperAdminUser() {
      return isRequestingUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    function isOwner(userId) {
      return isRequestingUserAuthenticated() && request.auth.uid == userId;
    }
    
    function isTeamMember(ideaId) {
      // Check if the requesting user's UID is in the idea's team member UID list.
      return isRequestingUserAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/ideas/$(ideaId)).data.teamMemberUids;
    }

    // --- Collection: users ---
    match /users/{userId} {
      allow read: if isRequestingUserAuthenticated();
      allow create: if isOwner(userId); // Profile creation is tied to auth UID
      allow update: if isSuperAdminUser() || isOwner(userId);
      allow delete: if isSuperAdminUser() || isOwner(userId);
    }

    // --- Collection: ideas ---
    match /ideas/{ideaId} {
      allow read: if isRequestingUserAuthenticated();
      allow create: if isOwner(request.resource.data.userId);

      // UPDATE rule for ideas
      allow update: if isSuperAdminUser() ||
                      isRequestingUserAdmin() ||
                      (isOwner(resource.data.userId) && isOwnerMakingAllowedChanges(request, resource)) ||
                      (isTeamMember(ideaId) && isTeamMemberMakingAllowedChanges(request, resource));

      allow delete: if isSuperAdminUser();
    }

    // --- Collection: activityLogs ---
    match /activityLogs/{logId} {
      // A user can create a log entry for themselves.
      allow create: if isRequestingUserAuthenticated() && request.resource.data.actorUid == request.auth.uid;
      // Only admins can read/manage logs.
      allow read, update, delete: if isRequestingUserAdmin();
    }

    // --- Collection: notifications ---
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId); // Only the target user can read their notifications
      allow create: if isRequestingUserAdmin();
      allow update: if isOwner(resource.data.userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead', 'updatedAt']);
      allow delete: if isOwner(resource.data.userId);
    }

    // --- Collection: events ---
    match /events/{eventId} {
      allow read: if true; // Events can be read by anyone
      allow create, delete: if isRequestingUserAdmin();
      allow update: if isRequestingUserAdmin() || (isRequestingUserAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps', 'rsvpCount', 'updatedAt']));
    }

    // --- Collection: announcements ---
    match /announcements/{announcementId} {
      allow read: if true; // Announcements are public
      allow create, update, delete: if isRequestingUserAdmin();
    }

    // --- Collection: cohorts ---
    match /cohorts/{cohortId} {
      allow read: if true; // Cohort info can be public
      allow create, update, delete: if isRequestingUserAdmin();
    }

    // --- Collection: systemSettings ---
    match /systemSettings/{docId} {
      allow read: if true; // Settings can be read by anyone
      allow write: if isRequestingUserAdmin();
    }

    // --- Detailed Validation Functions ---

    // Fields a team member (non-owner) can update.
    function teamMemberUpdatableFields() {
      return [
        'updatedAt', 'comments',
        'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt',
        'yuktiId', 'yuktiPassword', 'yuktiScreenshotUrl', 'yuktiScreenshotFileName',
        'incubationDocuments',
        'sanction1Expenses', 'sanction2Expenses',
        'sanction1AppliedForNext',
        'beneficiaryName', 'beneficiaryAccountNo', 'beneficiaryBankName', 'beneficiaryIfscCode', 'beneficiaryAccountType', 'beneficiaryCity', 'beneficiaryBranchName'
      ];
    }
    
    // Fields only an idea owner can update (in addition to team member fields).
    function ownerOnlyUpdatableFields() {
      return [
        'structuredTeamMembers', 'teamMemberEmails', 'teamMemberUids'
      ];
    }

    // Checks if a team member is making only allowed changes.
    function isTeamMemberMakingAllowedChanges(request, resource) {
      let immutableFieldsByMember = ['userId', 'createdAt', 'submittedAt', 'status', 'programPhase', 'mentor', 'cohortId', 'structuredTeamMembers', 'teamMemberEmails', 'teamMemberUids'];
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(teamMemberUpdatableFields()) &&
             !request.resource.data.diff(resource.data).affectedKeys().hasAny(immutableFieldsByMember);
    }
    
    // Checks if the owner is making only allowed changes.
    function isOwnerMakingAllowedChanges(request, resource) {
      let immutableFieldsByOwner = ['userId', 'createdAt', 'submittedAt', 'status', 'programPhase', 'mentor', 'cohortId'];
      let allowedFields = teamMemberUpdatableFields().concat(ownerOnlyUpdatableFields());
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields) &&
             !request.resource.data.diff(resource.data).affectedKeys().hasAny(immutableFieldsByOwner);
    }
  }
}
