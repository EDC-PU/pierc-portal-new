rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User profiles
    match /users/{userId} {
      // Users can write to their own profile
      allow write: if request.auth != null && request.auth.uid == userId;
      // Users can get their own profile, admins can get any profile
      allow get: if request.auth != null && (
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY'
      );
      // Admins can list all users
      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Ideas
    match /ideas/{ideaId} {
      allow get, list: if request.auth != null;
      allow create: if request.auth != null;
      
      allow update: if request.auth != null && (
        // Allow owner to update
        resource.data.userId == request.auth.uid ||
        // Allow admin to update
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY' ||
        // Allow any authenticated user to ONLY add a comment
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments', 'updatedAt']))
      );
      
      allow delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Admin-only collections
    match /cohorts/{cohortId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }
    match /announcements/{announcementId} {
       allow read: if request.auth != null;
       allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }
    match /systemSettings/config {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }
    
    // Events
    match /events/{eventId} {
       allow read: if request.auth != null;
       allow create, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
       allow update: if request.auth != null && (
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY' ||
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps', 'rsvpCount', 'updatedAt'])
       );
    }
    
    // User-specific collections
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Logging
    match /activityLogs/{logId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
      allow create: if request.auth != null;
    }
  }
}
