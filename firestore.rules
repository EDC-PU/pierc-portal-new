
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserProfileData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserProfileAdmin(userId) {
      let profile = getUserProfileData(userId);
      return profile != null && profile.role == 'ADMIN_FACULTY';
    }

    function isUserProfileSuperAdmin(userId) {
      let profile = getUserProfileData(userId);
      return profile != null && profile.role == 'ADMIN_FACULTY' && profile.isSuperAdmin == true;
    }

    function isUserTeamMemberOnly(userId) {
      let profile = getUserProfileData(userId);
      return profile != null && profile.isTeamMemberOnly == true;
    }

    function isRequestorProfileAdmin() {
      return isSignedIn() && isUserProfileAdmin(request.auth.uid);
    }

    function isRequestorProfileSuperAdmin() {
      return isSignedIn() && isUserProfileSuperAdmin(request.auth.uid);
    }

    // Ensure profile is complete enough for non-admin/non-team-member actions
    function isUserProfileCompleteForIdeaSubmission(userId) {
      let profile = getUserProfileData(userId);
      return profile != null &&
             profile.fullName is string && profile.fullName.size() > 0 &&
             profile.contactNumber is string && profile.contactNumber.size() > 0 &&
             // Idea specific fields must be present in profile for submission via profile save
             profile.startupTitle is string && profile.startupTitle.size() >= 5 &&
             profile.problemDefinition is string && profile.problemDefinition.size() >= 10 &&
             profile.solutionDescription is string && profile.solutionDescription.size() >= 10 &&
             profile.uniqueness is string && profile.uniqueness.size() >= 10 &&
             profile.applicantCategory in ['PARUL_STUDENT', 'PARUL_STAFF', 'PARUL_ALUMNI', 'OTHERS'] &&
             profile.currentStage in ['IDEA', 'PROTOTYPE_STAGE', 'STARTUP_STAGE'];
    }

    function creatorIsUsingAdminPlaceholderForIdea(userId) {
      let profile = getUserProfileData(userId);
      // Checks if the user is an admin/mentor AND their startupTitle is one of the placeholder values
      return profile != null && profile.role == 'ADMIN_FACULTY' &&
             (profile.startupTitle == 'Administrative Account' || profile.startupTitle == 'Faculty/Mentor Account');
    }

    // Validates common idea content fields
    function isValidIdeaCoreContent(data) {
      return data.title is string && data.title.size() >= 5 && data.title.size() <= 200 &&
             data.problem is string && data.problem.size() >= 10 && data.problem.size() <= 2000 &&
             data.solution is string && data.solution.size() >= 10 && data.solution.size() <= 2000 &&
             data.uniqueness is string && data.uniqueness.size() >= 10 && data.uniqueness.size() <= 2000 &&
             data.developmentStage in ['IDEA', 'PROTOTYPE_STAGE', 'STARTUP_STAGE'] &&
             data.applicantType in ['PARUL_STUDENT', 'PARUL_STAFF', 'PARUL_ALUMNI', 'OTHERS'] &&
             data.category == data.applicantType && // Ensure 'category' on idea matches 'applicantType'
             (data.teamMembers is string && data.teamMembers.size() <= 500 || data.teamMembers == null);
    }

    // Validates an idea submission for create or for resubmitting an archived idea
    function isValidIdeaSubmissionOnCreateOrResubmit(userId, incomingData, isCreate) {
      let profile = getUserProfileData(userId);
      // resource.data is only valid in allow update/delete context. For create, existingData is effectively null.
      let existingData = isCreate ? null : resource.data;

      return incomingData.userId == userId &&
             profile != null && // Ensure profile was fetched
             // Verify applicantDisplayName and applicantEmail match the user's profile
             incomingData.applicantDisplayName == (profile.displayName == null ? (profile.fullName == null ? 'N/A' : profile.fullName) : profile.displayName) &&
             incomingData.applicantEmail == (profile.email == null ? 'N/A' : profile.email) &&
             isValidIdeaCoreContent(incomingData) && // Use the common content validator
             // Team Structure specific to create/resubmit (should be empty initially)
             incomingData.structuredTeamMembers is list && (isCreate ? incomingData.structuredTeamMembers.size() == 0 : incomingData.structuredTeamMembers.size() <= 4) &&
             incomingData.teamMemberEmails is list && (isCreate ? incomingData.teamMemberEmails.size() == 0 : incomingData.teamMemberEmails.size() <= 4) &&
             // Status and Timestamps
             incomingData.status == 'SUBMITTED' &&
             (isCreate ? incomingData.submittedAt == request.time : incomingData.submittedAt == existingData.submittedAt) && // submittedAt is immutable after create
             incomingData.updatedAt == request.time &&
             // Ensure admin-controlled fields are appropriately null/empty on create/resubmit
             incomingData.programPhase == null &&
             incomingData.cohortId == null &&
             (incomingData.phase2Marks is map && incomingData.phase2Marks.size() == 0) && // Must be an empty map
             incomingData.mentor == null &&
             incomingData.rejectionRemarks == null &&
             incomingData.rejectedByUid == null &&
             incomingData.rejectedAt == null &&
             incomingData.phase2PptUrl == null &&
             incomingData.phase2PptFileName == null &&
             incomingData.phase2PptUploadedAt == null &&
             incomingData.nextPhaseDate == null &&
             incomingData.nextPhaseStartTime == null &&
             incomingData.nextPhaseEndTime == null &&
             incomingData.nextPhaseVenue == null &&
             incomingData.nextPhaseGuidelines == null &&
             // Ensure fields NOT part of profile-based creation are indeed absent from the request
             !('fileURL'in incomingData) &&
             !('fileName'in incomingData) &&
             !('studioLocation'in incomingData);
    }


    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       (request.resource.data.displayName == request.auth.token.name || request.resource.data.displayName == request.resource.data.fullName || request.resource.data.displayName == 'New User') &&
                       // Allow photoURL to be from auth token or null
                       (request.resource.data.photoURL == request.auth.token.picture || request.resource.data.photoURL == null) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.fullName is string &&
                       request.resource.data.contactNumber is string &&
                       // Role specific initial setup checks
                       (
                         ( // Student or External User initial setup (may or may not have idea details yet)
                           (request.resource.data.role == 'STUDENT' || request.resource.data.role == 'EXTERNAL_USER') &&
                           (
                             ( // Case 1: Setting up as team member only
                               request.resource.data.isTeamMemberOnly == true &&
                               request.resource.data.associatedIdeaId is string && request.resource.data.associatedIdeaId.size() > 0 &&
                               request.resource.data.associatedTeamLeaderUid is string && request.resource.data.associatedTeamLeaderUid.size() > 0 &&
                               request.resource.data.startupTitle == null && request.resource.data.problemDefinition == null // etc. for all idea fields
                             ) ||
                             ( // Case 2: Setting up as idea owner (idea fields might be initially null/empty strings if profile setup is multi-step, or filled if single step)
                               request.resource.data.isTeamMemberOnly == false &&
                               request.resource.data.associatedIdeaId == null &&
                               request.resource.data.associatedTeamLeaderUid == null &&
                               // Allow idea fields to be initially null/empty or valid types
                               (request.resource.data.startupTitle == null || request.resource.data.startupTitle is string) &&
                               (request.resource.data.problemDefinition == null || request.resource.data.problemDefinition is string) &&
                               (request.resource.data.solutionDescription == null || request.resource.data.solutionDescription is string) &&
                               (request.resource.data.uniqueness == null || request.resource.data.uniqueness is string) &&
                               (request.resource.data.applicantCategory == null || request.resource.data.applicantCategory in ['PARUL_STUDENT', 'PARUL_STAFF', 'PARUL_ALUMNI', 'OTHERS']) &&
                               (request.resource.data.currentStage == null || request.resource.data.currentStage in ['IDEA', 'PROTOTYPE_STAGE', 'STARTUP_STAGE']) &&
                               (request.resource.data.teamMembers == null || request.resource.data.teamMembers is string)
                             )
                           )
                         ) ||
                         ( // Admin/Faculty initial setup
                           request.resource.data.role == 'ADMIN_FACULTY' &&
                           request.resource.data.isTeamMemberOnly == false && // Admins are not team members only
                           request.resource.data.associatedIdeaId == null &&
                           request.resource.data.associatedTeamLeaderUid == null &&
                           // Check for placeholder or actual startup details for admins
                           (
                             (request.resource.data.startupTitle == 'Administrative Account' || request.resource.data.startupTitle == 'Faculty/Mentor Account') ||
                             (request.resource.data.startupTitle is string && request.resource.data.startupTitle.size() > 0) // Or they can have a real idea too
                           ) &&
                           (request.resource.data.isSuperAdmin == true || request.resource.data.isSuperAdmin == false)
                         )
                       ) &&
                       // Ensure only expected fields are present for creation
                       request.resource.data.keys().hasOnly([
                         'uid', 'email', 'displayName', 'photoURL', 'role', 'isSuperAdmin',
                         'fullName', 'contactNumber',
                         'enrollmentNumber', 'college', 'instituteName', // Optional personal
                         'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness', // Idea fields
                         'applicantCategory', 'currentStage', 'teamMembers', // Idea fields
                         'createdAt', 'updatedAt',
                         'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid' // Team member specific
                       ]);

      allow update: if isSignedIn() &&
                      (
                        ( // Owner updating their own profile
                          isOwner(userId) &&
                          request.resource.data.uid == userId && // Cannot change uid
                          request.resource.data.email == resource.data.email && // Cannot change email via profile update
                          request.resource.data.role == resource.data.role && // Role not changed here
                          request.resource.data.isSuperAdmin == resource.data.isSuperAdmin && // Super admin status not changed here
                          request.resource.data.createdAt == resource.data.createdAt && // Cannot change createdAt
                          request.resource.data.updatedAt == request.time &&
                          // Allow updates to specific editable fields
                          request.resource.data.fullName is string &&
                          request.resource.data.contactNumber is string &&
                          // Check idea fields only if user is not team member only
                          ( request.resource.data.isTeamMemberOnly == true ||
                            (
                              request.resource.data.startupTitle is string && request.resource.data.startupTitle.size() >= 5 &&
                              request.resource.data.problemDefinition is string && request.resource.data.problemDefinition.size() >= 10 &&
                              request.resource.data.solutionDescription is string && request.resource.data.solutionDescription.size() >= 10 &&
                              request.resource.data.uniqueness is string && request.resource.data.uniqueness.size() >= 10 &&
                              request.resource.data.applicantCategory in ['PARUL_STUDENT', 'PARUL_STAFF', 'PARUL_ALUMNI', 'OTHERS'] &&
                              request.resource.data.currentStage in ['IDEA', 'PROTOTYPE_STAGE', 'STARTUP_STAGE'] &&
                              (request.resource.data.teamMembers is string || request.resource.data.teamMembers == null)
                            )
                          ) &&
                          // Allow isTeamMemberOnly to be false (cannot become true via this path)
                          (request.resource.data.isTeamMemberOnly == false || request.resource.data.isTeamMemberOnly == resource.data.isTeamMemberOnly) &&
                          // associatedIdeaId and associatedTeamLeaderUid should not be changed by user if they are team member only
                          (request.resource.data.isTeamMemberOnly == false ||
                           (request.resource.data.associatedIdeaId == resource.data.associatedIdeaId &&
                            request.resource.data.associatedTeamLeaderUid == resource.data.associatedTeamLeaderUid)
                          ) &&
                          request.resource.data.keys().hasOnly([ // Stricter list for user updates
                            'uid', 'email', 'displayName', 'photoURL', 'role', 'isSuperAdmin',
                            'fullName', 'contactNumber',
                            'enrollmentNumber', 'college', 'instituteName',
                            'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness',
                            'applicantCategory', 'currentStage', 'teamMembers',
                            'createdAt', 'updatedAt',
                            'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid'
                          ])
                        ) ||
                        ( // Admin updating any user's profile (excluding role/superAdmin status here)
                          isRequestorProfileAdmin() &&
                          request.resource.data.uid == userId &&
                          request.resource.data.email == resource.data.email && // Admin cannot change email here
                          request.resource.data.role == resource.data.role && // Admin cannot change role here (separate mechanism)
                          request.resource.data.isSuperAdmin == resource.data.isSuperAdmin && // Admin cannot change superAdmin here
                          request.resource.data.createdAt == resource.data.createdAt &&
                          request.resource.data.updatedAt == request.time &&
                           request.resource.data.keys().hasOnly([ // Stricter list for user updates
                            'uid', 'email', 'displayName', 'photoURL', 'role', 'isSuperAdmin',
                            'fullName', 'contactNumber',
                            'enrollmentNumber', 'college', 'instituteName',
                            'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness',
                            'applicantCategory', 'currentStage', 'teamMembers',
                            'createdAt', 'updatedAt',
                            'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid'
                          ])
                        ) ||
                        ( // Admin updating user role or super admin status
                          isRequestorProfileSuperAdmin() && // Only SuperAdmins can change roles/superAdmin status
                          userId != request.auth.uid && // SuperAdmin cannot change their own role/SA status here to prevent lockout (except primary super admin)
                          userId != "uid_of_pranavrathi07" && // Replace with actual UID of pranavrathi07 if known, or rely on client-side check
                          request.resource.data.uid == userId &&
                          request.resource.data.email == resource.data.email &&
                          request.resource.data.createdAt == resource.data.createdAt &&
                          request.resource.data.updatedAt == request.time &&
                          request.resource.data.role in ['STUDENT', 'EXTERNAL_USER', 'ADMIN_FACULTY'] &&
                          (request.resource.data.isSuperAdmin == true || request.resource.data.isSuperAdmin == false) &&
                          // Allow only specific fields to be changed in this operation
                          request.writeFields.hasAny(['role', 'isSuperAdmin', 'updatedAt']) &&
                          !request.writeFields.hasAny(['uid', 'email', 'createdAt', 'fullName', 'startupTitle' /* etc. other fields */])
                        )
                      );

      allow delete: if isRequestorProfileSuperAdmin() && userId != request.auth.uid && resource.data.email != "pranavrathi07@gmail.com"; // Only super admin can delete, not self, not primary super admin
    }

    match /ideas/{ideaId} {
      allow read: if isSignedIn();

      allow create: if isSignedIn() &&
                      isUserProfileCompleteForIdeaSubmission(request.auth.uid) &&
                      !isUserTeamMemberOnly(request.auth.uid) &&
                      !creatorIsUsingAdminPlaceholderForIdea(request.auth.uid) && // Prevent admin/mentor placeholder accounts from creating ideas
                      isValidIdeaSubmissionOnCreateOrResubmit(request.auth.uid, request.resource.data, true) &&
                      // Exact fields for a new idea created by createIdeaFromProfile
                      request.resource.data.keys().hasOnly([
                        'userId', 'applicantDisplayName', 'applicantEmail', 'title', 'category', 'problem', 'solution', 'uniqueness',
                        'developmentStage', 'applicantType', 'teamMembers',
                        'status', 'programPhase', 'cohortId', 'phase2Marks', 'mentor',
                        'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                        'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt',
                        'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                        'submittedAt', 'updatedAt',
                        'structuredTeamMembers', 'teamMemberEmails'
                        // Note: fileURL, fileName, studioLocation are NOT part of createIdeaFromProfile
                      ]);

      allow update: if isSignedIn() &&
                      (
                        ( // Admin updating status, phase, mentor, cohort, rejection, nextPhaseDetails etc.
                          isRequestorProfileAdmin() &&
                          request.resource.data.updatedAt == request.time &&
                          // Ensure core idea data isn't changed by admin here
                          request.resource.data.userId == resource.data.userId &&
                          request.resource.data.title == resource.data.title && // Title should generally be immutable by admin
                          request.resource.data.problem == resource.data.problem && // Content immutable by admin this way
                          request.resource.data.solution == resource.data.solution &&
                          request.resource.data.uniqueness == resource.data.uniqueness &&
                          request.resource.data.submittedAt == resource.data.submittedAt &&
                          // Allow specific admin-updatable fields
                          request.writeFields.hasAny([
                            'status', 'programPhase', 'cohortId', 'mentor', 'rejectionRemarks', 'rejectedByUid', 'rejectedAt', 'updatedAt',
                            'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                            'phase2Marks' // For submitting marks
                          ]) &&
                          // Disallow changing other fields not in the list above by admin status update
                          !request.writeFields.hasAny(['userId', 'title', 'problem', 'solution', 'uniqueness', 'teamMembers', 'applicantType', 'developmentStage', 'submittedAt', 'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', 'structuredTeamMembers', 'teamMemberEmails'])
                        ) ||
                        ( // Owner resubmitting an archived idea (via profile save)
                          resource.data.status == 'ARCHIVED_BY_ADMIN' && request.resource.data.status == 'SUBMITTED' &&
                          isOwner(resource.data.userId) &&
                          isUserProfileCompleteForIdeaSubmission(request.auth.uid) &&
                          !isUserTeamMemberOnly(request.auth.uid) &&
                          !creatorIsUsingAdminPlaceholderForIdea(request.auth.uid) &&
                          isValidIdeaSubmissionOnCreateOrResubmit(request.auth.uid, request.resource.data, false) && // isCreate = false
                          request.resource.data.submittedAt == resource.data.submittedAt && // submittedAt is immutable
                          // Exact fields for resubmitting an archived idea
                          request.resource.data.keys().hasOnly([
                            'userId', 'applicantDisplayName', 'applicantEmail', 'title', 'category', 'problem', 'solution', 'uniqueness',
                            'developmentStage', 'applicantType', 'teamMembers',
                            'status', 'programPhase', 'cohortId', 'phase2Marks', 'mentor',
                            'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                            'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt',
                            'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                            'submittedAt', 'updatedAt',
                            'structuredTeamMembers', 'teamMemberEmails'
                          ])
                        ) ||
                        ( // Owner updating their idea's PPT (Phase 2)
                          isOwner(resource.data.userId) &&
                          resource.data.status == 'SELECTED' && resource.data.programPhase == 'PHASE_2' &&
                          request.resource.data.userId == resource.data.userId && // Immutable fields
                          request.resource.data.title == resource.data.title &&
                          request.resource.data.submittedAt == resource.data.submittedAt &&
                          request.resource.data.updatedAt == request.time &&
                          request.writeFields.hasAll(['phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', 'updatedAt']) &&
                          request.writeFields.size() == 4 // Only these fields
                        ) ||
                        ( // Owner managing structured team members
                          isOwner(resource.data.userId) &&
                          resource.data.status != 'ARCHIVED_BY_ADMIN' && // Cannot manage team if idea is archived
                          request.resource.data.userId == resource.data.userId && // Immutable fields
                          request.resource.data.title == resource.data.title &&
                          request.resource.data.submittedAt == resource.data.submittedAt &&
                          request.resource.data.updatedAt == request.time &&
                          (
                            ( // Adding/Updating a member
                              request.resource.data.structuredTeamMembers is list &&
                              request.resource.data.structuredTeamMembers.size() <= 4 &&
                              (request.resource.data.structuredTeamMembers.size() > resource.data.structuredTeamMembers.size() ||
                               (request.resource.data.structuredTeamMembers.size() == resource.data.structuredTeamMembers.size() && request.resource.data.structuredTeamMembers != resource.data.structuredTeamMembers)
                              ) &&
                              // Ensure all members in the new list are valid
                              (forall m in request.resource.data.structuredTeamMembers :
                                m.id is string && m.id.size() > 0 &&
                                m.name is string && m.name.size() > 0 && m.name.size() <= 100 &&
                                m.email is string && m.email.matches('.+@.+\\..+') && // Basic email format
                                m.phone is string && m.phone.size() >= 10 && m.phone.size() <= 15 &&
                                m.institute is string && m.institute.size() > 0 && m.institute.size() <= 100 &&
                                m.department is string && m.department.size() > 0 && m.department.size() <= 100 &&
                                (m.enrollmentNumber == null || (m.enrollmentNumber is string && m.enrollmentNumber.size() <= 50))
                              ) &&
                              request.writeFields.hasAll(['structuredTeamMembers', 'teamMemberEmails', 'updatedAt']) &&
                              request.writeFields.size() == 3
                            ) ||
                            ( // Removing a member
                              request.resource.data.structuredTeamMembers is list &&
                              request.resource.data.structuredTeamMembers.size() < resource.data.structuredTeamMembers.size() &&
                              request.writeFields.hasAll(['structuredTeamMembers', 'teamMemberEmails', 'updatedAt']) &&
                              request.writeFields.size() == 3
                            )
                          )
                        )
                      );
      allow delete: if false; // No direct deletion by users or admins; use archive flow
    }

    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create: if isRequestorProfileAdmin() &&
                       request.resource.data.createdByUid == request.auth.uid &&
                       request.resource.data.creatorDisplayName is string &&
                       request.resource.data.title is string && request.resource.data.title.size() >= 5 && request.resource.data.title.size() <= 100 &&
                       request.resource.data.content is string && request.resource.data.content.size() >= 10 && request.resource.data.content.size() <= 5000 &&
                       request.resource.data.isUrgent is bool &&
                       request.resource.data.targetAudience in ['ALL', 'SPECIFIC_COHORT'] &&
                       (request.resource.data.targetAudience == 'ALL' || (request.resource.data.targetAudience == 'SPECIFIC_COHORT' && request.resource.data.cohortId is string)) &&
                       (request.resource.data.targetAudience == 'SPECIFIC_COHORT' || request.resource.data.cohortId == null) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.keys().hasOnly(['title', 'content', 'isUrgent', 'targetAudience', 'cohortId', 'attachmentURL', 'attachmentName', 'createdByUid', 'creatorDisplayName', 'createdAt', 'updatedAt']);

      allow update: if isRequestorProfileAdmin() &&
                       request.resource.data.createdByUid == resource.data.createdByUid && // Cannot change creator
                       request.resource.data.creatorDisplayName == resource.data.creatorDisplayName &&
                       request.resource.data.createdAt == resource.data.createdAt && // Cannot change createdAt
                       request.resource.data.title is string && request.resource.data.title.size() >= 5 && request.resource.data.title.size() <= 100 &&
                       request.resource.data.content is string && request.resource.data.content.size() >= 10 && request.resource.data.content.size() <= 5000 &&
                       request.resource.data.isUrgent is bool &&
                       request.resource.data.targetAudience in ['ALL', 'SPECIFIC_COHORT'] &&
                       (request.resource.data.targetAudience == 'ALL' || (request.resource.data.targetAudience == 'SPECIFIC_COHORT' && request.resource.data.cohortId is string)) &&
                       (request.resource.data.targetAudience == 'SPECIFIC_COHORT' || request.resource.data.cohortId == null) &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.keys().hasOnly(['title', 'content', 'isUrgent', 'targetAudience', 'cohortId', 'attachmentURL', 'attachmentName', 'createdByUid', 'creatorDisplayName', 'createdAt', 'updatedAt']);

      allow delete: if isRequestorProfileAdmin();
    }

    match /cohorts/{cohortId} {
      allow read: if isSignedIn();
      allow create: if isRequestorProfileAdmin() &&
                       request.resource.data.createdByUid == request.auth.uid &&
                       request.resource.data.creatorDisplayName is string &&
                       request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 100 &&
                       request.resource.data.startDate is timestamp &&
                       request.resource.data.endDate is timestamp && request.resource.data.endDate > request.resource.data.startDate &&
                       request.resource.data.batchSize is number && request.resource.data.batchSize >= 1 && request.resource.data.batchSize <= 200 &&
                       request.resource.data.ideaIds is list && request.resource.data.ideaIds.size() == 0 && // Initially empty
                       request.resource.data.schedule is list && request.resource.data.schedule.size() == 0 && // Initially empty
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.keys().hasOnly(['name', 'startDate', 'endDate', 'batchSize', 'ideaIds', 'schedule', 'createdByUid', 'creatorDisplayName', 'createdAt', 'updatedAt']);

      allow update: if isRequestorProfileAdmin() &&
                       request.resource.data.createdByUid == resource.data.createdByUid && // Cannot change creator
                       request.resource.data.creatorDisplayName == resource.data.creatorDisplayName &&
                       request.resource.data.createdAt == resource.data.createdAt && // Cannot change createdAt
                       request.resource.data.name is string && request.resource.data.name.size() >= 3 && request.resource.data.name.size() <= 100 &&
                       request.resource.data.startDate is timestamp &&
                       request.resource.data.endDate is timestamp && request.resource.data.endDate > request.resource.data.startDate &&
                       request.resource.data.batchSize is number && request.resource.data.batchSize >= 1 && request.resource.data.batchSize <= 200 &&
                       request.resource.data.updatedAt == request.time &&
                       ( // Updating general cohort info OR schedule OR ideaIds
                         ( // General info update
                           request.writeFields.hasAny(['name', 'startDate', 'endDate', 'batchSize', 'updatedAt']) &&
                           !request.writeFields.hasAny(['ideaIds', 'schedule', 'createdByUid', 'creatorDisplayName', 'createdAt']) && // ideaIds and schedule updated separately
                           request.resource.data.ideaIds == resource.data.ideaIds && // ensure ideaIds and schedule are not changed if not intended
                           request.resource.data.schedule == resource.data.schedule
                         ) ||
                         ( // Updating schedule
                           request.writeFields.hasAll(['schedule', 'updatedAt']) &&
                           request.writeFields.size() == 2 &&
                           request.resource.data.schedule is list &&
                           (forall entry in request.resource.data.schedule :
                             entry.id is string && entry.id.size() > 0 &&
                             entry.date is string && entry.date.size() > 0 && // Basic date format validation is complex here
                             entry.day is string && entry.day.size() > 0 &&
                             entry.time is string && entry.time.size() > 0 &&
                             entry.category is string && entry.category.size() > 0 &&
                             entry.topicActivity is string && entry.topicActivity.size() > 0 &&
                             (entry.content == null || entry.content is string) &&
                             (entry.speakerVenue == null || entry.speakerVenue is string)
                           ) &&
                           // ensure other fields are not changed
                           request.resource.data.name == resource.data.name &&
                           request.resource.data.ideaIds == resource.data.ideaIds
                         ) ||
                         ( // Updating ideaIds (by admin assigning idea to cohort)
                           request.writeFields.hasAll(['ideaIds', 'updatedAt']) &&
                           request.writeFields.size() == 2 &&
                           request.resource.data.ideaIds is list &&
                           (forall idea_id in request.resource.data.ideaIds : idea_id is string) &&
                           // ensure other fields are not changed
                           request.resource.data.name == resource.data.name &&
                           request.resource.data.schedule == resource.data.schedule
                         )
                       );
      allow delete: if isRequestorProfileSuperAdmin(); // Only super admin can delete cohorts
    }

    match /systemSettings/{docId} {
      allow read: if isSignedIn();
      allow write: if isRequestorProfileSuperAdmin() && // Only super admin can change system settings
                      docId == 'config' &&
                      request.resource.data.portalName is string && request.resource.data.portalName.size() >= 3 &&
                      request.resource.data.maintenanceMode is bool &&
                      request.resource.data.allowNewRegistrations is bool &&
                      request.resource.data.defaultCohortSize is number && request.resource.data.defaultCohortSize >= 1 && request.resource.data.defaultCohortSize <= 100 &&
                      request.resource.data.updatedAt == request.time &&
                      request.resource.data.updatedByUid == request.auth.uid &&
                      request.resource.data.keys().hasOnly(['portalName', 'maintenanceMode', 'allowNewRegistrations', 'defaultCohortSize', 'updatedAt', 'updatedByUid']);
    }

    match /activityLogs/{logId} {
      allow read, write: if false; // Activity logs are write-only via backend/rules, not directly by client
      allow create: if isSignedIn() && // Allow any signed-in user or admin to create a log entry (client calls logUserActivity)
                      request.resource.data.actorUid == request.auth.uid &&
                      request.resource.data.timestamp == request.time;
    }
  }
}

    