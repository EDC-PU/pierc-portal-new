
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isUserRole(role) {
      return role == 'STUDENT' || role == 'EXTERNAL_USER';
    }
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }
    function isSuperAdmin() {
      return isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    // Type check functions
    function isString(val) { return val is string; }
    function isStringOrNull(val) { return val == null || val is string; }
    function isBoolean(val) { return val is bool; }
    function isBooleanOrNull(val) { return val == null || val is bool; }
    function isMap(val) { return val is map; }
    function isList(val) { return val is list; }
    function isNumber(val) { return val is number || val is float; }
    function isNumberOrNull(val) { return val == null || val is number || val is float; }
    function isTimestamp(val) { return val is timestamp; }

    // User Profile Validation Functions
    function isValidRole(role) {
      return role == 'STUDENT' || role == 'EXTERNAL_USER' || role == 'ADMIN_FACULTY';
    }
    function isValidApplicantCategory(category) {
      return category == 'PARUL_STUDENT' || category == 'PARUL_STAFF' || category == 'PARUL_ALUMNI' || category == 'OTHERS';
    }
    function isValidCurrentStage(stage) {
      return stage == 'IDEA' || stage == 'PROTOTYPE_STAGE' || stage == 'STARTUP_STAGE';
    }
    function isValidSanctionStatus(status) {
      return status == 'PENDING' || status == 'APPROVED' || status == 'REJECTED' || status == 'NOT_APPLICABLE';
    }

    function isValidUserProfileOnCreate(userId, data) {
      return data.uid == userId &&
             data.email == request.auth.token.email && // Email must match the authenticated user
             isStringOrNull(data.displayName) && (data.displayName == null || data.displayName.size() <= 100) &&
             isStringOrNull(data.photoURL) && (data.photoURL == null || data.photoURL.size() <= 500) &&
             isValidRole(data.role) &&
             isBoolean(data.isSuperAdmin) &&
             // Super admin status and role for primary super admin
             (data.email == 'pranavrathi07@gmail.com' ? (data.isSuperAdmin == true && data.role == 'ADMIN_FACULTY') : true) &&
             // Mentor emails automatically become ADMIN_FACULTY but not super admin by default
             (data.role == 'ADMIN_FACULTY' && isMentorEmail(data.email) ? data.isSuperAdmin == false : true) &&

             isString(data.fullName) && data.fullName.size() >= 3 && data.fullName.size() <= 100 &&
             isString(data.contactNumber) && data.contactNumber.size() >= 10 && data.contactNumber.size() <= 15 &&
             isStringOrNull(data.enrollmentNumber) && (data.enrollmentNumber == null || (isString(data.enrollmentNumber) && data.enrollmentNumber.size() <= 50)) &&
             isStringOrNull(data.college) && (data.college == null || (isString(data.college) && data.college.size() <= 100)) &&
             isStringOrNull(data.instituteName) && (data.instituteName == null || (isString(data.instituteName) && data.instituteName.size() <= 100)) &&
             isBoolean(data.isTeamMemberOnly) &&

             // --- Idea Owner Specific Fields (only if not team member and not admin placeholder) ---
             ((data.isTeamMemberOnly == false && data.role != 'ADMIN_FACULTY') ? (
               isString(data.startupTitle) && data.startupTitle.size() >= 5 && data.startupTitle.size() <= 200 &&
               isString(data.problemDefinition) && data.problemDefinition.size() >= 10 && data.problemDefinition.size() <= 2000 &&
               isString(data.solutionDescription) && data.solutionDescription.size() >= 10 && data.solutionDescription.size() <= 2000 &&
               isString(data.uniqueness) && data.uniqueness.size() >= 10 && data.uniqueness.size() <= 2000 &&
               isString(data.teamMembers) && data.teamMembers.size() <= 500 && // Can be empty string
               isValidApplicantCategory(data.applicantCategory) &&
               isValidCurrentStage(data.currentStage) &&
               data.associatedIdeaId == null &&
               data.associatedTeamLeaderUid == null
             ) : true) &&

             // --- Team Member Specific Fields (only if isTeamMemberOnly is true) ---
             (data.isTeamMemberOnly == true ? (
               data.startupTitle == null && data.problemDefinition == null && data.solutionDescription == null &&
               data.uniqueness == null && data.applicantCategory == null && data.currentStage == null && data.teamMembers == null &&
               isString(data.associatedIdeaId) && data.associatedIdeaId.size() > 0 &&
               isString(data.associatedTeamLeaderUid) && data.associatedTeamLeaderUid.size() > 0
             ) : true) &&

             // --- Admin/Mentor Placeholder Idea Fields (only if role is ADMIN_FACULTY) ---
             (data.role == 'ADMIN_FACULTY' ? (
               // Check if it's a special admin account title or a regular string for mentors who might have ideas
               (data.startupTitle == 'Administrative Account' || data.startupTitle == 'Faculty/Mentor Account' || (isString(data.startupTitle) && data.startupTitle.size() >= 0)) &&
               isString(data.problemDefinition) && data.problemDefinition.size() >= 0 &&
               isString(data.solutionDescription) && data.solutionDescription.size() >= 0 &&
               isString(data.uniqueness) && data.uniqueness.size() >= 0 &&
               isValidApplicantCategory(data.applicantCategory) && 
               isValidCurrentStage(data.currentStage) &&
               isString(data.teamMembers) && // Can be empty for admin/mentor
               data.isTeamMemberOnly == false &&
               data.associatedIdeaId == null &&
               data.associatedTeamLeaderUid == null
             ) : true) &&
             // Timestamps are checked in the main rule (create/update)
             true;
    }

    // For user self-updates or initial setup via update
    function isRoleChangeSafeForUpdate(newRole, oldRole, authUid, oldIsSuperAdmin) {
      if (newRole == oldRole) { return true; }
      // Allow setting role if it was previously null (initial setup happening via an update)
      if (oldRole == null) {
        return isValidRole(newRole);
      }
      // Users cannot change their established role by themselves (e.g., STUDENT to EXTERNAL_USER).
      // Role changes for established users are typically admin actions.
      return false;
    }

    function isSuperAdminChangeSafe(newIsSuperAdmin, oldIsSuperAdmin, authUid) {
      if (newIsSuperAdmin == oldIsSuperAdmin) { return true; }
      // A user cannot make themselves super admin or remove their own super admin status.
      // This must be done by another super admin via a specific function.
      // Exception: Primary super admin's status is effectively fixed.
      if (request.auth.token.email == 'pranavrathi07@gmail.com') {
        return newIsSuperAdmin == true; // Primary SA status cannot be changed to false by this rule
      }
      return false; // No self-change of super admin status
    }
     function isMentorEmail(email) {
        return email == 'prashant.khanna8747@paruluniversity.ac.in' ||
               email == 'riddhi.bagha29080@paruluniversity.ac.in' ||
               email == 'nikhil.jumade24167@paruluniversity.ac.in' ||
               email == 'jay.sudani@paruluniversity.ac.in' ||
               email == 'hardik.kharva2899@paruluniversity.ac.in' ||
               email == 'sonal.sudani23321@paruluniversity.ac.in' ||
               email == 'panchamkumar.baraiya28771@paruluniversity.ac.in' ||
               email == 'juned.shaikh32161@paruluniversity.ac.in';
    }


    // Idea Submission Validation Functions
    function isValidIdeaStatus(status) {
      return status == 'SUBMITTED' || status == 'UNDER_REVIEW' || status == 'IN_EVALUATION' || status == 'SELECTED' || status == 'NOT_SELECTED' || status == 'ARCHIVED_BY_ADMIN';
    }
    function isValidProgramPhase(phase) {
      return phase == null || phase == 'PHASE_1' || phase == 'PHASE_2' || phase == 'COHORT' || phase == 'INCUBATED';
    }
     function isValidStudioLocation(location) {
      return location == null || location == 'SURAT' || location == 'RAJKOT' || location == 'BARODA' || location == 'AHMEDABAD';
    }
     function isValidTeamMember(member) {
        return member.keys().hasAll(['id', 'name', 'email', 'phone', 'institute', 'department']) && // 'enrollmentNumber' is optional
               isString(member.id) && member.id.size() > 0 &&
               isString(member.name) && member.name.size() >= 1 && member.name.size() <= 100 &&
               isString(member.email) && member.email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$") &&
               isString(member.phone) && member.phone.size() >= 10 && member.phone.size() <= 15 &&
               isString(member.institute) && member.institute.size() >= 1 && member.institute.size() <= 100 &&
               isString(member.department) && member.department.size() >= 1 && member.department.size() <= 100 &&
               (member.keys().has('enrollmentNumber') ? (isStringOrNull(member.enrollmentNumber) && (member.enrollmentNumber == null || member.enrollmentNumber.size() <= 50)) : true);
    }
    function isValidExpenseEntry(entry) {
        return entry.keys().hasAll(['id', 'description', 'amount', 'proofUrl', 'proofFileName', 'uploadedAt']) &&
               isString(entry.id) && entry.id.size() > 0 &&
               isString(entry.description) && entry.description.size() >= 5 && entry.description.size() <= 200 &&
               isNumber(entry.amount) && entry.amount > 0 &&
               isString(entry.proofUrl) && entry.proofUrl.size() > 0 &&
               isString(entry.proofFileName) && entry.proofFileName.size() > 0 &&
               isTimestamp(entry.uploadedAt);
    }

    function isValidIdeaSubmissionOnCreateOrResubmit(userId, data, isCreate, existingData) {
      let userProfile = get(/databases/$(database)/documents/users/$(userId)).data;
      return data.userId == userId &&
             isString(data.title) && data.title.size() >= 5 && data.title.size() <= 200 &&
             // Category in idea should match applicantCategory in user profile for consistency
             data.category == userProfile.applicantCategory &&
             isString(data.problem) && data.problem.size() >= 10 && data.problem.size() <= 2000 &&
             isString(data.solution) && data.solution.size() >= 10 && data.solution.size() <= 2000 &&
             isString(data.uniqueness) && data.uniqueness.size() >= 10 && data.uniqueness.size() <= 2000 &&
             isValidCurrentStage(data.developmentStage) &&
             isValidApplicantCategory(data.applicantType) && data.applicantType == userProfile.applicantCategory &&
             isString(data.teamMembers) && data.teamMembers.size() <= 500 &&
             isList(data.structuredTeamMembers) && data.structuredTeamMembers.size() <= 4 &&
                (data.structuredTeamMembers.size() == 0 || data.structuredTeamMembers.all(member, isValidTeamMember(member))) &&
             isList(data.teamMemberEmails) && data.teamMemberEmails.size() <= 4 &&
                (data.teamMemberEmails.size() == 0 || data.teamMemberEmails.all(email, isString(email) && email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")) ) &&

             (isCreate ? data.status == 'SUBMITTED' : isValidIdeaStatus(data.status)) &&
             isValidProgramPhase(data.programPhase) &&
             (data.programPhase == 'COHORT' ? (isString(data.cohortId) && data.cohortId.size() > 0) : data.cohortId == null) &&
             isMap(data.phase2Marks) && (data.phase2Marks.keys().size() == 0 || data.phase2Marks.values().all(markEntry,
                markEntry.keys().hasAll(['mark', 'adminDisplayName', 'markedAt']) &&
                (markEntry.mark == null || (isNumber(markEntry.mark) && markEntry.mark >=0 && markEntry.mark <=100)) &&
                isString(markEntry.adminDisplayName) && isTimestamp(markEntry.markedAt)
             )) &&
             isStringOrNull(data.mentor) && (data.mentor == null || data.mentor in get(/databases/$(database)/documents/systemSettings/config).data.availableMentors) && // Assuming mentors list in systemSettings
             isStringOrNull(data.rejectionRemarks) && (data.rejectionRemarks == null || data.rejectionRemarks.size() <= 2000) &&
             isStringOrNull(data.rejectedByUid) &&
             (data.rejectedAt == null || isTimestamp(data.rejectedAt)) &&

             isStringOrNull(data.phase2PptUrl) && (data.phase2PptUrl == null || data.phase2PptUrl.size() > 0) &&
             isStringOrNull(data.phase2PptFileName) && (data.phase2PptFileName == null || data.phase2PptFileName.size() > 0) &&
             (data.phase2PptUploadedAt == null || isTimestamp(data.phase2PptUploadedAt)) &&

             (data.nextPhaseDate == null || isTimestamp(data.nextPhaseDate)) &&
             isStringOrNull(data.nextPhaseStartTime) &&
             isStringOrNull(data.nextPhaseEndTime) &&
             isStringOrNull(data.nextPhaseVenue) &&
             isStringOrNull(data.nextPhaseGuidelines) &&

             isStringOrNull(data.fileURL) && (data.fileURL == null || data.fileURL.size() > 0) &&
             isStringOrNull(data.fileName) && (data.fileName == null || data.fileName.size() > 0) &&
             isValidStudioLocation(data.studioLocation) &&
             isString(data.applicantDisplayName) && data.applicantDisplayName.size() > 0 &&
             isString(data.applicantEmail) && data.applicantEmail.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$") &&

             // Funding fields validation
             isNumberOrNull(data.totalFundingAllocated) && (data.totalFundingAllocated == null || data.totalFundingAllocated >= 0) &&
             isNumberOrNull(data.sanction1Amount) && (data.sanction1Amount == null || data.sanction1Amount >= 0) &&
             isNumberOrNull(data.sanction2Amount) && (data.sanction2Amount == null || data.sanction2Amount >= 0) &&
             (data.sanction1DisbursedAt == null || isTimestamp(data.sanction1DisbursedAt)) &&
             (data.sanction2DisbursedAt == null || isTimestamp(data.sanction2DisbursedAt)) &&
             isList(data.sanction1Expenses) && (data.sanction1Expenses.size() == 0 || data.sanction1Expenses.all(exp, isValidExpenseEntry(exp))) &&
             isList(data.sanction2Expenses) && (data.sanction2Expenses.size() == 0 || data.sanction2Expenses.all(exp, isValidExpenseEntry(exp))) &&
             isStringOrNull(data.beneficiaryName) &&
             isStringOrNull(data.beneficiaryAccountNo) &&
             isStringOrNull(data.beneficiaryBankName) &&
             isStringOrNull(data.beneficiaryIfscCode) &&
             isBoolean(data.sanction1AppliedForNext) &&
             isValidSanctionStatus(data.sanction1UtilizationStatus) &&
             isStringOrNull(data.sanction1UtilizationRemarks) &&
             isStringOrNull(data.sanction1UtilizationReviewedBy) &&
             (data.sanction1UtilizationReviewedAt == null || isTimestamp(data.sanction1UtilizationReviewedAt)) &&
             isValidSanctionStatus(data.sanction2UtilizationStatus) &&
             isStringOrNull(data.sanction2UtilizationRemarks) &&
             isStringOrNull(data.sanction2UtilizationReviewedBy) &&
             (data.sanction2UtilizationReviewedAt == null || isTimestamp(data.sanction2UtilizationReviewedAt)) &&

             // Ensure derived fields are consistent if profile is available
             (userProfile != null ?
                (data.applicantDisplayName == (userProfile.displayName == null ? (userProfile.fullName == null ? 'N/A' : userProfile.fullName) : userProfile.displayName) &&
                 data.applicantEmail == (userProfile.email == null ? 'N/A' : userProfile.email) &&
                 data.applicantType == userProfile.applicantCategory)
                : true // If userProfile somehow not found (should not happen for owner), skip this check
             );
    }

    // --- User Profiles ---
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(request.auth.uid)
                      && isValidUserProfileOnCreate(request.auth.uid, request.resource.data)
                      && request.resource.data.createdAt == request.time
                      && request.resource.data.updatedAt == request.time
                      && request.resource.data.keys().hasOnly([
                           'uid', 'email', 'displayName', 'photoURL', 'role', 'isSuperAdmin', 'fullName', 'contactNumber',
                           'applicantCategory', 'currentStage', 'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness',
                           'teamMembers', 'enrollmentNumber', 'college', 'instituteName',
                           'createdAt', 'updatedAt', 'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid'
                         ]);

      allow update: if isOwner(request.auth.uid) &&
                      request.resource.data.uid == resource.data.uid &&
                      request.resource.data.email == resource.data.email &&
                      request.resource.data.createdAt == resource.data.createdAt &&
                      request.resource.data.updatedAt == request.time &&

                      isValidUserProfileOnCreate(request.auth.uid, request.resource.data) && // Validates the final state

                      isRoleChangeSafeForUpdate(request.resource.data.role, resource.data.role, request.auth.uid, resource.data.isSuperAdmin) &&
                      isSuperAdminChangeSafe(request.resource.data.isSuperAdmin, resource.data.isSuperAdmin, request.auth.uid) &&

                      request.resource.data.keys().hasOnly([
                           'uid', 'email', 'displayName', 'photoURL', 'role', 'isSuperAdmin', 'fullName', 'contactNumber',
                           'applicantCategory', 'currentStage', 'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness',
                           'teamMembers', 'enrollmentNumber', 'college', 'instituteName',
                           'createdAt', 'updatedAt', 'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid'
                      ]);
      allow delete: if isOwner(request.auth.uid) && resource.data.email != 'pranavrathi07@gmail.com'; // User can delete own, except primary super admin
    }

    // --- Idea Submissions ---
    match /ideas/{ideaId} {
      allow read: if isSignedIn(); // Basic read for all signed-in users, UI filters for relevance

      // User creating their own idea submission (typically via profile save)
      allow create: if isOwner(request.resource.data.userId) &&
                      isValidIdeaSubmissionOnCreateOrResubmit(request.resource.data.userId, request.resource.data, true, null) &&
                      request.resource.data.submittedAt == request.time &&
                      request.resource.data.updatedAt == request.time &&
                      request.resource.data.keys().hasOnly([
                        'userId', 'applicantDisplayName', 'applicantEmail', 'title', 'category', 'problem', 'solution', 'uniqueness',
                        'developmentStage', 'applicantType', 'teamMembers', 'structuredTeamMembers', 'teamMemberEmails', 'fileURL', 'fileName', 'studioLocation',
                        'status', 'programPhase', 'cohortId', 'phase2Marks', 'mentor',
                        'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                        'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt',
                        'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                        'submittedAt', 'updatedAt',
                        'totalFundingAllocated', 'sanction1Amount', 'sanction2Amount', 'sanction1DisbursedAt', 'sanction2DisbursedAt',
                        'sanction1Expenses', 'sanction2Expenses', 'beneficiaryName', 'beneficiaryAccountNo', 'beneficiaryBankName', 'beneficiaryIfscCode',
                        'sanction1AppliedForNext', 'sanction1UtilizationStatus', 'sanction1UtilizationRemarks', 'sanction1UtilizationReviewedBy', 'sanction1UtilizationReviewedAt',
                        'sanction2UtilizationStatus', 'sanction2UtilizationRemarks', 'sanction2UtilizationReviewedBy', 'sanction2UtilizationReviewedAt'
                      ]);

      // User updating their own idea submission (e.g., uploading PPT, team changes, funding updates)
      allow update: if isOwner(resource.data.userId) &&
                      isValidIdeaSubmissionOnCreateOrResubmit(request.resource.data.userId, request.resource.data, false, resource.data) &&
                      request.resource.data.submittedAt == resource.data.submittedAt && // submittedAt is immutable by user
                      request.resource.data.updatedAt == request.time &&
                      // User should not be able to change admin-set fields directly through their own update
                      request.resource.data.status == resource.data.status &&
                      request.resource.data.programPhase == resource.data.programPhase &&
                      request.resource.data.cohortId == resource.data.cohortId &&
                      request.resource.data.mentor == resource.data.mentor &&
                      request.resource.data.rejectionRemarks == resource.data.rejectionRemarks &&
                      request.resource.data.rejectedByUid == resource.data.rejectedByUid &&
                      request.resource.data.rejectedAt == resource.data.rejectedAt &&
                      request.resource.data.phase2Marks == resource.data.phase2Marks && // Marks are set by admins
                      // Funding allocation is admin-set
                      request.resource.data.totalFundingAllocated == resource.data.totalFundingAllocated &&
                      request.resource.data.sanction1Amount == resource.data.sanction1Amount &&
                      request.resource.data.sanction2Amount == resource.data.sanction2Amount &&
                      request.resource.data.sanction1DisbursedAt == resource.data.sanction1DisbursedAt &&
                      request.resource.data.sanction2DisbursedAt == resource.data.sanction2DisbursedAt &&
                      request.resource.data.sanction1UtilizationStatus == resource.data.sanction1UtilizationStatus &&
                      request.resource.data.sanction1UtilizationRemarks == resource.data.sanction1UtilizationRemarks &&
                      request.resource.data.sanction1UtilizationReviewedBy == resource.data.sanction1UtilizationReviewedBy &&
                      request.resource.data.sanction1UtilizationReviewedAt == resource.data.sanction1UtilizationReviewedAt &&
                      request.resource.data.sanction2UtilizationStatus == resource.data.sanction2UtilizationStatus &&
                      request.resource.data.sanction2UtilizationRemarks == resource.data.sanction2UtilizationRemarks &&
                      request.resource.data.sanction2UtilizationReviewedBy == resource.data.sanction2UtilizationReviewedBy &&
                      request.resource.data.sanction2UtilizationReviewedAt == resource.data.sanction2UtilizationReviewedAt &&

                      // User can update these specific fields if allowed by application logic
                      request.writeFields.hasOnly([
                        'updatedAt', 'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', // For PPT upload
                        'structuredTeamMembers', 'teamMemberEmails', // For team management by owner
                        'beneficiaryName', 'beneficiaryAccountNo', 'beneficiaryBankName', 'beneficiaryIfscCode', // For beneficiary details
                        'sanction1Expenses', 'sanction2Expenses', // For expense uploads
                        'sanction1AppliedForNext' // For applying for next sanction
                      ]);

      // Admin updating idea submission (status, phase, mentor, cohort, funding, marks, etc.)
      allow update: if isAdmin() &&
                      request.resource.data.userId == resource.data.userId && // userId cannot change
                      isValidIdeaSubmissionOnCreateOrResubmit(request.resource.data.userId, request.resource.data, false, resource.data) &&
                      request.resource.data.submittedAt == resource.data.submittedAt &&
                      request.resource.data.updatedAt == request.time &&
                      // Ensure admins are only changing allowed fields during specific admin operations
                      // This list should reflect all fields an admin might touch.
                      // The `hasOnly` check below is broad, specific admin functions should ensure they only modify relevant fields.
                      request.resource.data.keys().hasOnly([
                        'userId', 'applicantDisplayName', 'applicantEmail', 'title', 'category', 'problem', 'solution', 'uniqueness',
                        'developmentStage', 'applicantType', 'teamMembers', 'structuredTeamMembers', 'teamMemberEmails', 'fileURL', 'fileName', 'studioLocation',
                        'status', 'programPhase', 'cohortId', 'phase2Marks', 'mentor',
                        'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                        'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt',
                        'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                        'submittedAt', 'updatedAt', 'updatedByMentorAssignerUid', // if admin assigns mentor
                        'totalFundingAllocated', 'sanction1Amount', 'sanction2Amount', 'sanction1DisbursedAt', 'sanction2DisbursedAt',
                        'sanction1Expenses', 'sanction2Expenses', 'beneficiaryName', 'beneficiaryAccountNo', 'beneficiaryBankName', 'beneficiaryIfscCode',
                        'sanction1AppliedForNext', 'sanction1UtilizationStatus', 'sanction1UtilizationRemarks', 'sanction1UtilizationReviewedBy', 'sanction1UtilizationReviewedAt',
                        'sanction2UtilizationStatus', 'sanction2UtilizationRemarks', 'sanction2UtilizationReviewedBy', 'sanction2UtilizationReviewedAt'
                      ]);

      // No direct user deletion of ideas from client. Admins might archive.
      allow delete: if false;
    }

    // --- Announcements ---
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin(); // Only admins can manage announcements
    }

    // --- Cohorts ---
    match /cohorts/{cohortId} {
      allow read: if isSignedIn();
      allow create, update: if isAdmin();
      allow delete: if isAdmin() && resource.data.ideaIds.size() == 0; // Admin can delete only if no ideas are assigned
    }

    // --- System Settings ---
    match /systemSettings/config {
      allow read: if isSignedIn(); // All signed-in users might need to read some settings (e.g., maintenance mode)
      allow write: if isSuperAdmin(); // Only super admins can change system settings
    }

    // --- Activity Logs ---
    match /activityLogs/{logId} {
        allow read: if isAdmin(); // Admins can read logs
        allow create: if isSignedIn(); // System or users can create logs (e.g., on profile update, idea submission)
                                     // The `logUserActivity` function in backend/CF will be responsible for writing.
                                     // If called from client, it must be by an authenticated user.
        allow update, delete: if false; // Logs are immutable
    }
  }
}

    