
rules_version = '2';

function isAuth() {
  return request.auth != null;
}

function isOwner(userId) {
  return isAuth() && request.auth.uid == userId;
}

function isAdmin() {
  return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
}

service cloud.firestore {
  match /databases/{database}/documents {
    
    match /{document=**} {
      allow read, write: if false;
    }
    
    match /users/{userId} {
      allow read: if isAuth();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    match /ideas/{ideaId} {
      allow read: if isAuth();
      allow create: if isAuth();
      allow update: if isAuth() && (
        (isOwner(resource.data.userId) || isAdmin()) ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments', 'updatedAt'])
      );
    }
    
    match /announcements/{announcementId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    
    match /events/{eventId} {
      allow read: if isAuth();
      allow write: if isAdmin();
      allow update: if isAuth() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps', 'rsvpCount']);
    }

    match /cohorts/{cohortId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }

    match /notifications/{notificationId} {
      allow read, write, delete: if isOwner(resource.data.userId);
      allow create: if isAuth();
    }

    match /systemSettings/{docId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    
    match /activityLogs/{logId} {
      allow create: if isAuth();
      allow read: if isAdmin();
      allow update, delete: if false;
    }
  }
}
