
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.admin == true;
    }

    function isSuperAdminByEmail() {
      return request.auth.email == 'pranavrathi07@gmail.com';
    }

    function isVerifiedAdmin() {
      return isAdmin() || isSuperAdminByEmail();
    }

    function isChangingOwnRole(newData, oldData) {
      return newData.role != oldData.role || newData.isSuperAdmin != oldData.isSuperAdmin;
    }

    function isUpdatingOwnNonSensitiveProfileFields(changedKeys) {
      let allowedFields = [
        'fullName', 'contactNumber', 'applicantCategory', 'currentStage',
        'startupTitle', 'problemDefinition', 'solutionDescription', 'uniqueness',
        'enrollmentNumber', 'college', 'instituteName', 'photoURL', 'displayName',
        'updatedAt', 'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid'
        // 'teamMembers' was removed
      ];
      return changedKeys.hasOnly(allowedFields);
    }

    function isTargetPrimarySuperAdmin(targetUserId, targetUserData) {
      return targetUserData.email == 'pranavrathi07@gmail.com';
    }

    function areCriticalFieldsUnchangedForAdminUpdate(newData, oldData) {
      return newData.email == oldData.email &&
             newData.uid == oldData.uid &&
             newData.createdAt == oldData.createdAt;
    }

    function isValidUserData(data) {
      return data.uid is string &&
             data.email is string &&
             (data.role == 'STUDENT' || data.role == 'EXTERNAL_USER' || data.role == 'ADMIN_FACULTY') &&
             (data.fullName is string || data.fullName == null) && // Allow null from form, Firestore stores as null
             (data.contactNumber is string || data.contactNumber == null) &&
             ((data.isTeamMemberOnly == false &&
               (data.applicantCategory == 'PARUL_STUDENT' || data.applicantCategory == 'PARUL_STAFF' || data.applicantCategory == 'PARUL_ALUMNI' || data.applicantCategory == 'OTHERS' || data.applicantCategory == null) &&
               (data.currentStage == 'IDEA' || data.currentStage == 'PROTOTYPE_STAGE' || data.currentStage == 'STARTUP_STAGE' || data.currentStage == null) &&
               (data.startupTitle is string || data.startupTitle == null) &&
               (data.problemDefinition is string || data.problemDefinition == null) &&
               (data.solutionDescription is string || data.solutionDescription == null) &&
               (data.uniqueness is string || data.uniqueness == null)
             ) || data.isTeamMemberOnly == true) &&
             (data.enrollmentNumber is string || data.enrollmentNumber == null) &&
             (data.college is string || data.college == null) &&
             (data.instituteName is string || data.instituteName == null) &&
             data.isSuperAdmin is bool &&
             data.isTeamMemberOnly is bool &&
             (data.associatedIdeaId is string || data.associatedIdeaId == null) &&
             (data.associatedTeamLeaderUid is string || data.associatedTeamLeaderUid == null) &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }

    function isAllowedToUpdateTargetUser(targetUserId) {
      return isVerifiedAdmin() && request.auth.uid != targetUserId;
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isOwner(userId) || isVerifiedAdmin();
      allow create: if isSignedIn() &&
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email &&
                       isValidUserData(request.resource.data) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;

      allow update: if isSignedIn() && (
        // Case 1: User updates their own non-sensitive profile fields
        (isOwner(userId) &&
         !isChangingOwnRole(request.resource.data, resource.data) && // User cannot change their own role/superAdmin status
         isUpdatingOwnNonSensitiveProfileFields(request.resource.data.keys()) &&
         isValidUserData(request.resource.data) && // Ensure final state is valid
         areCriticalFieldsUnchangedForAdminUpdate(request.resource.data, resource.data) // Prevent changing UID, email, createdAt
        ) ||
        // Case 2: Admin updates another user's profile (role, superAdmin, or other fields)
        (isAllowedToUpdateTargetUser(userId) &&
         !isTargetPrimarySuperAdmin(userId, resource.data) && // Admin cannot modify the primary super admin
         areCriticalFieldsUnchangedForAdminUpdate(request.resource.data, resource.data) &&
         isValidUserData(request.resource.data) // Ensure final state is valid after admin update
        )
      );

      allow delete: if isSignedIn() && (
        isOwner(userId) && resource.data.email != 'pranavrathi07@gmail.com' // User can delete own, unless primary super admin
      ) || (
        isVerifiedAdmin() && // Admin or hardcoded super admin email
        resource.data.email != 'pranavrathi07@gmail.com' && // Cannot delete primary super admin
        request.auth.uid != userId // Admin cannot delete themselves via this path
      );
    }

    // Helper function for idea data validation
    function isValidIdeaData(data) {
      return data.userId is string &&
             data.title is string && data.title.size() > 0 &&
             data.problem is string && data.problem.size() > 0 &&
             data.solution is string && data.solution.size() > 0 &&
             data.uniqueness is string && data.uniqueness.size() > 0 &&
             (data.developmentStage == 'IDEA' || data.developmentStage == 'PROTOTYPE_STAGE' || data.developmentStage == 'STARTUP_STAGE') &&
             (data.applicantType == 'PARUL_STUDENT' || data.applicantType == 'PARUL_STAFF' || data.applicantType == 'PARUL_ALUMNI' || data.applicantType == 'OTHERS') &&
             (data.status == 'SUBMITTED' || data.status == 'UNDER_REVIEW' || data.status == 'IN_EVALUATION' || data.status == 'SELECTED' || data.status == 'NOT_SELECTED' || data.status == 'ARCHIVED_BY_ADMIN') &&
             (data.programPhase == 'PHASE_1' || data.programPhase == 'PHASE_2' || data.programPhase == 'COHORT' || data.programPhase == 'INCUBATED' || data.programPhase == null) &&
             (data.cohortId is string || data.cohortId == null) &&
             (data.mentor is string || data.mentor == null) && // MentorName type is string
             data.isOutlineAIGenerated is bool &&
             data.applicantDisplayName is string &&
             data.applicantEmail is string &&
             (data.teamMembers is string || data.teamMembers == null) && // Unstructured team members
             (data.structuredTeamMembers is list) && // Must be a list, can be empty
             (data.teamMemberEmails is list) && // Must be a list, can be empty
             (data.phase2Marks is map) && // Must be a map, can be empty
             (data.fundingSource == 'SSIP_PIET' || data.fundingSource == 'SSIP_PARUL_UNIVERSITY' || data.fundingSource == 'SSIP_PIMSR' || data.fundingSource == 'SSIP_PHYSIOTHERAPY' || data.fundingSource == null) &&
             (data.totalFundingAllocated is number || data.totalFundingAllocated == null) &&
             (data.sanction1Amount is number || data.sanction1Amount == null) &&
             (data.sanction2Amount is number || data.sanction2Amount == null) &&
             (data.sanction1DisbursedAt is timestamp || data.sanction1DisbursedAt == null) &&
             (data.sanction2DisbursedAt is timestamp || data.sanction2DisbursedAt == null) &&
             (data.sanction1Expenses is list) &&
             (data.sanction2Expenses is list) &&
             (data.beneficiaryName is string || data.beneficiaryName == null) &&
             (data.beneficiaryAccountNo is string || data.beneficiaryAccountNo == null) &&
             (data.beneficiaryBankName is string || data.beneficiaryBankName == null) &&
             (data.beneficiaryIfscCode is string || data.beneficiaryIfscCode == null) &&
             (data.beneficiaryAccountType == 'SAVINGS' || data.beneficiaryAccountType == 'CURRENT' || data.beneficiaryAccountType == null) &&
             (data.beneficiaryCity is string || data.beneficiaryCity == null) &&
             (data.beneficiaryBranchName is string || data.beneficiaryBranchName == null) &&
             (data.sanction1AppliedForNext is bool) &&
             (data.sanction1UtilizationStatus == 'PENDING' || data.sanction1UtilizationStatus == 'APPROVED' || data.sanction1UtilizationStatus == 'REJECTED' || data.sanction1UtilizationStatus == 'NOT_APPLICABLE' || data.sanction1UtilizationStatus == null) &&
             (data.sanction1UtilizationRemarks is string || data.sanction1UtilizationRemarks == null) &&
             (data.sanction1UtilizationReviewedBy is string || data.sanction1UtilizationReviewedBy == null) &&
             (data.sanction1UtilizationReviewedAt is timestamp || data.sanction1UtilizationReviewedAt == null) &&
             (data.sanction2UtilizationStatus == 'PENDING' || data.sanction2UtilizationStatus == 'APPROVED' || data.sanction2UtilizationStatus == 'REJECTED' || data.sanction2UtilizationStatus == 'NOT_APPLICABLE' || data.sanction2UtilizationStatus == null) &&
             (data.sanction2UtilizationRemarks is string || data.sanction2UtilizationRemarks == null) &&
             (data.sanction2UtilizationReviewedBy is string || data.sanction2UtilizationReviewedBy == null) &&
             (data.sanction2UtilizationReviewedAt is timestamp || data.sanction2UtilizationReviewedAt == null) &&
             data.submittedAt is timestamp &&
             data.updatedAt is timestamp &&
             data.createdAt is timestamp;
    }

    function isValidInitialOrResubmittedIdeaState(data) {
      return data.status == 'SUBMITTED' &&
             data.programPhase == null &&
             data.cohortId == null &&
             data.mentor == null &&
             data.phase2Marks.size() == 0 &&
             data.isOutlineAIGenerated == false &&
             data.rejectionRemarks == null &&
             data.rejectedByUid == null &&
             data.rejectedAt == null &&
             data.phase2PptUrl == null &&
             data.phase2PptFileName == null &&
             data.phase2PptUploadedAt == null &&
             data.fundingSource == null &&
             data.totalFundingAllocated == null &&
             data.sanction1Amount == null &&
             data.sanction2Amount == null &&
             data.sanction1DisbursedAt == null &&
             data.sanction2DisbursedAt == null &&
             data.sanction1Expenses.size() == 0 &&
             data.sanction2Expenses.size() == 0 &&
             data.beneficiaryName == null &&
             data.beneficiaryAccountNo == null &&
             data.beneficiaryBankName == null &&
             data.beneficiaryIfscCode == null &&
             data.beneficiaryAccountType == null &&
             data.beneficiaryCity == null &&
             data.beneficiaryBranchName == null &&
             data.sanction1AppliedForNext == false &&
             data.sanction1UtilizationStatus == 'NOT_APPLICABLE' &&
             data.sanction2UtilizationStatus == 'NOT_APPLICABLE';
    }

    function isUpdatingOnlyAllowedBeneficiaryFields(changedKeys) {
      let allowedFields = [
        'beneficiaryName', 'beneficiaryAccountNo', 'beneficiaryBankName',
        'beneficiaryIfscCode', 'beneficiaryAccountType',
        'beneficiaryCity', 'beneficiaryBranchName', 'updatedAt'
      ];
      return changedKeys.hasOnly(allowedFields);
    }

    function isUpdatingOnlyAllowedExpenseFields(changedKeys, sanctionNumber) {
        let baseAllowed = ['updatedAt'];
        if (sanctionNumber == 1) {
            return changedKeys.hasOnly(baseAllowed.concat(['sanction1Expenses']));
        } else if (sanctionNumber == 2) {
            return changedKeys.hasOnly(baseAllowed.concat(['sanction2Expenses']));
        }
        return false;
    }
    
    function isIdeaIncubated(ideaData) {
        return ideaData.programPhase == 'INCUBATED';
    }

    // Idea Submissions
    match /ideas/{ideaId} {
      allow read: if isSignedIn(); // Allow any signed-in user to read idea details (e.g., team members)

      allow create: if isSignedIn() &&
                       request.resource.data.userId == request.auth.uid && // User can only create ideas for themselves
                       isValidIdeaData(request.resource.data) &&
                       isValidInitialOrResubmittedIdeaState(request.resource.data) && // Ensures initial state is clean
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.submittedAt == request.time &&
                       request.resource.data.updatedAt == request.time;

      allow update: if isSignedIn() && isValidIdeaData(request.resource.data) && (
        // Path 1: Owner updates their own idea (e.g., PPT upload, team members, resubmission from ARCHIVED)
        (isOwner(request.resource.data.userId) &&
          (
            // PPT upload specific fields + updatedAt
            (request.resource.data.keys().hasOnly(['phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', 'updatedAt']) &&
             request.resource.data.phase2PptUrl is string && request.resource.data.phase2PptFileName is string && request.resource.data.phase2PptUploadedAt == request.time
            ) ||
            // AI Outline generation status + updatedAt
            (request.resource.data.keys().hasOnly(['isOutlineAIGenerated', 'updatedAt']) &&
             request.resource.data.isOutlineAIGenerated is bool
            ) ||
            // Beneficiary details update
            (isIdeaIncubated(resource.data) && // Only if incubated
             isUpdatingOnlyAllowedBeneficiaryFields(request.resource.data.keys()) &&
             request.resource.data.beneficiaryName is string && request.resource.data.beneficiaryName.size() > 0 &&
             request.resource.data.beneficiaryAccountNo is string && request.resource.data.beneficiaryAccountNo.size() > 0 &&
             request.resource.data.beneficiaryBankName is string && request.resource.data.beneficiaryBankName.size() > 0 &&
             request.resource.data.beneficiaryIfscCode is string && request.resource.data.beneficiaryIfscCode.size() == 11 &&
             (request.resource.data.beneficiaryAccountType == 'SAVINGS' || request.resource.data.beneficiaryAccountType == 'CURRENT') &&
             request.resource.data.beneficiaryCity is string && request.resource.data.beneficiaryCity.size() > 0 &&
             request.resource.data.beneficiaryBranchName is string && request.resource.data.beneficiaryBranchName.size() > 0
            ) ||
            // Expense upload (Sanction 1)
            (isIdeaIncubated(resource.data) && resource.data.sanction1DisbursedAt != null &&
             isUpdatingOnlyAllowedExpenseFields(request.resource.data.keys(), 1) &&
             request.resource.data.sanction1Expenses is list && request.resource.data.sanction1Expenses.size() > resource.data.sanction1Expenses.size()
            ) ||
             // Expense upload (Sanction 2)
            (isIdeaIncubated(resource.data) && resource.data.sanction2DisbursedAt != null &&
             isUpdatingOnlyAllowedExpenseFields(request.resource.data.keys(), 2) &&
             request.resource.data.sanction2Expenses is list && request.resource.data.sanction2Expenses.size() > resource.data.sanction2Expenses.size()
            ) ||
            // Apply for next sanction (Sanction 1 to Sanction 2)
            (isIdeaIncubated(resource.data) && resource.data.sanction1UtilizationStatus == 'APPROVED' &&
             request.resource.data.keys().hasOnly(['sanction1AppliedForNext', 'sanction1UtilizationStatus', 'updatedAt']) && // User can only set applied and pending status
             request.resource.data.sanction1AppliedForNext == true &&
             request.resource.data.sanction1UtilizationStatus == 'PENDING'
            ) ||
            // Team member management by owner (structuredTeamMembers, teamMemberEmails)
            (
              (request.resource.data.keys().hasAll(['structuredTeamMembers', 'teamMemberEmails', 'updatedAt']) && request.resource.data.keys().size() == 3) || // Add/remove
              (request.resource.data.keys().hasAll(['structuredTeamMembers', 'updatedAt']) && request.resource.data.keys().size() == 2 && request.resource.data.teamMemberEmails == resource.data.teamMemberEmails ) || // Update existing (email not changed)
              (request.resource.data.keys().hasAll(['teamMemberEmails', 'updatedAt']) && request.resource.data.keys().size() == 2 && request.resource.data.structuredTeamMembers == resource.data.structuredTeamMembers) // This case is less likely but for completeness
            ) ||
            // Resubmitting an idea that was ARCHIVED_BY_ADMIN (owner updates profile, which triggers idea update)
            (resource.data.status == 'ARCHIVED_BY_ADMIN' &&
             isValidInitialOrResubmittedIdeaState(request.resource.data) && // Should be reset to a clean submitted state
             request.resource.data.userId == resource.data.userId && // Owner must match
             request.resource.data.title is string && request.resource.data.title.size() > 0 &&
             request.resource.data.problem is string && request.resource.data.problem.size() > 0 &&
             request.resource.data.solution is string && request.resource.data.solution.size() > 0 &&
             request.resource.data.uniqueness is string && request.resource.data.uniqueness.size() > 0 &&
             (request.resource.data.developmentStage == 'IDEA' || request.resource.data.developmentStage == 'PROTOTYPE_STAGE' || request.resource.data.developmentStage == 'STARTUP_STAGE') &&
             (request.resource.data.applicantType == 'PARUL_STUDENT' || request.resource.data.applicantType == 'PARUL_STAFF' || request.resource.data.applicantType == 'PARUL_ALUMNI' || request.resource.data.applicantType == 'OTHERS') &&
             // All other idea-specific fields should be as per isValidInitialOrResubmittedIdeaState
             request.resource.data.submittedAt == resource.data.submittedAt && // Original submission date preserved
             request.resource.data.createdAt == resource.data.createdAt // Original creation date preserved
            )
          )
        ) ||
        // Path 2: Admin updates the idea (status, phase, mentor, cohort, marks, rejection, funding)
        (isVerifiedAdmin() &&
          request.auth.uid != request.resource.data.userId && // Admin cannot update their own idea via this admin path
          // Ensure admin is only changing allowed fields
          (
            // Status, Phase, Next Phase Details, Rejection Remarks, Cohort ID, Mentor, Funding details (by super admin)
            (request.resource.data.keys().hasAny([
                'status', 'programPhase', 'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime',
                'nextPhaseVenue', 'nextPhaseGuidelines', 'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                'cohortId', 'mentor', 'phase2Marks',
                'fundingSource', 'totalFundingAllocated', 'sanction1Amount', 'sanction2Amount',
                'sanction1DisbursedAt', 'sanction2DisbursedAt',
                'sanction1UtilizationStatus', 'sanction1UtilizationRemarks', 'sanction1UtilizationReviewedBy', 'sanction1UtilizationReviewedAt',
                'sanction2UtilizationStatus', 'sanction2UtilizationRemarks', 'sanction2UtilizationReviewedBy', 'sanction2UtilizationReviewedAt',
                'updatedAt'
             ]) &&
             // Critical fields that user owns or are system-set must not be changed by admin here
             request.resource.data.userId == resource.data.userId &&
             request.resource.data.title == resource.data.title &&
             request.resource.data.problem == resource.data.problem &&
             request.resource.data.solution == resource.data.solution &&
             request.resource.data.uniqueness == resource.data.uniqueness &&
             request.resource.data.developmentStage == resource.data.developmentStage &&
             request.resource.data.applicantType == resource.data.applicantType &&
             request.resource.data.submittedAt == resource.data.submittedAt &&
             request.resource.data.createdAt == resource.data.createdAt &&
             request.resource.data.applicantDisplayName == resource.data.applicantDisplayName &&
             request.resource.data.applicantEmail == resource.data.applicantEmail &&
             request.resource.data.structuredTeamMembers == resource.data.structuredTeamMembers &&
             request.resource.data.teamMemberEmails == resource.data.teamMemberEmails &&
             request.resource.data.fileURL == resource.data.fileURL &&
             request.resource.data.fileName == resource.data.fileName &&
             request.resource.data.studioLocation == resource.data.studioLocation &&
             request.resource.data.phase2PptUrl == resource.data.phase2PptUrl &&
             request.resource.data.phase2PptFileName == resource.data.phase2PptFileName &&
             request.resource.data.phase2PptUploadedAt == resource.data.phase2PptUploadedAt &&
             request.resource.data.isOutlineAIGenerated == resource.data.isOutlineAIGenerated &&
             request.resource.data.beneficiaryName == resource.data.beneficiaryName &&
             request.resource.data.beneficiaryAccountNo == resource.data.beneficiaryAccountNo &&
             request.resource.data.beneficiaryBankName == resource.data.beneficiaryBankName &&
             request.resource.data.beneficiaryIfscCode == resource.data.beneficiaryIfscCode &&
             request.resource.data.beneficiaryAccountType == resource.data.beneficiaryAccountType &&
             request.resource.data.beneficiaryCity == resource.data.beneficiaryCity &&
             request.resource.data.beneficiaryBranchName == resource.data.beneficiaryBranchName &&
             request.resource.data.sanction1Expenses == resource.data.sanction1Expenses &&
             request.resource.data.sanction2Expenses == resource.data.sanction2Expenses &&
             request.resource.data.sanction1AppliedForNext == resource.data.sanction1AppliedForNext &&
             // Super admin specific fields for funding allocation
             (
                (!request.resource.data.keys().hasAny(['fundingSource', 'totalFundingAllocated', 'sanction1Amount', 'sanction2Amount', 'sanction1DisbursedAt', 'sanction2DisbursedAt', 'sanction1UtilizationStatus', 'sanction1UtilizationRemarks', 'sanction1UtilizationReviewedBy', 'sanction1UtilizationReviewedAt', 'sanction2UtilizationStatus', 'sanction2UtilizationRemarks', 'sanction2UtilizationReviewedBy', 'sanction2UtilizationReviewedAt'])) || // If not changing funding, anyone admin can.
                (request.auth.token.admin == true && request.auth.token.isSuperAdmin == true) // Only super admin can change these funding fields
             )
            )
          )
        )
      );
      allow delete: false; // Ideas are archived, not deleted directly
    }

    // Announcements
    match /announcements/{announcementId} {
      allow read: if isSignedIn(); // All signed-in users can read announcements
      allow create, update, delete: if isVerifiedAdmin(); // Only admins can manage
    }

    // Cohorts
    match /cohorts/{cohortId} {
      allow read: if isSignedIn(); // All signed-in users can potentially see cohort info
      allow create, update, delete: if isVerifiedAdmin(); // Only admins can manage cohorts
    }

    // System Settings
    match /systemSettings/config {
      allow read: if isSignedIn(); // All signed-in users can read system settings
      allow create, update: if isVerifiedAdmin(); // Only admins can change
    }

    // Activity Logs
    match /activityLogs/{logId} {
      allow read: if isVerifiedAdmin();
      allow create: if isSignedIn(); // Any authenticated user can write to their own activity log implicitly via server-side logic
      allow update, delete: if false; // Logs are immutable
    }
  }
}
