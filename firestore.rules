
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSuperAdminUser() {
      return request.auth.token.isSuperAdmin == true || request.auth.email == 'pranavrathi07@gmail.com';
    }

    function isAdminUser() {
      return request.auth.token.role == 'ADMIN_FACULTY' || isSuperAdminUser();
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // User Profile Rules
    match /users/{userId} {
      // Anyone can read a user's profile, but super admins have full read access.
      allow read: if request.auth != null || isSuperAdminUser();

      // Users can create their own profile.
      allow create: if isOwner(userId);

      // Defines what fields a user can update on their own profile.
      function isOwnProfileUpdateAllowed(existingData) {
        let changedKeys = request.resource.data.diff(existingData).affectedKeys();
        let allowedUserFields = [
          'updatedAt', 'fullName', 'contactNumber', 'enrollmentNumber', 'college', 'instituteName'
        ];
        let allowedIdeaOwnerFields = allowedUserFields.concat([
          'applicantCategory', 'currentStage', 'startupTitle', 'problemDefinition',
          'solutionDescription', 'uniqueness', 'teamMembers'
        ]);

        // Core fields that should never be changed by the user.
        let immutableFieldsUnchanged =
          request.resource.data.uid == existingData.uid &&
          request.resource.data.email == existingData.email &&
          request.resource.data.role == existingData.role &&
          request.resource.data.isSuperAdmin == existingData.isSuperAdmin &&
          request.resource.data.createdAt == existingData.createdAt &&
          request.resource.data.isTeamMemberOnly == existingData.isTeamMemberOnly &&
          request.resource.data.associatedIdeaId == existingData.associatedIdeaId &&
          request.resource.data.associatedTeamLeaderUid == existingData.associatedTeamLeaderUid;

        if (existingData.isTeamMemberOnly == true) {
          // Team members can only update their personal/academic info.
          return changedKeys.hasOnly(allowedUserFields) && immutableFieldsUnchanged;
        } else {
          // Idea owners can update their personal, academic, and idea info.
          return changedKeys.hasOnly(allowedIdeaOwnerFields) && immutableFieldsUnchanged;
        }
      }

      // Defines what fields an admin can update on any user's profile.
      function isAdminUpdatingAllowedFields() {
        let allowedAdminFields = [
          'updatedAt', 'fullName', 'contactNumber', 'enrollmentNumber', 'college', 'instituteName',
          'applicantCategory', 'currentStage', 'startupTitle', 'problemDefinition',
          'solutionDescription', 'uniqueness', 'teamMembers',
          'role', 'isSuperAdmin' // Admins can change roles.
        ];
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedAdminFields);
      }

      // Update is allowed if it's a super admin, a regular admin changing allowed fields, or the user updating their own allowed fields.
      allow update: if isSuperAdminUser()
                      || (isAdminUser() && isAdminUpdatingAllowedFields())
                      || (isOwner(userId) && isOwnProfileUpdateAllowed(resource.data));

      // Only an admin/super admin can delete a user's profile document.
      allow delete: if isAdminUser();
    }

    // Idea Submission Rules
    match /ideas/{ideaId} {

      function isIdeaDataInternallyConsistent(data) {
        return data.userId is string &&
               data.title is string && data.title.size() > 0 &&
               data.problem is string &&
               data.solution is string &&
               data.uniqueness is string &&
               data.developmentStage is string &&
               data.applicantType is string &&
               data.status is string &&
               data.submittedAt is timestamp &&
               data.createdAt is timestamp &&
               data.updatedAt is timestamp &&
               data.teamMemberEmails is list &&
               data.structuredTeamMembers is list;
      }
      
      function isValidIdeaData(data) {
         return isIdeaDataInternallyConsistent(data) &&
                (data.programPhase == null || data.programPhase is string) &&
                (data.cohortId == null || data.cohortId is string) &&
                (data.mentor == null || data.mentor is string) &&
                (data.phase2Marks == null || data.phase2Marks is map) &&
                (data.isOutlineAIGenerated == false || data.isOutlineAIGenerated == true);
      }
      
      function isValidInitialOrResubmittedIdeaState(data) {
        return isIdeaDataInternallyConsistent(data) &&
               data.programPhase == null &&
               data.cohortId == null &&
               data.mentor == null &&
               data.phase2Marks == {} &&
               data.isOutlineAIGenerated == false &&
               data.rejectionRemarks == null &&
               data.totalFundingAllocated == null &&
               data.sanction1Amount == null;
      }

      function allowedOwnerFieldsToChange() {
        return ['updatedAt', 'teamMembers', 'structuredTeamMembers', 'teamMemberEmails', 'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', 'beneficiaryName', 'beneficiaryAccountNo', 'beneficiaryBankName', 'beneficiaryIfscCode', 'beneficiaryAccountType', 'beneficiaryCity', 'beneficiaryBranchName', 'sanction1Expenses', 'sanction2Expenses', 'sanction1AppliedForNext', 'isOutlineAIGenerated'];
      }

      function allowedAdminFieldsToChange() {
        return ['updatedAt', 'status', 'programPhase', 'cohortId', 'mentor', 'phase2Marks', 'rejectionRemarks', 'rejectedByUid', 'rejectedAt', 'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines', 'fundingSource', 'totalFundingAllocated', 'sanction1Amount', 'sanction2Amount', 'sanction1DisbursedAt', 'sanction2DisbursedAt', 'sanction1UtilizationStatus', 'sanction1UtilizationRemarks', 'sanction1UtilizationReviewedBy', 'sanction1UtilizationReviewedAt', 'sanction2UtilizationStatus', 'sanction2UtilizationRemarks', 'sanction2UtilizationReviewedBy', 'sanction2UtilizationReviewedAt', 'sanction1Expenses', 'sanction2Expenses', 'beneficiaryName', 'beneficiaryAccountNo', 'beneficiaryBankName', 'beneficiaryIfscCode', 'beneficiaryAccountType', 'beneficiaryCity', 'beneficiaryBranchName', 'sanction1AppliedForNext', 'isOutlineAIGenerated'];
      }
      
      function isOwnerMakingAllowedChanges() {
        let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
        return isOwner(resource.data.userId) && changedKeys.hasOnly(allowedOwnerFieldsToChange());
      }
      
      function isAdminUpdatingAllowedFields() {
        let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
        return isAdminUser() && changedKeys.hasOnly(allowedAdminFieldsToChange());
      }

      // Read is allowed by the owner or any admin.
      allow read: if isOwner(resource.data.userId) || isAdminUser();

      // Create is allowed if the user is the owner and the initial data state is valid. Super admins can also create.
      allow create: if isSuperAdminUser() || (isOwner(request.resource.data.userId) && isValidInitialOrResubmittedIdeaState(request.resource.data));

      // Update is allowed for super admins, or for owners/admins changing only their permitted fields, while ensuring data consistency.
      allow update: if (isSuperAdminUser() || isOwnerMakingAllowedChanges() || isAdminUpdatingAllowedFields())
                      && isValidIdeaData(request.resource.data)
                      && request.resource.data.userId == resource.data.userId
                      && request.resource.data.createdAt.toMillis() == resource.data.createdAt.toMillis()
                      && request.resource.data.submittedAt.toMillis() == resource.data.submittedAt.toMillis();
      
      // Delete is restricted to super admins.
      allow delete: if isSuperAdminUser();
    }

    // Announcement Rules
    match /announcements/{announcementId} {
      allow read;
      allow create, update, delete: if isAdminUser();
    }

    // Cohort Rules
    match /cohorts/{cohortId} {
      allow read;
      allow create, update, delete: if isAdminUser();
    }
    
    // Event Rules
    match /events/{eventId} {
      allow read;
      
      function isValidEventData(data) {
        return data.title is string && data.title.size() > 0 &&
               data.description is string &&
               data.startDateTime is timestamp &&
               data.endDateTime is timestamp &&
               data.endDateTime > data.startDateTime &&
               data.location is string && data.location.size() > 0 &&
               data.category is string &&
               data.rsvpCount is number && data.rsvpCount >= 0 &&
               data.rsvps is list &&
               data.createdByUid is string;
      }
      
      allow create: if isSuperAdminUser() || (isAdminUser() && isValidEventData(request.resource.data));
      allow update: if isSuperAdminUser() || isAdminUser() || (request.auth != null && request.resource.data.rsvps.hasAny([request.auth.uid]));
      allow delete: if isAdminUser();
    }
    
    // Notification Rules
    match /notifications/{notificationId} {
       allow read, update: if isOwner(resource.data.userId) || isSuperAdminUser();
       // Notifications are created by admins for other users.
       allow create: if isAdminUser();
    }

    // Activity Log Rules
    match /activityLogs/{logId} {
      allow read: if isAdminUser();
      allow create: if request.auth != null;
    }

    // System Settings Rules
    match /systemSettings/config {
      allow read;
      allow write: if isAdminUser();
    }
  }
}
