
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the currently authenticated user is the owner of the resource
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if the user has an 'ADMIN_FACULTY' role
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Helper function to check if the user is a Super Admin (builds on isAdmin)
    function isSuperAdmin() {
      return isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    // Helper: Validates common profile fields required for all users.
    function hasRequiredCommonProfileFields(profileData) {
      return profileData.fullName is string && profileData.fullName.size() > 0 &&
             profileData.contactNumber is string && profileData.contactNumber.size() > 0;
    }

    // Helper: Validates fields specific to an idea owner.
    function hasRequiredIdeaOwnerFields(profileData) {
      return profileData.startupTitle is string && profileData.startupTitle.size() > 0 &&
             profileData.problemDefinition is string && profileData.problemDefinition.size() > 0 &&
             profileData.solutionDescription is string && profileData.solutionDescription.size() > 0 &&
             profileData.uniqueness is string && profileData.uniqueness.size() > 0 &&
             profileData.applicantCategory is string && profileData.applicantCategory.size() > 0 &&
             profileData.currentStage is string && profileData.currentStage.size() > 0 &&
             (profileData.teamMembers is string) && // Can be empty string
             // Ensure team member specific association fields are null or absent
             (!('associatedIdeaId' in profileData) || profileData.associatedIdeaId == null) &&
             (!('associatedTeamLeaderUid' in profileData) || profileData.associatedTeamLeaderUid == null);
    }

    // Helper: Validates fields specific to a team member profile.
    function hasRequiredTeamMemberAssociationFields(profileData) {
      return profileData.associatedIdeaId is string && profileData.associatedIdeaId.size() > 0 &&
             profileData.associatedTeamLeaderUid is string && profileData.associatedTeamLeaderUid.size() > 0 &&
             // Ensure idea owner specific fields are null or absent
             (!('startupTitle' in profileData) || profileData.startupTitle == null) &&
             (!('applicantCategory' in profileData) || profileData.applicantCategory == null);
    }

    // Validates the profile data being created.
    function isCreatingOwnValidProfile(userId, profileData) {
      return isUser(userId) &&
             profileData.uid == userId &&
             (profileData.email == request.auth.token.email || profileData.email == "pranavrathi07@gmail.com") &&
             (profileData.role != 'ADMIN_FACULTY' || profileData.email == "pranavrathi07@gmail.com") &&
             (profileData.isSuperAdmin == false || profileData.email == "pranavrathi07@gmail.com") &&
             hasRequiredCommonProfileFields(profileData) &&
             (
               ( ('isTeamMemberOnly' in profileData && profileData.isTeamMemberOnly == true) && hasRequiredTeamMemberAssociationFields(profileData) ) ||
               ( (!('isTeamMemberOnly' in profileData) || profileData.isTeamMemberOnly == false) && hasRequiredIdeaOwnerFields(profileData) )
             );
    }

    // Validates fields a user can update on their own profile.
    function isUserUpdatingOwnValidProfileFields(userId) {
      let disallowedKeys = [
        'uid', 'email', 'role', 'isSuperAdmin', 'createdAt',
        'isTeamMemberOnly', 'associatedIdeaId', 'associatedTeamLeaderUid'
      ];
      return isUser(userId) &&
             // User cannot change critical fields.
             !request.resource.data.diff(resource.data).affectedKeys().hasAny(disallowedKeys) &&
             // If they are an idea owner, ensure they are not trying to set team member association fields
             ( ( (!('isTeamMemberOnly' in resource.data) || resource.data.isTeamMemberOnly == false) &&
                 (!('associatedIdeaId' in request.resource.data) || request.resource.data.associatedIdeaId == null) &&
                 (!('associatedTeamLeaderUid' in request.resource.data) || request.resource.data.associatedTeamLeaderUid == null)
               ) ||
             // If they are a team member, ensure they are not trying to set idea owner fields
               ( ('isTeamMemberOnly' in resource.data && resource.data.isTeamMemberOnly == true) &&
                 (!('startupTitle' in request.resource.data) || request.resource.data.startupTitle == null) &&
                 (!('applicantCategory' in request.resource.data) || request.resource.data.applicantCategory == null)
               )
             );
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isAuthenticated(); // Simplified for now, was isUser(userId) || isAdmin()

      allow create: if isCreatingOwnValidProfile(userId, request.resource.data);

      allow update: if (isAdmin() &&
                        // Admin cannot change primary super admin's role away from ADMIN_FACULTY or isSuperAdmin from true.
                        (resource.data.email != "pranavrathi07@gmail.com" ||
                         (request.resource.data.role == 'ADMIN_FACULTY' && request.resource.data.isSuperAdmin == true)
                        ) &&
                        // Admin cannot change uid or email
                        request.resource.data.uid == resource.data.uid &&
                        request.resource.data.email == resource.data.email
                       ) ||
                     isUserUpdatingOwnValidProfileFields(userId);

      allow delete: if (isUser(userId) && resource.data.email != "pranavrathi07@gmail.com") || // User can delete own, except primary super admin
                       (isAdmin() && resource.data.email != "pranavrathi07@gmail.com"); // Admin can delete others, except primary super admin
    }

    // Idea Submissions
    match /ideas/{ideaId} {
      allow read: if isAuthenticated() &&
                     (isUser(resource.data.userId) || // Owner
                      (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails) || // Team Member
                      isAdmin() // Admin
                     );

      allow create: if isAuthenticated() &&
                      isUser(request.resource.data.userId) &&
                      // Ensure idea-owner specific fields are present for creation
                      request.resource.data.title is string && request.resource.data.title.size() > 0 &&
                      request.resource.data.problem is string && request.resource.data.problem.size() > 0 &&
                      request.resource.data.solution is string && request.resource.data.solution.size() > 0 &&
                      request.resource.data.uniqueness is string && request.resource.data.uniqueness.size() > 0 &&
                      request.resource.data.developmentStage is string && request.resource.data.developmentStage.size() > 0 &&
                      request.resource.data.applicantType is string && request.resource.data.applicantType.size() > 0;


      allow update: if isAuthenticated() &&
                     (
                       // Admin can update any field except userId (owner)
                       (isAdmin() && request.resource.data.userId == resource.data.userId) ||
                       // Idea owner can update their idea (specific fields restricted)
                       (isUser(resource.data.userId) &&
                        !request.resource.data.diff(resource.data).affectedKeys().hasAny([
                            'status', 'programPhase', 'phase2Marks',
                            'rejectionRemarks', 'rejectedByUid', 'rejectedAt',
                            'nextPhaseDate', 'nextPhaseStartTime', 'nextPhaseEndTime', 'nextPhaseVenue', 'nextPhaseGuidelines',
                            'userId' // Owner cannot change the userId (owner) of the idea
                          ])
                       ) ||
                       // Team member can update their specific details within the structuredTeamMembers array
                       ( (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails) &&
                         request.writeFields.hasOnly(['structuredTeamMembers', 'updatedAt']) && // Only these top-level fields
                         request.resource.data.structuredTeamMembers.size() == resource.data.structuredTeamMembers.size() && // Array size must not change
                         request.resource.data.userId == resource.data.userId && // Cannot change owner
                         request.resource.data.status == resource.data.status && // Cannot change status
                         request.resource.data.programPhase == resource.data.programPhase && // Cannot change phase
                         request.resource.data.teamMemberEmails.toSet().difference(resource.data.teamMemberEmails.toSet()).size() == 0 && // Team member email list cannot change
                         request.resource.data.teamMemberEmails.toSet().difference(request.resource.data.teamMemberEmails.toSet()).size() == 0 // (ensuring both ways)
                         // More granular check for specific member update is complex here; client must form the array correctly.
                       )
                     );

      allow delete: if isAuthenticated() && (isUser(resource.data.userId) || isAdmin());
    }

    // Announcements
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // System Settings (single document 'config')
    match /systemSettings/config {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Activity Logs
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      // User can create their own activity log (actorUid must match their auth.uid)
      // or an admin can create logs (e.g., for actions taken on behalf of a user or system events)
      allow create: if isAuthenticated() &&
                       (isUser(request.resource.data.actorUid) || isAdmin());
      // No updates or deletes for logs for immutability
      allow update, delete: if false;
    }
  }
}

    