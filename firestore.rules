
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isUserProfileAdmin() {
      return isSignedIn() && getRole() == 'ADMIN_FACULTY';
    }

    function isUserProfileSuperAdmin() {
      return isUserProfileAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    function isMentorEmail(email) {
      let mentorEmails = [
        'prashant.khanna8747@paruluniversity.ac.in',
        'riddhi.bagha29080@paruluniversity.ac.in',
        'nikhil.jumade24167@paruluniversity.ac.in',
        'jay.sudani@paruluniversity.ac.in',
        'hardik.kharva2899@paruluniversity.ac.in',
        'sonal.sudani23321@paruluniversity.ac.in',
        'panchamkumar.baraiya28771@paruluniversity.ac.in',
        'juned.shaikh32161@paruluniversity.ac.in'
      ];
      return email in mentorEmails;
    }

    // --- Profile Creation Validation Helpers ---
    function commonCreateValidations(userId, req, res) {
      return req.auth.uid == userId &&
             res.data.uid == userId &&
             res.data.email == req.auth.token.email &&
             (res.data.role == 'STUDENT' || res.data.role == 'EXTERNAL_USER' || res.data.role == 'ADMIN_FACULTY') &&
             (res.data.isSuperAdmin == false || (res.data.isSuperAdmin == true && res.data.email == 'pranavrathi07@gmail.com')) &&
             res.data.fullName is string && res.data.fullName.size() > 0 &&
             res.data.contactNumber is string && res.data.contactNumber.size() > 0 &&
             res.data.createdAt == request.time &&
             res.data.updatedAt == request.time;
    }

    function teamMemberOnlyCreateValidations(res) {
      return res.data.isTeamMemberOnly == true &&
             res.data.associatedIdeaId is string && res.data.associatedIdeaId.size() > 0 &&
             res.data.associatedTeamLeaderUid is string && res.data.associatedTeamLeaderUid.size() > 0 &&
             res.data.startupTitle == null &&
             res.data.problemDefinition == null &&
             res.data.solutionDescription == null &&
             res.data.uniqueness == null &&
             res.data.applicantCategory == null &&
             res.data.currentStage == null &&
             res.data.teamMembers == null;
    }

    function ideaOwnerCreateValidations(res) {
      return (res.data.isTeamMemberOnly == false || res.data.isTeamMemberOnly == null) &&
             res.data.startupTitle is string && res.data.startupTitle.size() > 0 &&
             res.data.problemDefinition is string && res.data.problemDefinition.size() > 0 &&
             res.data.solutionDescription is string && res.data.solutionDescription.size() > 0 &&
             res.data.uniqueness is string && res.data.uniqueness.size() > 0 &&
             res.data.applicantCategory is string && res.data.applicantCategory.size() > 0 &&
             res.data.currentStage is string && res.data.currentStage.size() > 0 &&
             (res.data.teamMembers is string) &&
             res.data.associatedIdeaId == null &&
             res.data.associatedTeamLeaderUid == null;
    }

    function isSuperAdminAccountPlaceholderCreate(data) {
      return data.role == 'ADMIN_FACULTY' &&
             data.email == 'pranavrathi07@gmail.com' &&
             (data.isTeamMemberOnly == false || data.isTeamMemberOnly == null) &&
             data.startupTitle == 'Administrative Account' &&
             data.problemDefinition == 'Handles portal administration.' && // Exact string from client default
             data.solutionDescription == 'Provides administrative functions and support.' && // Exact string
             data.uniqueness == 'Unique administrative role for system management.' && // Exact string
             data.applicantCategory == 'PARUL_STAFF' &&
             data.currentStage == 'STARTUP_STAGE' &&
             data.associatedIdeaId == null &&
             data.associatedTeamLeaderUid == null;
    }

    function isMentorAccountPlaceholderCreate(data) {
      return data.role == 'ADMIN_FACULTY' &&
             isMentorEmail(data.email) && // Ensure it's a mentor email
             data.email != 'pranavrathi07@gmail.com' && // Not the super admin
             (data.isTeamMemberOnly == false || data.isTeamMemberOnly == null) &&
             data.startupTitle == 'Faculty/Mentor Account' && // Exact string from client default for mentors
             data.problemDefinition == 'Manages portal functions and/or mentorship.' && // Exact string
             data.solutionDescription == 'Provides administrative or mentorship support.' && // Exact string
             data.uniqueness == 'Unique administrative/mentorship role.' && // Exact string
             data.applicantCategory == 'PARUL_STAFF' &&
             data.currentStage == 'STARTUP_STAGE' &&
             data.associatedIdeaId == null &&
             data.associatedTeamLeaderUid == null;
    }

    function isCreatingOwnValidProfile(userId, req, res) {
      let commonValid = commonCreateValidations(userId, req, res);
      if (!commonValid) { return false; }

      if (res.data.isTeamMemberOnly == true) {
        return teamMemberOnlyCreateValidations(res);
      } else {
        if (res.data.email == 'pranavrathi07@gmail.com') { // Super Admin
          return (res.data.isSuperAdmin == true && res.data.role == 'ADMIN_FACULTY') &&
                 (isSuperAdminAccountPlaceholderCreate(res.data) || ideaOwnerCreateValidations(res));
        } else if (isMentorEmail(res.data.email)) { // Mentor (not super admin)
          return (res.data.role == 'ADMIN_FACULTY') &&
                 (isMentorAccountPlaceholderCreate(res.data) || ideaOwnerCreateValidations(res));
        } else { // Regular User
          return (res.data.role != 'ADMIN_FACULTY' && res.data.isSuperAdmin == false) &&
                 ideaOwnerCreateValidations(res);
        }
      }
    }

    // --- Profile Update Validation Helpers ---
    function commonUpdateValidations(userId, req, res, existingResource) {
      return req.auth.uid == userId &&
             res.data.uid == userId &&
             res.data.email == existingResource.data.email &&
             res.data.role == existingResource.data.role && // Role cannot be changed by user directly
             res.data.isSuperAdmin == existingResource.data.isSuperAdmin && // SuperAdmin status cannot be changed by user
             res.data.createdAt == existingResource.data.createdAt &&
             res.data.updatedAt == request.time &&
             res.data.fullName is string && res.data.fullName.size() > 0 &&
             res.data.contactNumber is string && res.data.contactNumber.size() > 0 &&
             res.data.isTeamMemberOnly == existingResource.data.isTeamMemberOnly &&
             res.data.associatedIdeaId == existingResource.data.associatedIdeaId &&
             res.data.associatedTeamLeaderUid == existingResource.data.associatedTeamLeaderUid;
    }

    function teamMemberOnlyUpdateValidations(res, existingResource) {
      return res.data.startupTitle == null &&
             res.data.problemDefinition == null &&
             res.data.solutionDescription == null &&
             res.data.uniqueness == null &&
             res.data.applicantCategory == null &&
             res.data.currentStage == null &&
             res.data.teamMembers == null;
    }

    function ideaOwnerUpdateValidations(res, existingResource) {
      return (existingResource.data.isTeamMemberOnly == false || existingResource.data.isTeamMemberOnly == null) &&
             res.data.startupTitle is string && res.data.startupTitle.size() > 0 &&
             res.data.problemDefinition is string && res.data.problemDefinition.size() > 0 &&
             res.data.solutionDescription is string && res.data.solutionDescription.size() > 0 &&
             res.data.uniqueness is string && res.data.uniqueness.size() > 0 &&
             res.data.applicantCategory is string && res.data.applicantCategory.size() > 0 &&
             res.data.currentStage is string && res.data.currentStage.size() > 0 &&
             (res.data.teamMembers is string) &&
             res.data.associatedIdeaId == null &&
             res.data.associatedTeamLeaderUid == null;
    }
    
    function superAdminAccountPlaceholderUpdateValidations(res, existingResource) {
      return res.data.startupTitle == 'Administrative Account' && // Title should not change from placeholder
             res.data.problemDefinition is string && res.data.problemDefinition.size() > 0 &&
             res.data.solutionDescription is string && res.data.solutionDescription.size() > 0 &&
             res.data.uniqueness is string && res.data.uniqueness.size() > 0 &&
             res.data.applicantCategory == existingResource.data.applicantCategory &&
             res.data.currentStage == existingResource.data.currentStage &&
             res.data.associatedIdeaId == null &&
             res.data.associatedTeamLeaderUid == null;
    }

    function mentorAccountPlaceholderUpdateValidations(res, existingResource) {
      return res.data.startupTitle == 'Faculty/Mentor Account' && // Title should not change from placeholder
             res.data.problemDefinition is string && res.data.problemDefinition.size() > 0 &&
             res.data.solutionDescription is string && res.data.solutionDescription.size() > 0 &&
             res.data.uniqueness is string && res.data.uniqueness.size() > 0 &&
             res.data.applicantCategory == existingResource.data.applicantCategory &&
             res.data.currentStage == existingResource.data.currentStage &&
             res.data.associatedIdeaId == null &&
             res.data.associatedTeamLeaderUid == null;
    }

    function isUpdatingOwnValidProfile(userId, req, res, existingResource) {
      let commonValid = commonUpdateValidations(userId, req, res, existingResource);
      if (!commonValid) { return false; }

      if (existingResource.data.isTeamMemberOnly == true) {
        return teamMemberOnlyUpdateValidations(res, existingResource);
      } else {
        // Not a team member
        if (existingResource.data.email == 'pranavrathi07@gmail.com') { // Super Admin
          // Super admin might have a placeholder or a real idea
          return isSuperAdminAccountPlaceholderCreate(existingResource.data) // Check if existing is placeholder
                 ? superAdminAccountPlaceholderUpdateValidations(res, existingResource)
                 : ideaOwnerUpdateValidations(res, existingResource);
        } else if (isMentorEmail(existingResource.data.email)) { // Mentor
          // Mentor might have a placeholder or a real idea
          return isMentorAccountPlaceholderCreate(existingResource.data) // Check if existing is placeholder
                 ? mentorAccountPlaceholderUpdateValidations(res, existingResource)
                 : ideaOwnerUpdateValidations(res, existingResource);
        } else { // Regular User
          return ideaOwnerUpdateValidations(res, existingResource);
        }
      }
    }

    // Admin can update specific fields of any user profile, but not role/superAdmin status here.
    // Role/superAdmin status changes are handled by a separate Cloud Function or more specific rules.
    function isAdminUpdatingValidGeneralFields(req, res, existingResource) {
      let allowedFieldsByAdmin = [
        'fullName', 'contactNumber', 'enrollmentNumber', 'college', 'instituteName',
        'applicantCategory', 'startupTitle', 'problemDefinition', 'solutionDescription',
        'uniqueness', 'currentStage', 'teamMembers', 'updatedAt'
        // 'role', 'isSuperAdmin' are NOT in this list for general profile edits by admin
      ];

      // Ensure no attempt to change immutable or role-related fields via this general update path
      return res.data.uid == existingResource.data.uid &&
             res.data.email == existingResource.data.email &&
             res.data.createdAt == existingResource.data.createdAt &&
             res.data.role == existingResource.data.role && // Role must not change here
             res.data.isSuperAdmin == existingResource.data.isSuperAdmin && // SuperAdmin status must not change here
             res.data.updatedAt == request.time &&
             request.writeFields.hasOnly(allowedFieldsByAdmin); // Only allowed general fields are being written
    }
    
    // Specific rule for super admin updating role/isSuperAdmin.
    // This assumes `updateUserRoleAndPermissionsFS` is called by a super admin.
    function isSuperAdminUpdatingRoleOrPermissions(req, res, existingResource) {
        let allowedFields = ['role', 'isSuperAdmin', 'updatedAt']; // Only these fields for this specific action
        return isUserProfileSuperAdmin() && // Action initiated by a super admin
               request.auth.uid != res.data.uid && // Super admin cannot change their own role/superAdmin status this way
               res.data.email != 'pranavrathi07@gmail.com' && // Cannot modify the primary super admin's role/superAdmin this way
               res.data.uid == existingResource.data.uid &&
               res.data.email == existingResource.data.email &&
               res.data.createdAt == existingResource.data.createdAt &&
               res.data.updatedAt == request.time &&
               request.writeFields.hasAny(['role', 'isSuperAdmin']) && // At least one of them is being changed
               request.writeFields.hasOnly(allowedFields); // And no other fields are changed in this operation
    }


    match /users/{userId} {
      allow create: if isCreatingOwnValidProfile(userId, request, request.resource);
      allow read: if isSignedIn();
      allow update: if (isOwner(userId) && isUpdatingOwnValidProfile(userId, request, request.resource, resource)) ||
                       (isUserProfileAdmin() && isAdminUpdatingValidGeneralFields(request, request.resource, resource)) ||
                       (isUserProfileSuperAdmin() && isSuperAdminUpdatingRoleOrPermissions(request, request.resource, resource));
      allow delete: if (isUserProfileSuperAdmin() && request.auth.uid != userId && resource.data.email != 'pranavrathi07@gmail.com');
                    // Self-deletion by Cloud Function handled by function's privileged access
    }

    // Idea Submission Rules
    function isValidIdeaSubmissionOnCreate(req, res) {
      let creatorProfile = get(/databases/$(database)/documents/users/$(req.auth.uid)).data;
      let creatorIsIdeaOwner = creatorProfile.isTeamMemberOnly == false || creatorProfile.isTeamMemberOnly == null;

      return creatorIsIdeaOwner &&
             req.auth.uid == res.data.userId &&
             res.data.title is string && res.data.title.size() > 0 &&
             res.data.category is string && res.data.category.size() > 0 &&
             res.data.problem is string && res.data.problem.size() > 0 &&
             res.data.solution is string && res.data.solution.size() > 0 &&
             res.data.uniqueness is string && res.data.uniqueness.size() > 0 &&
             res.data.developmentStage is string && res.data.developmentStage.size() > 0 &&
             res.data.applicantType is string && res.data.applicantType.size() > 0 &&
             (res.data.teamMembers is string) &&
             (res.data.structuredTeamMembers is list && res.data.structuredTeamMembers.size() == 0) &&
             (res.data.teamMemberEmails is list && res.data.teamMemberEmails.size() == 0) &&
             res.data.status == 'SUBMITTED' &&
             res.data.programPhase == null &&
             (res.data.phase2Marks is map && res.data.phase2Marks.keys().size() == 0) &&
             res.data.submittedAt == request.time &&
             res.data.updatedAt == request.time &&
             res.data.applicantDisplayName == creatorProfile.fullName &&
             res.data.applicantEmail == creatorProfile.email &&
             !('fileURL' in res.data) && !('fileName' in res.data) && !('studioLocation' in res.data) &&
             !('rejectionRemarks' in res.data) && !('rejectedByUid' in res.data) && !('rejectedAt' in res.data) &&
             !('phase2PptUrl' in res.data) && !('phase2PptFileName' in res.data) && !('phase2PptUploadedAt' in res.data) &&
             !('nextPhaseDate' in res.data) && !('nextPhaseStartTime' in res.data) && !('nextPhaseEndTime' in res.data) &&
             !('nextPhaseVenue' in res.data) && !('nextPhaseGuidelines' in res.data) &&
             !('mentor' in res.data) && !('cohortId' in res.data);
    }

    match /ideas/{ideaId} {
      allow create: if isSignedIn() && isValidIdeaSubmissionOnCreate(request, request.resource);
      allow read: if isSignedIn();
      allow update:
        (isUserProfileAdmin() && request.resource.data.updatedAt == request.time) ||
        (
          isOwner(resource.data.userId) && request.resource.data.updatedAt == request.time &&
          (
            (
              request.writeFields.hasAll(['phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', 'updatedAt']) &&
              request.resource.data.phase2PptUrl is string &&
              request.resource.data.phase2PptFileName is string &&
              request.resource.data.phase2PptUploadedAt == request.time
            ) ||
            (
              request.writeFields.hasAny(['structuredTeamMembers', 'teamMemberEmails', 'updatedAt']) &&
              request.resource.data.structuredTeamMembers is list && request.resource.data.structuredTeamMembers.size() <= 4 &&
              request.resource.data.teamMemberEmails is list && request.resource.data.teamMemberEmails.size() <= 4 &&
              request.resource.data.userId == resource.data.userId &&
              request.resource.data.title == resource.data.title &&
              request.resource.data.status == resource.data.status &&
              request.resource.data.programPhase == resource.data.programPhase
            )
          )
        ) ||
        (
          request.auth.token.email in resource.data.teamMemberEmails &&
          request.writeFields.hasAll(['structuredTeamMembers', 'updatedAt']) &&
          request.resource.data.updatedAt == request.time &&
          request.resource.data.userId == resource.data.userId &&
          request.resource.data.title == resource.data.title &&
          request.resource.data.status == resource.data.status &&
          request.resource.data.programPhase == resource.data.programPhase &&
          request.resource.data.teamMemberEmails.toSet().hasAll(resource.data.teamMemberEmails.toSet()) &&
          request.resource.data.teamMemberEmails.size() == resource.data.teamMemberEmails.size() &&
          request.resource.data.structuredTeamMembers.size() == resource.data.structuredTeamMembers.size() &&
          true
        );
      allow delete: if isUserProfileAdmin();
    }

    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isUserProfileAdmin() &&
                                     (request.method == 'create' ? (request.resource.data.createdAt == request.time && request.resource.data.updatedAt == request.time) : true) &&
                                     (request.method == 'update' ? request.resource.data.updatedAt == request.time : true) &&
                                     (request.method == 'create' || request.method == 'update' ? request.resource.data.createdByUid == request.auth.uid : true);
    }

    match /systemSettings/config {
      allow read: if isSignedIn();
      allow create, update: if isUserProfileAdmin() &&
                               request.resource.data.updatedAt == request.time &&
                               request.resource.data.updatedByUid == request.auth.uid;
    }

    match /activityLogs/{logId} {
      allow read: if isUserProfileAdmin();
      allow create: if isSignedIn() && request.resource.data.timestamp == request.time && request.resource.data.actorUid == request.auth.uid;
      allow update, delete: if false;
    }

    match /cohorts/{cohortId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isUserProfileAdmin();
    }
  }
}

    