
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    function isSuperAdmin() {
      return isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    function isPrimarySuperAdminEmail(email) {
      return email == 'pranavrathi07@gmail.com';
    }

    // User is creating their own profile, not assigning super admin, not assigning admin role unless they are the primary super admin.
    function isCreatingOwnValidProfile(data) {
      let isAttemptingPrivilegeEscalation = data.isSuperAdmin == true || data.role == 'ADMIN_FACULTY';
      let isAllowedRoleAssignment = !isAttemptingPrivilegeEscalation || (isAttemptingPrivilegeEscalation && isPrimarySuperAdminEmail(request.auth.token.email));

      return request.auth.uid == data.uid &&
             data.email == request.auth.token.email &&
             isAllowedRoleAssignment &&
             // Ensure team member specific fields are only set if isTeamMemberOnly is true
             (data.isTeamMemberOnly == false || (data.isTeamMemberOnly == true && data.associatedIdeaId != null && data.associatedTeamLeaderUid != null)) &&
             // Ensure idea owner specific fields are only set if isTeamMemberOnly is false (or not present, defaulting to false)
             (data.isTeamMemberOnly == true || (
                (data.isTeamMemberOnly == false || !('isTeamMemberOnly' in data)) &&
                 data.startupTitle != null &&
                 data.problemDefinition != null &&
                 data.solutionDescription != null &&
                 data.uniqueness != null &&
                 data.currentStage != null &&
                 data.applicantCategory != null
             ));
    }

    // User is updating their own profile, not changing critical fields
    function isUpdatingOwnValidProfile(newData, oldData) {
      return request.auth.uid == newData.uid &&
             newData.uid == oldData.uid &&
             newData.email == oldData.email && // Primary email cannot be changed by user
             newData.role == oldData.role && // Role changes are admin-only for existing users
             newData.isSuperAdmin == oldData.isSuperAdmin && // Super admin status is admin-only
             // Team member association fields should not be editable by the user directly after initial setup this way
             newData.isTeamMemberOnly == oldData.isTeamMemberOnly &&
             newData.associatedIdeaId == oldData.associatedIdeaId &&
             newData.associatedTeamLeaderUid == oldData.associatedTeamLeaderUid &&
             newData.createdAt == oldData.createdAt; // Cannot change creation timestamp
    }

    // Idea owner is updating their idea, not changing status, phase, or admin-controlled fields
    function isIdeaOwnerUpdatingValidFields(newData, oldData) {
      let allowedUserModifiableFields = [
        'title', 'category', 'problem', 'solution', 'uniqueness', 'developmentStage',
        'applicantType', 'teamMembers', 'structuredTeamMembers', 'teamMemberEmails',
        'fileURL', 'fileName', 'studioLocation',
        'phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', 'updatedAt'
      ];
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      let onlyAllowedFieldsChanged = changedKeys.hasOnly(allowedUserModifiableFields);

      return onlyAllowedFieldsChanged &&
             newData.userId == oldData.userId && // Owner cannot change
             newData.status == oldData.status && // Status is admin-controlled
             newData.programPhase == oldData.programPhase && // Phase is admin-controlled
             newData.phase2Marks == oldData.phase2Marks && // Marks are admin-controlled
             newData.mentor == oldData.mentor && // Mentor is admin-controlled
             newData.rejectionRemarks == oldData.rejectionRemarks && // Admin-controlled
             newData.rejectedByUid == oldData.rejectedByUid && // Admin-controlled
             newData.rejectedAt == oldData.rejectedAt && // Admin-controlled
             newData.nextPhaseDate == oldData.nextPhaseDate && // Admin-controlled
             newData.nextPhaseStartTime == oldData.nextPhaseStartTime && // Admin-controlled
             newData.nextPhaseEndTime == oldData.nextPhaseEndTime && // Admin-controlled
             newData.nextPhaseVenue == oldData.nextPhaseVenue && // Admin-controlled
             newData.nextPhaseGuidelines == oldData.nextPhaseGuidelines && // Admin-controlled
             newData.submittedAt == oldData.submittedAt; // Cannot change submission timestamp
    }

    // Check if idea submission data is valid during creation by owner
    function isValidIdeaSubmission(data) {
      return data.userId == request.auth.uid &&
             data.title != null && data.title.size() > 0 &&
             data.problem != null && data.problem.size() > 0 &&
             data.solution != null && data.solution.size() > 0 &&
             data.uniqueness != null && data.uniqueness.size() > 0 &&
             data.developmentStage != null &&
             data.status == 'SUBMITTED' && // Initial status
             data.programPhase == null && // Initial phase
             data.teamMemberEmails.size() >= 0 && // Can be empty array
             data.structuredTeamMembers.size() >= 0; // Can be empty array
    }

    // Team member is updating their own entry in an idea's structuredTeamMembers array
    function isTeamMemberUpdatingOwnDetailsInIdea(request, resource) {
        let writeFields = request.writeFields;

        if (!writeFields.hasOnly(['structuredTeamMembers', 'updatedAt'])) {
          return false; // Only these top-level fields can be modified by a team member in this context.
        }

        // Ensure critical idea fields are not being changed by the team member
        if (request.resource.data.userId != resource.data.userId ||
            request.resource.data.status != resource.data.status ||
            request.resource.data.programPhase != resource.data.programPhase ||
            !request.resource.data.teamMemberEmails.toSet().equals(resource.data.teamMemberEmails.toSet())) {
           return false;
        }

        if (writeFields.has('structuredTeamMembers')) {
            let newMembers = request.resource.data.structuredTeamMembers;
            let oldMembers = resource.data.structuredTeamMembers;

            if (newMembers.size() != oldMembers.size()) {
              return false; // Team members cannot add or remove other members this way.
            }

            let selfModificationValid = false;
            let modificationCount = 0;

            for (let i = 0; i < newMembers.size(); i++) {
                let newMember = newMembers[i];
                // Find corresponding old member by original email (assuming email is stable for matching during this specific update)
                // This is crucial because the 'id' of the member object might be changing from nanoid to UID.
                let oldMemberCandidates = oldMembers.filter(om => om.email == newMember.email);

                if (oldMemberCandidates.size() == 1) {
                    let oldMember = oldMemberCandidates[0];

                    if (newMember.email == request.auth.token.email) { // Is this the authenticated user's entry?
                        // Check if it's the first-time profile setup: ID changes from non-UID to UID
                        if (newMember.id == request.auth.uid && oldMember.id != request.auth.uid) {
                           // Allow update if ID becomes UID, and other fields (name, phone, etc.) are being set.
                           // Email must remain the same as oldMember's email.
                           if (newMember.name != null && newMember.phone != null && newMember.institute != null && newMember.department != null) {
                             selfModificationValid = true;
                             modificationCount++;
                           } else { return false; /* Incomplete data during ID sync */ }
                        }
                        // Check if it's a subsequent update by the member to their own details (ID is already UID)
                        else if (newMember.id == request.auth.uid && oldMember.id == request.auth.uid) {
                            // Allow if only name, phone, institute, department, enrollmentNumber are changed. Email and ID must match.
                            if (newMember.name != oldMember.name || newMember.phone != oldMember.phone ||
                                newMember.institute != oldMember.institute || newMember.department != oldMember.department ||
                                newMember.enrollmentNumber != oldMember.enrollmentNumber) {
                               selfModificationValid = true;
                               modificationCount++;
                            } else if (newMember == oldMember) {
                                // No change to this member, also valid.
                            } else { return false; /* Invalid change to own data */ }
                        } else if (newMember == oldMember) {
                           // No change to this member's entry, this is fine.
                        }
                        else {
                           return false; // Invalid change to own ID or non-matching scenario.
                        }
                    } else { // This is another team member's entry
                        if (newMember != oldMember) {
                           return false; // Cannot modify another team member's data.
                        }
                    }
                } else {
                    return false; // Email not found in old members or duplicate emails, structure changed unacceptably.
                }
            }
            // Only one member's data (themselves) should have been modified, or no members if only updatedAt changed.
            return modificationCount <= 1 && (modificationCount == 1 ? selfModificationValid : true);
        }
        return true; // Valid if only 'updatedAt' changed or no change to 'structuredTeamMembers'.
    }


    // Users Collection
    match /users/{userId} {
      allow read: if request.auth != null;

      allow create: if request.auth.uid == userId &&
                      isCreatingOwnValidProfile(request.resource.data);

      allow update: if (request.auth.uid == userId &&
                       isUpdatingOwnValidProfile(request.resource.data, resource.data)) ||
                      (isAdmin() &&
                       request.resource.data.uid == resource.data.uid && // Cannot change UID
                       request.resource.data.email == resource.data.email && // Cannot change primary email
                       request.resource.data.createdAt == resource.data.createdAt && // Cannot change creation time
                       !(isPrimarySuperAdminEmail(resource.data.email) && request.resource.data.isSuperAdmin == false) && // Cannot demote primary super admin
                       !(isPrimarySuperAdminEmail(resource.data.email) && request.resource.data.role != 'ADMIN_FACULTY') // Cannot change role of primary super admin
                      );

      allow delete: if isAdmin() && !isPrimarySuperAdminEmail(resource.data.email); // Admin can delete, but not primary super admin
    }

    // Ideas Collection
    match /ideas/{ideaId} {
      allow read: if request.auth != null &&
                    (resource.data.userId == request.auth.uid ||
                     request.auth.token.email in resource.data.teamMemberEmails ||
                     isAdmin());

      allow create: if request.auth.uid == request.resource.data.userId &&
                     isValidIdeaSubmission(request.resource.data);

      allow update: if isAdmin() ||
                     (request.auth.uid == resource.data.userId &&
                      isIdeaOwnerUpdatingValidFields(request.resource.data, resource.data)) ||
                     (request.auth.token.email in resource.data.teamMemberEmails &&
                      isTeamMemberUpdatingOwnDetailsInIdea(request, resource));


      allow delete: if isAdmin() || request.auth.uid == resource.data.userId;
    }

    // Announcements Collection
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Cohorts Collection (Future Use)
    match /cohorts/{cohortId} {
      allow read: if request.auth != null; // Or more specific rules like cohort members
      allow create, update, delete: if isAdmin();
    }

    // System Settings Document
    match /systemSettings/config {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
  }
}

    