
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the currently authenticated user is the owner of the resource
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if the user has an 'ADMIN_FACULTY' role
    function isAdmin() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Helper function to check if the user is a Super Admin
    function isSuperAdmin() {
      return isAdmin() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isSuperAdmin == true;
    }

    // Helper function to validate profile data during creation
    function isCreatingOwnValidProfile(userId, request) {
      let commonValidations =
          isUser(userId) &&
          request.resource.data.uid == userId &&
          (request.resource.data.email == request.auth.token.email || request.resource.data.email == "pranavrathi07@gmail.com") &&
          (request.resource.data.role != 'ADMIN_FACULTY' || request.resource.data.email == "pranavrathi07@gmail.com") &&
          (request.resource.data.isSuperAdmin == false || request.resource.data.email == "pranavrathi07@gmail.com") &&
          request.resource.data.fullName != null && request.resource.data.fullName.size() > 0 &&
          request.resource.data.contactNumber != null && request.resource.data.contactNumber.size() > 0;

      let isTeamMemberOnly = request.resource.data.isTeamMemberOnly == true;

      let teamMemberFieldsValid =
          isTeamMemberOnly &&
          request.resource.data.associatedIdeaId != null && request.resource.data.associatedIdeaId.size() > 0 &&
          request.resource.data.associatedTeamLeaderUid != null && request.resource.data.associatedTeamLeaderUid.size() > 0 &&
          request.resource.data.startupTitle == null &&
          request.resource.data.problemDefinition == null &&
          request.resource.data.solutionDescription == null &&
          request.resource.data.uniqueness == null &&
          request.resource.data.applicantCategory == null &&
          request.resource.data.currentStage == null;

      let ideaOwnerFieldsValid =
          !isTeamMemberOnly &&
          request.resource.data.startupTitle != null && request.resource.data.startupTitle.size() > 0 &&
          request.resource.data.problemDefinition != null && request.resource.data.problemDefinition.size() > 0 &&
          request.resource.data.solutionDescription != null && request.resource.data.solutionDescription.size() > 0 &&
          request.resource.data.uniqueness != null && request.resource.data.uniqueness.size() > 0 &&
          request.resource.data.applicantCategory != null && // Further validation for enum values can be added if strictness is needed
          request.resource.data.currentStage != null &&     // e.g., request.resource.data.applicantCategory in ['PARUL_STUDENT', ...]
          request.resource.data.associatedIdeaId == null &&
          request.resource.data.associatedTeamLeaderUid == null;

      return commonValidations && (teamMemberFieldsValid || ideaOwnerFieldsValid);
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin();
      allow create: if isCreatingOwnValidProfile(userId, request);
      allow update: if (
                      // Admin updates
                      isAdmin() &&
                      // Admin cannot change primary super admin's role away from ADMIN_FACULTY or isSuperAdmin from true.
                      (resource.data.email != "pranavrathi07@gmail.com" ||
                       (request.resource.data.role == 'ADMIN_FACULTY' && request.resource.data.isSuperAdmin == true))
                     ) ||
                     (
                       // User updating their own profile
                       isUser(userId) &&
                       // User cannot change their own uid, email, role, isSuperAdmin status, creation timestamp,
                       // or direct team association fields via this path.
                       // isTeamMemberOnly, associatedIdeaId, associatedTeamLeaderUid are set at creation for team members.
                       // Idea owners set their idea details at creation.
                       // Changes to team membership for an idea are handled via idea document updates.
                       request.resource.data.uid == resource.data.uid &&
                       request.resource.data.email == resource.data.email &&
                       request.resource.data.role == resource.data.role &&
                       request.resource.data.isSuperAdmin == resource.data.isSuperAdmin &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       request.resource.data.isTeamMemberOnly == resource.data.isTeamMemberOnly &&
                       request.resource.data.associatedIdeaId == resource.data.associatedIdeaId &&
                       request.resource.data.associatedTeamLeaderUid == resource.data.associatedTeamLeaderUid &&
                       // Allow other fields to be updated by user (fullName, contactNumber, enrollmentNumber, college, instituteName, and idea details IF they are idea owner)
                       // If they are an idea owner, they can update their idea details on their profile.
                       // This also means an idea owner cannot make themselves a team member (isTeamMemberOnly=true) via update.
                       (
                         (resource.data.isTeamMemberOnly == false && request.resource.data.isTeamMemberOnly == false) ||
                         (resource.data.isTeamMemberOnly == true && request.resource.data.isTeamMemberOnly == true)
                       )
                     );
      allow delete: if (isAdmin() && resource.data.email != "pranavrathi07@gmail.com") ||
                     (isUser(userId) && resource.data.email != "pranavrathi07@gmail.com");
    }

    // Idea Submissions
    match /ideas/{ideaId} {
      allow read: if isAuthenticated() &&
                     (isUser(resource.data.userId) || // Owner
                      (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails) || // Team Member
                      isAdmin() // Admin
                     );

      allow create: if isAuthenticated() &&
                       isUser(request.resource.data.userId) && // Creator must be the authenticated user
                       request.resource.data.status == 'SUBMITTED' && // Initial status must be SUBMITTED
                       request.resource.data.programPhase == null && // Initial programPhase must be null
                       request.resource.data.phase2Marks == {} && // Initial marks must be empty
                       request.resource.data.userId != null && request.resource.data.userId.size() > 0 &&
                       request.resource.data.title != null && request.resource.data.title.size() > 0 &&
                       request.resource.data.problem != null && request.resource.data.problem.size() > 0 &&
                       request.resource.data.solution != null && request.resource.data.solution.size() > 0 &&
                       request.resource.data.uniqueness != null && request.resource.data.uniqueness.size() > 0 &&
                       request.resource.data.developmentStage != null &&
                       request.resource.data.applicantType != null;


      allow update: if isAuthenticated() &&
                     (
                       // Admin can update most fields (full control by admin implies they know what they are doing)
                       isAdmin()
                     ) ||
                     (
                       // Owner updates
                       isUser(resource.data.userId) &&
                       // Owner cannot change core status/phase/marks/rejection details directly.
                       // Owner cannot change the idea's owner (userId).
                       // Owner can update structuredTeamMembers (add/remove/edit) & teamMemberEmails.
                       // Owner can update PPT details.
                       // Owner can update description fields.
                       request.resource.data.userId == resource.data.userId && // Cannot change owner
                       request.resource.data.status == resource.data.status && // Cannot change status
                       request.resource.data.programPhase == resource.data.programPhase && // Cannot change phase
                       request.resource.data.phase2Marks == resource.data.phase2Marks && // Cannot change marks
                       request.resource.data.rejectionRemarks == resource.data.rejectionRemarks &&
                       request.resource.data.rejectedByUid == resource.data.rejectedByUid &&
                       request.resource.data.rejectedAt == resource.data.rejectedAt &&
                       request.resource.data.nextPhaseDate == resource.data.nextPhaseDate &&
                       request.resource.data.nextPhaseStartTime == resource.data.nextPhaseStartTime &&
                       request.resource.data.nextPhaseEndTime == resource.data.nextPhaseEndTime &&
                       request.resource.data.nextPhaseVenue == resource.data.nextPhaseVenue &&
                       request.resource.data.nextPhaseGuidelines == resource.data.nextPhaseGuidelines &&
                       request.resource.data.mentor == resource.data.mentor // Mentor assigned by admin
                     ) ||
                     (
                       // Team member updating their own details within the idea
                       (resource.data.teamMemberEmails != null && request.auth.token.email in resource.data.teamMemberEmails) &&
                       request.writeFields.hasOnly(['structuredTeamMembers', 'updatedAt']) && // Team member can only update these top-level fields
                       request.resource.data.userId == resource.data.userId && // Cannot change owner
                       request.resource.data.status == resource.data.status && // Cannot change status
                       request.resource.data.programPhase == resource.data.programPhase && // Cannot change phase
                       request.resource.data.title == resource.data.title && // Cannot change title
                       request.resource.data.teamMemberEmails.isEqualTo(resource.data.teamMemberEmails) && // Cannot change the flat list of emails here
                       request.resource.data.structuredTeamMembers.size() == resource.data.structuredTeamMembers.size() // Cannot change array size
                       // Further validation of *which* item in structuredTeamMembers is changing is complex and often better handled by client logic + Cloud Functions if high security is needed.
                       // The client should ensure only the member's own entry (identified by email or placeholder ID before UID is set) is modified.
                     );

      allow delete: if isAuthenticated() && (isUser(resource.data.userId) || isSuperAdmin()); // Only idea owner or Super Admin can delete
    }

    // Announcements
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // System Settings (single document 'config')
    match /systemSettings/config {
      allow read: if isAuthenticated(); // All authenticated users can read settings
      allow write: if isAdmin(); // Only admins can change settings
    }

    // Activity Logs
    match /activityLogs/{logId} {
      allow read: if isAdmin(); // Only admins can read all activity logs
      allow create: if isAuthenticated(); // Any authenticated user can create a log entry (e.g. for their own actions)
      // No update or delete for logs to maintain audit trail integrity
    }
  }
}

    