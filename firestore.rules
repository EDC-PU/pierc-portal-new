
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is an admin
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow authenticated users to read their own profile
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if request.auth.uid == userId;
    }

    // Allow admins to read/write all user profiles
    match /users/{userId} {
      allow read, write: if isAdmin();
    }
    
    // System Settings: Only admins can read/write
    match /systemSettings/{docId} {
      allow read, write: if isAdmin();
    }
    
    // Announcements: Admins can do anything, authenticated users can read
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // Events: Admins can do anything, authenticated users can read and update RSVPs
    match /events/{eventId} {
       allow read: if isAuthenticated();
       allow create, update, delete: if isAdmin();
       // Allow any authenticated user to add/remove their UID from the rsvps array
       allow update: if isAuthenticated()
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rsvps', 'rsvpCount']);
    }
    
    // Cohorts: Admins can do anything, authenticated users can read
    match /cohorts/{cohortId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // Notifications: Only the user can read/write their own notifications
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Activity Logs: Only admins can read, nobody can write directly (written by backend)
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Should be written via server-side logic only
    }

    // Ideas collection
    match /ideas/{ideaId} {
      // Anyone authenticated can read any idea
      allow read: if isAuthenticated();
      
      // Allow user to create an idea if they are authenticated
      allow create: if isAuthenticated();

      // Allow update if:
      // 1. User is the owner (can update anything).
      // 2. User is an admin (can update anything).
      // 3. Any authenticated user is ONLY adding a comment.
      allow update: if (isAuthenticated() && request.auth.uid == resource.data.userId)
                    || isAdmin()
                    || (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments', 'updatedAt']));
      
      // Only the idea owner or an admin can delete their idea
      allow delete: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
    }
  }
}
