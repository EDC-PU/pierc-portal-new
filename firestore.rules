
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isSuperAdmin() {
      return request.auth.token.admin == true || request.auth.email == 'pranavrathi07@gmail.com';
    }

    function isAdmin() {
      return request.auth.token.admin == true || request.auth.email == 'pranavrathi07@gmail.com' ||
             (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY');
    }

    function isIdeaDataInternallyConsistent(data) {
      return data.title is string && data.title.size() > 0 && data.title.size() <= 200 &&
             data.problem is string && data.problem.size() > 0 && data.problem.size() <= 2000 &&
             data.solution is string && data.solution.size() > 0 && data.solution.size() <= 2000 &&
             data.uniqueness is string && data.uniqueness.size() > 0 && data.uniqueness.size() <= 2000 &&
             data.developmentStage is string &&
             data.applicantType is string &&
             (data.teamMembers is string || data.teamMembers == null) && // Keep for existing data, though new submissions won't use it
             (data.structuredTeamMembers is list) && // Ensure it's a list if present
             (data.teamMemberEmails is list) && // Ensure it's a list if present
             (data.fileURL is string || data.fileURL == null) &&
             (data.fileName is string || data.fileName == null) &&
             (data.studioLocation is string || data.studioLocation == null) &&
             data.userId is string && data.userId.size() > 0 &&
             data.status is string &&
             (data.programPhase is string || data.programPhase == null) &&
             (data.mentor is string || data.mentor == null) &&
             (data.cohortId is string || data.cohortId == null) &&
             (data.rejectionRemarks is string || data.rejectionRemarks == null) &&
             (data.rejectedByUid is string || data.rejectedByUid == null) &&
             (data.rejectedAt is timestamp || data.rejectedAt == null) &&
             (data.phase2PptUrl is string || data.phase2PptUrl == null) &&
             (data.phase2PptFileName is string || data.phase2PptFileName == null) &&
             (data.phase2PptUploadedAt is timestamp || data.phase2PptUploadedAt == null) &&
             (data.isOutlineAIGenerated is bool) &&
             (data.nextPhaseDate is timestamp || data.nextPhaseDate == null) &&
             (data.nextPhaseStartTime is string || data.nextPhaseStartTime == null) &&
             (data.nextPhaseEndTime is string || data.nextPhaseEndTime == null) &&
             (data.nextPhaseVenue is string || data.nextPhaseVenue == null) &&
             (data.nextPhaseGuidelines is string || data.nextPhaseGuidelines == null) &&
             (data.fundingSource is string || data.fundingSource == null) &&
             (data.totalFundingAllocated is number || data.totalFundingAllocated == null) &&
             (data.sanction1Amount is number || data.sanction1Amount == null) &&
             (data.sanction2Amount is number || data.sanction2Amount == null) &&
             (data.sanction1DisbursedAt is timestamp || data.sanction1DisbursedAt == null) &&
             (data.sanction2DisbursedAt is timestamp || data.sanction2DisbursedAt == null) &&
             (data.sanction1Expenses is list) &&
             (data.sanction2Expenses is list) &&
             (data.beneficiaryName is string || data.beneficiaryName == null) &&
             (data.beneficiaryAccountNo is string || data.beneficiaryAccountNo == null) &&
             (data.beneficiaryBankName is string || data.beneficiaryBankName == null) &&
             (data.beneficiaryIfscCode is string || data.beneficiaryIfscCode == null) &&
             (data.beneficiaryAccountType is string || data.beneficiaryAccountType == null) &&
             (data.beneficiaryCity is string || data.beneficiaryCity == null) &&
             (data.beneficiaryBranchName is string || data.beneficiaryBranchName == null) &&
             (data.sanction1AppliedForNext is bool) &&
             (data.sanction1UtilizationStatus is string) &&
             (data.sanction1UtilizationRemarks is string || data.sanction1UtilizationRemarks == null) &&
             (data.sanction1UtilizationReviewedBy is string || data.sanction1UtilizationReviewedBy == null) &&
             (data.sanction1UtilizationReviewedAt is timestamp || data.sanction1UtilizationReviewedAt == null) &&
             (data.sanction2UtilizationStatus is string) &&
             (data.sanction2UtilizationRemarks is string || data.sanction2UtilizationRemarks == null) &&
             (data.sanction2UtilizationReviewedBy is string || data.sanction2UtilizationReviewedBy == null) &&
             (data.sanction2UtilizationReviewedAt is timestamp || data.sanction2UtilizationReviewedAt == null) &&
             (data.phase2Marks is map) &&
             (data.applicantDisplayName is string) &&
             (data.applicantEmail is string) &&
             (data.createdAt is timestamp) &&
             (data.updatedAt is timestamp) &&
             (data.submittedAt is timestamp);
    }

    function isValidIdeaData(data) {
      // This function is used for validating the overall structure during updates by admin or user.
      // It's less strict about initial nulls compared to isValidInitialOrResubmittedIdeaState.
      return isIdeaDataInternallyConsistent(data);
    }

    function isValidInitialOrResubmittedIdeaState(data) {
      // For new submissions or resubmissions after archival by admin.
      return data.status == 'SUBMITTED' &&
             data.programPhase == null &&
             data.phase2Marks is map && data.phase2Marks.size() == 0 &&
             data.mentor == null &&
             data.cohortId == null &&
             data.rejectionRemarks == null &&
             data.rejectedByUid == null &&
             data.rejectedAt == null &&
             data.fundingSource == null &&
             data.totalFundingAllocated == null &&
             data.sanction1Amount == null &&
             data.sanction2Amount == null &&
             data.sanction1DisbursedAt == null &&
             data.sanction2DisbursedAt == null &&
             data.sanction1Expenses is list && data.sanction1Expenses.size() == 0 &&
             data.sanction2Expenses is list && data.sanction2Expenses.size() == 0 &&
             data.beneficiaryName == null &&
             data.beneficiaryAccountNo == null &&
             data.beneficiaryBankName == null &&
             data.beneficiaryIfscCode == null &&
             data.beneficiaryAccountType == null &&
             data.beneficiaryCity == null &&
             data.beneficiaryBranchName == null &&
             data.sanction1AppliedForNext == false &&
             data.sanction1UtilizationStatus == 'NOT_APPLICABLE' &&
             data.sanction1UtilizationRemarks == null &&
             data.sanction1UtilizationReviewedBy == null &&
             data.sanction1UtilizationReviewedAt == null &&
             data.sanction2UtilizationStatus == 'NOT_APPLICABLE' &&
             data.sanction2UtilizationRemarks == null &&
             data.sanction2UtilizationReviewedBy == null &&
             data.sanction2UtilizationReviewedAt == null &&
             data.isOutlineAIGenerated == false &&
             data.phase2PptUrl == null &&
             data.phase2PptFileName == null &&
             data.phase2PptUploadedAt == null &&
             data.nextPhaseDate == null &&
             data.nextPhaseStartTime == null &&
             data.nextPhaseEndTime == null &&
             data.nextPhaseVenue == null &&
             data.nextPhaseGuidelines == null;
             // Removed:
             // data.createdAt == request.time &&
             // data.updatedAt == request.time &&
             // data.submittedAt == request.time;
    }

    // User Profile Rules
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId) &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       (request.resource.data.createdAt == request.time) &&
                       (request.resource.data.updatedAt == request.time);
      allow update: if (isOwner(userId) &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == resource.data.email && // Email cannot be changed by user
                       request.resource.data.role == resource.data.role && // Role cannot be changed by user directly
                       request.resource.data.isSuperAdmin == resource.data.isSuperAdmin && // SuperAdmin status not changeable by user
                       request.resource.data.createdAt == resource.data.createdAt && // createdAt immutable
                       (request.resource.data.updatedAt == request.time)) ||
                      (isSuperAdmin() && request.resource.data.uid == userId); // Super admin can update any profile field for management
      allow delete: if isSuperAdmin() && resource.data.email != 'pranavrathi07@gmail.com'; // Super admin can delete anyone except self
    }

    // Idea Submission Rules
    match /ideas/{ideaId} {
      allow read: if isSignedIn(); // Any signed-in user can read idea details (e.g., team members, admins)

      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       isValidInitialOrResubmittedIdeaState(request.resource.data) &&
                       isIdeaDataInternallyConsistent(request.resource.data) &&
                       request.resource.data.createdAt == request.time && // Keep for initial server-side check
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.submittedAt == request.time;


      function isUpdatingAllowedUserFields(changedKeys) {
        let allowedFields = ['phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', 'teamMembers', 'structuredTeamMembers', 'teamMemberEmails', 'beneficiaryName', 'beneficiaryAccountNo', 'beneficiaryBankName', 'beneficiaryIfscCode', 'beneficiaryAccountType', 'beneficiaryCity', 'beneficiaryBranchName', 'sanction1AppliedForNext', 'sanction1Expenses', 'sanction2Expenses', 'updatedAt'];
        return changedKeys.hasOnly(allowedFields);
      }

      function isUpdatingOnlyAllowedBeneficiaryFields(changedKeys) {
        let allowedFields = ['beneficiaryName', 'beneficiaryAccountNo', 'beneficiaryBankName', 'beneficiaryIfscCode', 'beneficiaryAccountType', 'beneficiaryCity', 'beneficiaryBranchName', 'updatedAt'];
        return changedKeys.hasOnly(allowedFields);
      }

      function isUpdatingOnlyPptFields(changedKeys) {
        let allowedFields = ['phase2PptUrl', 'phase2PptFileName', 'phase2PptUploadedAt', 'updatedAt'];
        return changedKeys.hasOnly(allowedFields);
      }

      function isUpdatingOutlineGeneratedFlag(changedKeys) {
         return changedKeys.hasOnly(['isOutlineAIGenerated', 'updatedAt']);
      }

      function isUpdatingTeamMembers(changedKeys) {
        let allowedFields = ['structuredTeamMembers', 'teamMemberEmails', 'updatedAt'];
        return changedKeys.hasOnly(allowedFields);
      }

      function isUpdatingOnlyExpenses(changedKeys) {
          return (request.resource.data.sanction1Expenses != resource.data.sanction1Expenses && changedKeys.hasOnly(['sanction1Expenses', 'updatedAt'])) ||
                 (request.resource.data.sanction2Expenses != resource.data.sanction2Expenses && changedKeys.hasOnly(['sanction2Expenses', 'updatedAt']));
      }

      function isApplyingForNextSanction(changedKeys) {
          return changedKeys.hasOnly(['sanction1AppliedForNext', 'sanction1UtilizationStatus', 'updatedAt']) &&
                 request.resource.data.sanction1AppliedForNext == true &&
                 request.resource.data.sanction1UtilizationStatus == 'PENDING';
      }


      allow update: if isSignedIn() &&
                       resource.data.userId == request.auth.uid && // Owner can update
                       request.resource.data.userId == resource.data.userId && // Cannot change owner
                       request.resource.data.createdAt == resource.data.createdAt && // Cannot change creation time
                       request.resource.data.submittedAt == resource.data.submittedAt && // Cannot change original submission time
                       request.resource.data.updatedAt == request.time && // Update time must be now
                       isValidIdeaData(request.resource.data) && // Ensure overall data consistency
                       (
                         // User updating their own PPT
                         (resource.data.programPhase == 'PHASE_2' && isUpdatingOnlyPptFields(request.resource.data.diff(resource.data).affectedKeys())) ||
                         // User updating AI generated flag
                         (isUpdatingOutlineGeneratedFlag(request.resource.data.diff(resource.data).affectedKeys())) ||
                         // User updating team members
                         (isUpdatingTeamMembers(request.resource.data.diff(resource.data).affectedKeys())) ||
                         // User updating beneficiary details
                         (resource.data.programPhase == 'INCUBATED' && isUpdatingOnlyAllowedBeneficiaryFields(request.resource.data.diff(resource.data).affectedKeys())) ||
                         // User updating expenses
                         (resource.data.programPhase == 'INCUBATED' &&
                            ( (request.resource.data.sanction1DisbursedAt != null && request.resource.data.sanction1UtilizationStatus != 'APPROVED' && request.resource.data.sanction1Expenses != resource.data.sanction1Expenses && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['sanction1Expenses', 'updatedAt'])) ||
                              (request.resource.data.sanction2DisbursedAt != null && request.resource.data.sanction2UtilizationStatus != 'APPROVED' && request.resource.data.sanction2Expenses != resource.data.sanction2Expenses && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['sanction2Expenses', 'updatedAt']))
                            )
                         ) ||
                         // User applying for next sanction
                         (resource.data.programPhase == 'INCUBATED' && resource.data.sanction1DisbursedAt != null && resource.data.sanction1UtilizationStatus == 'APPROVED' && resource.data.sanction2DisbursedAt == null && isApplyingForNextSanction(request.resource.data.diff(resource.data).affectedKeys()))
                       )
                       ||
                       (isAdmin() && // Admin can update specific fields
                         request.resource.data.userId == resource.data.userId &&
                         request.resource.data.createdAt == resource.data.createdAt &&
                         request.resource.data.submittedAt == resource.data.submittedAt &&
                         request.resource.data.updatedAt == request.time &&
                         isValidIdeaData(request.resource.data)
                         // Further specific admin field update checks can be added here if needed,
                         // for now, admin update is broadly allowed if basic immutable fields are kept.
                       );

      allow delete: if false; // Ideas should be archived, not deleted directly
    }

    // Announcement Rules
    match /announcements/{announcementId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() && request.resource.data.createdByUid == request.auth.uid;
      allow update: if isAdmin() && request.resource.data.createdByUid == resource.data.createdByUid; // Keep creator same
      allow delete: if isAdmin();
    }

    // Cohort Rules
    match /cohorts/{cohortId} {
      allow read: if isSignedIn();
      allow create: if isAdmin() && request.resource.data.createdByUid == request.auth.uid;
      allow update: if isAdmin() && request.resource.data.createdByUid == resource.data.createdByUid;
      allow delete: if isAdmin() && (resource.data.ideaIds == null || resource.data.ideaIds.size() == 0);
    }

    // System Settings Rules
    match /systemSettings/{docId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() && request.resource.data.updatedByUid == request.auth.uid;
    }

    // Activity Logs Rules
    match /activityLogs/{logId} {
      allow read: if isAdmin();
      allow create: if true; // Logged by trusted server-side logic (or client if a specific user action triggered it)
      allow update, delete: if false; // Logs should be immutable
    }
  }
}

    