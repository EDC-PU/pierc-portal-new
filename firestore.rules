
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requester is an Admin
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN_FACULTY';
    }

    // Helper function to check if the requester is the Super Admin
    function isSuperAdmin() {
      return request.auth != null && request.auth.token.email == 'pranavrathi07@gmail.com';
    }

    // Users Collection
    match /users/{userId} {
      allow get: if request.auth != null;

      allow create: if request.auth.uid == userId &&
                      // Required fields for any profile
                      request.resource.data.keys().hasAll(['uid', 'email', 'role', 'createdAt', 'updatedAt', 'fullName', 'contactNumber']) &&
                      request.resource.data.uid == userId &&
                      // Email should match the authenticated user's email during creation
                      request.resource.data.email == request.auth.token.email &&
                      // Only the specific super admin email can set isSuperAdmin to true during creation
                      (request.resource.data.isSuperAdmin == true ? isSuperAdmin() : true) &&
                      // Role can be set during creation (e.g., ADMIN_FACULTY for mentors)
                      (request.resource.data.role is string || request.resource.data.role == null) &&
                      // Allow writing placeholder idea fields if the user is being set up as an admin/mentor initially
                      // or if they are a regular user providing their idea details.
                      // This is a broad allowance for creation; updates are stricter.
                      true; // Simplified for creation, assuming backend logic in createUserProfileFS is trusted.

      allow update: if (request.auth.uid == userId &&
                        // User cannot change their own role or isSuperAdmin status
                        !(request.resource.data.role != resource.data.role) &&
                        !(request.resource.data.isSuperAdmin != resource.data.isSuperAdmin) &&
                        // User cannot change their own UID or email after creation
                        request.resource.data.uid == resource.data.uid &&
                        request.resource.data.email == resource.data.email &&
                        // User cannot change their own createdAt timestamp
                        request.resource.data.createdAt == resource.data.createdAt
                       ) ||
                       // Admins can update user profiles (except for critical fields of other admins if needed)
                       isAdmin();

      allow delete: if isAdmin(); // Or use a callable function for self-delete: request.auth.uid == userId;
    }

    // Ideas Collection
    match /ideas/{ideaId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null; // Be cautious with listing all ideas; refine if needed

      allow create: if request.auth.uid == request.resource.data.userId &&
                      // Ensure essential fields for an idea submission are present
                      request.resource.data.keys().hasAll([
                        'userId', 'title', 'problem', 'solution', 'uniqueness',
                        'developmentStage', 'applicantType', 'status', 'submittedAt', 'updatedAt'
                      ]) &&
                      // Allow phase2Marks to be an empty map or a map with valid structure
                      (request.resource.data.phase2Marks == {} || request.resource.data.phase2Marks is map);

      allow update: if (request.auth.uid == resource.data.userId &&
                        // User can update their own idea, but not status, phase, mentor, cohort, marks, rejection details
                        // These fields should only be updated by an admin.
                        // Allow updating ppt details by owner.
                        (request.resource.data.status == resource.data.status) &&
                        (request.resource.data.programPhase == resource.data.programPhase) &&
                        (request.resource.data.mentor == resource.data.mentor) &&
                        (request.resource.data.cohortId == resource.data.cohortId) &&
                        (request.resource.data.phase2Marks == resource.data.phase2Marks) &&
                        (request.resource.data.rejectionRemarks == resource.data.rejectionRemarks) &&
                        (request.resource.data.rejectedByUid == resource.data.rejectedByUid) &&
                        (request.resource.data.rejectedAt == resource.data.rejectedAt) &&
                        // User cannot change critical ownership fields
                        request.resource.data.userId == resource.data.userId &&
                        request.resource.data.submittedAt == resource.data.submittedAt
                       ) ||
                       isAdmin(); // Admins can update any field of an idea

      allow delete: if isAdmin();
    }

    // Announcements Collection
    match /announcements/{announcementId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // Cohorts Collection
    match /cohorts/{cohortId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }

    // System Settings Collection
    match /systemSettings/config { // Assuming a single document with ID 'config'
      allow get: if request.auth != null;
      allow write: if isAdmin(); // Only admins can read/write system settings
    }

    // Activity Logs Collection
    match /activityLogs/{logId} {
      // Allow authenticated users to create their own activity logs
      allow create: if request.auth != null && request.resource.data.actorUid == request.auth.uid;
      // Reading logs might be restricted to admins or specific roles depending on requirements
      allow read: if isAdmin();
      // Logs should generally be immutable by users
      allow update, delete: if isAdmin(); // Or disallow completely: if false;
    }
  }
}
